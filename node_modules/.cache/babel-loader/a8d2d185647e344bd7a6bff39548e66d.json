{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sayanmondal/Code/react/mytodo/node_modules/@babel/runtime/regenerator\";\nimport React from 'react';\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n\n  return (hint === \"string\" ? String : Number)(input);\n}\n\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n\n  return typeof key === \"symbol\" ? key : String(key);\n}\n\nvar renderErr = 'Renderer Error ☝️';\nvar actions = {\n  init: 'init'\n};\nvar defaultColumn = {\n  Cell: function Cell(_ref) {\n    var _ref$cell$value = _ref.cell.value,\n        value = _ref$cell$value === void 0 ? '' : _ref$cell$value;\n    return value;\n  },\n  width: 150,\n  minWidth: 0,\n  maxWidth: Number.MAX_SAFE_INTEGER\n};\n\nfunction defaultOrderByFn(arr, funcs, dirs) {\n  return [].concat(arr).sort(function (rowA, rowB) {\n    for (var i = 0; i < funcs.length; i += 1) {\n      var sortFn = funcs[i];\n      var desc = dirs[i] === false || dirs[i] === 'desc';\n      var sortInt = sortFn(rowA, rowB);\n\n      if (sortInt !== 0) {\n        return desc ? -sortInt : sortInt;\n      }\n    }\n\n    return dirs[0] ? rowA.index - rowB.index : rowB.index - rowA.index;\n  });\n}\n\nfunction defaultGroupByFn(rows, columnId) {\n  return rows.reduce(function (prev, row, i) {\n    // TODO: Might want to implement a key serializer here so\n    // irregular column values can still be grouped if needed?\n    var resKey = \"\" + row.values[columnId];\n    prev[resKey] = Array.isArray(prev[resKey]) ? prev[resKey] : [];\n    prev[resKey].push(row);\n    return prev;\n  }, {});\n}\n\nfunction mergeProps() {\n  for (var _len = arguments.length, propList = new Array(_len), _key = 0; _key < _len; _key++) {\n    propList[_key] = arguments[_key];\n  }\n\n  return propList.reduce(function (props, next) {\n    var style = next.style,\n        className = next.className,\n        rest = _objectWithoutPropertiesLoose(next, [\"style\", \"className\"]);\n\n    props = _extends({}, props, {}, rest);\n\n    if (style) {\n      props.style = props.style ? _extends({}, props.style || {}, {}, style || {}) : style;\n    }\n\n    if (className) {\n      props.className = props.className ? props.className + ' ' + className : className;\n    }\n\n    if (props.className === '') {\n      delete props.className;\n    }\n\n    return props;\n  }, {});\n}\n\nfunction handlePropGetter(prevProps, userProps, meta) {\n  // Handle a lambda, pass it the previous props\n  if (typeof userProps === 'function') {\n    return handlePropGetter({}, userProps(prevProps, meta));\n  } // Handle an array, merge each item as separate props\n\n\n  if (Array.isArray(userProps)) {\n    return mergeProps.apply(void 0, [prevProps].concat(userProps));\n  } // Handle an object by default, merge the two objects\n\n\n  return mergeProps(prevProps, userProps);\n}\n\nvar makePropGetter = function makePropGetter(hooks, meta) {\n  if (meta === void 0) {\n    meta = {};\n  }\n\n  return function (userProps) {\n    if (userProps === void 0) {\n      userProps = {};\n    }\n\n    return [].concat(hooks, [userProps]).reduce(function (prev, next) {\n      return handlePropGetter(prev, next, _extends({}, meta, {\n        userProps: userProps\n      }));\n    }, {});\n  };\n};\n\nvar reduceHooks = function reduceHooks(hooks, initial, meta, allowUndefined) {\n  if (meta === void 0) {\n    meta = {};\n  }\n\n  return hooks.reduce(function (prev, next) {\n    var nextValue = next(prev, meta);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!allowUndefined && typeof nextValue === 'undefined') {\n        console.info(next);\n        throw new Error('React Table: A reducer hook ☝️ just returned undefined! This is not allowed.');\n      }\n    }\n\n    return nextValue;\n  }, initial);\n};\n\nvar loopHooks = function loopHooks(hooks, context, meta) {\n  if (meta === void 0) {\n    meta = {};\n  }\n\n  return hooks.forEach(function (hook) {\n    var nextValue = hook(context, meta);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof nextValue !== 'undefined') {\n        console.info(hook, nextValue);\n        throw new Error('React Table: A loop-type hook ☝️ just returned a value! This is not allowed.');\n      }\n    }\n  });\n};\n\nfunction ensurePluginOrder(plugins, befores, pluginName, afters) {\n  if (process.env.NODE_ENV !== 'production' && afters) {\n    throw new Error(\"Defining plugins in the \\\"after\\\" section of ensurePluginOrder is no longer supported (see plugin \" + pluginName + \")\");\n  }\n\n  var pluginIndex = plugins.findIndex(function (plugin) {\n    return plugin.pluginName === pluginName;\n  });\n\n  if (pluginIndex === -1) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\"The plugin \\\"\" + pluginName + \"\\\" was not found in the plugin list!\\nThis usually means you need to need to name your plugin hook by setting the 'pluginName' property of the hook function, eg:\\n\\n  \" + pluginName + \".pluginName = '\" + pluginName + \"'\\n\");\n    }\n  }\n\n  befores.forEach(function (before) {\n    var beforeIndex = plugins.findIndex(function (plugin) {\n      return plugin.pluginName === before;\n    });\n\n    if (beforeIndex > -1 && beforeIndex > pluginIndex) {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error(\"React Table: The \" + pluginName + \" plugin hook must be placed after the \" + before + \" plugin hook!\");\n      }\n    }\n  });\n}\n\nfunction functionalUpdate(updater, old) {\n  return typeof updater === 'function' ? updater(old) : updater;\n}\n\nfunction useGetLatest(obj) {\n  var ref = React.useRef();\n  ref.current = obj;\n  return React.useCallback(function () {\n    return ref.current;\n  }, []);\n} // SSR has issues with useLayoutEffect still, so use useEffect during SSR\n\n\nvar safeUseLayoutEffect = typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n\nfunction useMountedLayoutEffect(fn, deps) {\n  var mountedRef = React.useRef(false);\n  safeUseLayoutEffect(function () {\n    if (mountedRef.current) {\n      fn();\n    }\n\n    mountedRef.current = true; // eslint-disable-next-line\n  }, deps);\n}\n\nfunction useAsyncDebounce(defaultFn, defaultWait) {\n  if (defaultWait === void 0) {\n    defaultWait = 0;\n  }\n\n  var debounceRef = React.useRef({});\n  var getDefaultFn = useGetLatest(defaultFn);\n  var getDefaultWait = useGetLatest(defaultWait);\n  return React.useCallback(\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var _len2,\n          args,\n          _key2,\n          _args2 = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              for (_len2 = _args2.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n                args[_key2] = _args2[_key2];\n              }\n\n              if (!debounceRef.current.promise) {\n                debounceRef.current.promise = new Promise(function (resolve, reject) {\n                  debounceRef.current.resolve = resolve;\n                  debounceRef.current.reject = reject;\n                });\n              }\n\n              if (debounceRef.current.timeout) {\n                clearTimeout(debounceRef.current.timeout);\n              }\n\n              debounceRef.current.timeout = setTimeout(\n              /*#__PURE__*/\n              _asyncToGenerator(\n              /*#__PURE__*/\n              _regeneratorRuntime.mark(function _callee() {\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        delete debounceRef.current.timeout;\n                        _context.prev = 1;\n                        _context.t0 = debounceRef.current;\n                        _context.next = 5;\n                        return getDefaultFn().apply(void 0, args);\n\n                      case 5:\n                        _context.t1 = _context.sent;\n\n                        _context.t0.resolve.call(_context.t0, _context.t1);\n\n                        _context.next = 12;\n                        break;\n\n                      case 9:\n                        _context.prev = 9;\n                        _context.t2 = _context[\"catch\"](1);\n                        debounceRef.current.reject(_context.t2);\n\n                      case 12:\n                        _context.prev = 12;\n                        delete debounceRef.current.promise;\n                        return _context.finish(12);\n\n                      case 15:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee, null, [[1, 9, 12, 15]]);\n              })), getDefaultWait());\n              return _context2.abrupt(\"return\", debounceRef.current.promise);\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function () {\n      return _ref2.apply(this, arguments);\n    };\n  }(), [getDefaultFn, getDefaultWait]);\n}\n\nfunction makeRenderer(instance, column, meta) {\n  if (meta === void 0) {\n    meta = {};\n  }\n\n  return function (type, userProps) {\n    if (userProps === void 0) {\n      userProps = {};\n    }\n\n    var Comp = typeof type === 'string' ? column[type] : type;\n\n    if (typeof Comp === 'undefined') {\n      console.info(column);\n      throw new Error(renderErr);\n    }\n\n    return flexRender(Comp, _extends({}, instance, {\n      column: column\n    }, meta, {}, userProps));\n  };\n}\n\nfunction flexRender(Comp, props) {\n  return isReactComponent(Comp) ? React.createElement(Comp, props) : Comp;\n}\n\nfunction isClassComponent(component) {\n  return typeof component === 'function' && !!function () {\n    var proto = Object.getPrototypeOf(component);\n    return proto.prototype && proto.prototype.isReactComponent;\n  }();\n}\n\nfunction isFunctionComponent(component) {\n  return typeof component === 'function';\n}\n\nfunction isExoticComponent(component) {\n  return typeof component === 'object' && typeof component.$$typeof === 'symbol' && ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description);\n}\n\nfunction isReactComponent(component) {\n  return isClassComponent(component) || isFunctionComponent(component) || isExoticComponent(component);\n}\n\nfunction linkColumnStructure(columns, parent, depth) {\n  if (depth === void 0) {\n    depth = 0;\n  }\n\n  return columns.map(function (column) {\n    column = _extends({}, column, {\n      parent: parent,\n      depth: depth\n    });\n    assignColumnAccessor(column);\n\n    if (column.columns) {\n      column.columns = linkColumnStructure(column.columns, column, depth + 1);\n    }\n\n    return column;\n  });\n}\n\nfunction flattenColumns(columns) {\n  return flattenBy(columns, 'columns');\n}\n\nfunction assignColumnAccessor(column) {\n  // First check for string accessor\n  var id = column.id,\n      accessor = column.accessor,\n      Header = column.Header;\n\n  if (typeof accessor === 'string') {\n    id = id || accessor;\n    var accessorPath = accessor.split('.');\n\n    accessor = function accessor(row) {\n      return getBy(row, accessorPath);\n    };\n  }\n\n  if (!id && typeof Header === 'string' && Header) {\n    id = Header;\n  }\n\n  if (!id && column.columns) {\n    console.error(column);\n    throw new Error('A column ID (or unique \"Header\" value) is required!');\n  }\n\n  if (!id) {\n    console.error(column);\n    throw new Error('A column ID (or string accessor) is required!');\n  }\n\n  Object.assign(column, {\n    id: id,\n    accessor: accessor\n  });\n  return column;\n} // Find the depth of the columns\n\n\nfunction dedupeBy(arr, fn) {\n  return [].concat(arr).reverse().filter(function (d, i, all) {\n    return all.findIndex(function (dd) {\n      return fn(dd) === fn(d);\n    }) === i;\n  }).reverse();\n}\n\nfunction decorateColumn(column, userDefaultColumn) {\n  if (!userDefaultColumn) {\n    throw new Error();\n  }\n\n  Object.assign(column, _extends({\n    // Make sure there is a fallback header, just in case\n    Header: function Header() {\n      return React.createElement(React.Fragment, null, \"\\xA0\");\n    },\n    Footer: function Footer() {\n      return React.createElement(React.Fragment, null, \"\\xA0\");\n    }\n  }, defaultColumn, {}, userDefaultColumn, {}, column));\n  return column;\n} // Build the header groups from the bottom up\n\n\nfunction makeHeaderGroups(allColumns, defaultColumn) {\n  var headerGroups = [];\n  var scanColumns = allColumns;\n  var uid = 0;\n\n  var getUID = function getUID() {\n    return uid++;\n  };\n\n  var _loop = function _loop() {\n    // The header group we are creating\n    var headerGroup = {\n      headers: []\n    }; // The parent columns we're going to scan next\n\n    var parentColumns = [];\n    var hasParents = scanColumns.some(function (d) {\n      return d.parent;\n    }); // Scan each column for parents\n\n    scanColumns.forEach(function (column) {\n      // What is the latest (last) parent column?\n      var latestParentColumn = [].concat(parentColumns).reverse()[0];\n      var newParent;\n\n      if (hasParents) {\n        // If the column has a parent, add it if necessary\n        if (column.parent) {\n          newParent = _extends({}, column.parent, {\n            originalId: column.parent.id,\n            id: column.parent.id + \"_\" + getUID(),\n            headers: [column]\n          });\n        } else {\n          // If other columns have parents, we'll need to add a place holder if necessary\n          var originalId = column.id + \"_placeholder\";\n          newParent = decorateColumn({\n            originalId: originalId,\n            id: column.id + \"_placeholder_\" + getUID(),\n            placeholderOf: column,\n            headers: [column]\n          }, defaultColumn);\n        } // If the resulting parent columns are the same, just add\n        // the column and increment the header span\n\n\n        if (latestParentColumn && latestParentColumn.originalId === newParent.originalId) {\n          latestParentColumn.headers.push(column);\n        } else {\n          parentColumns.push(newParent);\n        }\n      }\n\n      headerGroup.headers.push(column);\n    });\n    headerGroups.push(headerGroup); // Start scanning the parent columns\n\n    scanColumns = parentColumns;\n  };\n\n  while (scanColumns.length) {\n    _loop();\n  }\n\n  return headerGroups.reverse();\n}\n\nvar pathObjCache = new Map();\n\nfunction getBy(obj, path, def) {\n  if (!path) {\n    return obj;\n  }\n\n  var cacheKey = typeof path === 'function' ? path : JSON.stringify(path);\n\n  var pathObj = pathObjCache.get(cacheKey) || function () {\n    var pathObj = makePathArray(path);\n    pathObjCache.set(cacheKey, pathObj);\n    return pathObj;\n  }();\n\n  var val;\n\n  try {\n    val = pathObj.reduce(function (cursor, pathPart) {\n      return cursor[pathPart];\n    }, obj);\n  } catch (e) {// continue regardless of error\n  }\n\n  return typeof val !== 'undefined' ? val : def;\n}\n\nfunction getFirstDefined() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  for (var i = 0; i < args.length; i += 1) {\n    if (typeof args[i] !== 'undefined') {\n      return args[i];\n    }\n  }\n}\n\nfunction isFunction(a) {\n  if (typeof a === 'function') {\n    return a;\n  }\n}\n\nfunction flattenBy(arr, key) {\n  var flat = [];\n\n  var recurse = function recurse(arr) {\n    arr.forEach(function (d) {\n      if (!d[key]) {\n        flat.push(d);\n      } else {\n        recurse(d[key]);\n      }\n    });\n  };\n\n  recurse(arr);\n  return flat;\n}\n\nfunction expandRows(rows, _ref) {\n  var manualExpandedKey = _ref.manualExpandedKey,\n      expanded = _ref.expanded,\n      _ref$expandSubRows = _ref.expandSubRows,\n      expandSubRows = _ref$expandSubRows === void 0 ? true : _ref$expandSubRows;\n  var expandedRows = [];\n\n  var handleRow = function handleRow(row) {\n    row.isExpanded = row.original && row.original[manualExpandedKey] || expanded[row.id];\n    row.canExpand = row.subRows && !!row.subRows.length;\n    expandedRows.push(row);\n\n    if (expandSubRows && row.subRows && row.subRows.length && row.isExpanded) {\n      row.subRows.forEach(handleRow);\n    }\n  };\n\n  rows.forEach(handleRow);\n  return expandedRows;\n}\n\nfunction getFilterMethod(filter, userFilterTypes, filterTypes) {\n  return isFunction(filter) || userFilterTypes[filter] || filterTypes[filter] || filterTypes.text;\n}\n\nfunction shouldAutoRemoveFilter(autoRemove, value, column) {\n  return autoRemove ? autoRemove(value, column) : typeof value === 'undefined';\n}\n\nfunction unpreparedAccessWarning() {\n  throw new Error('React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.');\n} //\n\n\nvar reOpenBracket = /\\[/g;\nvar reCloseBracket = /\\]/g;\n\nfunction makePathArray(obj) {\n  return flattenDeep(obj) // remove all periods in parts\n  .map(function (d) {\n    return String(d).replace('.', '_');\n  }) // join parts using period\n  .join('.') // replace brackets with periods\n  .replace(reOpenBracket, '.').replace(reCloseBracket, '') // split it back out on periods\n  .split('.');\n}\n\nfunction flattenDeep(arr, newArr) {\n  if (newArr === void 0) {\n    newArr = [];\n  }\n\n  if (!Array.isArray(arr)) {\n    newArr.push(arr);\n  } else {\n    for (var i = 0; i < arr.length; i += 1) {\n      flattenDeep(arr[i], newArr);\n    }\n  }\n\n  return newArr;\n}\n\nvar defaultGetTableProps = function defaultGetTableProps(props) {\n  return _extends({\n    role: 'table'\n  }, props);\n};\n\nvar defaultGetTableBodyProps = function defaultGetTableBodyProps(props) {\n  return _extends({\n    role: 'rowgroup'\n  }, props);\n};\n\nvar defaultGetHeaderProps = function defaultGetHeaderProps(props, _ref) {\n  var column = _ref.column;\n  return _extends({\n    key: \"header_\" + column.id,\n    colSpan: column.totalVisibleHeaderCount,\n    role: 'columnheader'\n  }, props);\n};\n\nvar defaultGetFooterProps = function defaultGetFooterProps(props, _ref2) {\n  var column = _ref2.column;\n  return _extends({\n    key: \"footer_\" + column.id,\n    colSpan: column.totalVisibleHeaderCount\n  }, props);\n};\n\nvar defaultGetHeaderGroupProps = function defaultGetHeaderGroupProps(props, _ref3) {\n  var index = _ref3.index;\n  return _extends({\n    key: \"headerGroup_\" + index,\n    role: 'row'\n  }, props);\n};\n\nvar defaultGetFooterGroupProps = function defaultGetFooterGroupProps(props, _ref4) {\n  var index = _ref4.index;\n  return _extends({\n    key: \"footerGroup_\" + index\n  }, props);\n};\n\nvar defaultGetRowProps = function defaultGetRowProps(props, _ref5) {\n  var row = _ref5.row;\n  return _extends({\n    key: \"row_\" + row.id,\n    role: 'row'\n  }, props);\n};\n\nvar defaultGetCellProps = function defaultGetCellProps(props, _ref6) {\n  var cell = _ref6.cell;\n  return _extends({\n    key: \"cell_\" + cell.row.id + \"_\" + cell.column.id,\n    role: 'cell'\n  }, props);\n};\n\nfunction makeDefaultPluginHooks() {\n  return {\n    useOptions: [],\n    stateReducers: [],\n    useControlledState: [],\n    columns: [],\n    columnsDeps: [],\n    allColumns: [],\n    allColumnsDeps: [],\n    accessValue: [],\n    materializedColumns: [],\n    materializedColumnsDeps: [],\n    useInstanceAfterData: [],\n    visibleColumns: [],\n    visibleColumnsDeps: [],\n    headerGroups: [],\n    headerGroupsDeps: [],\n    useInstanceBeforeDimensions: [],\n    useInstance: [],\n    prepareRow: [],\n    getTableProps: [defaultGetTableProps],\n    getTableBodyProps: [defaultGetTableBodyProps],\n    getHeaderGroupProps: [defaultGetHeaderGroupProps],\n    getFooterGroupProps: [defaultGetFooterGroupProps],\n    getHeaderProps: [defaultGetHeaderProps],\n    getFooterProps: [defaultGetFooterProps],\n    getRowProps: [defaultGetRowProps],\n    getCellProps: [defaultGetCellProps],\n    useFinalInstance: []\n  };\n}\n\nactions.resetHiddenColumns = 'resetHiddenColumns';\nactions.toggleHideColumn = 'toggleHideColumn';\nactions.setHiddenColumns = 'setHiddenColumns';\nactions.toggleHideAllColumns = 'toggleHideAllColumns';\n\nvar useColumnVisibility = function useColumnVisibility(hooks) {\n  hooks.getToggleHiddenProps = [defaultGetToggleHiddenProps];\n  hooks.getToggleHideAllColumnsProps = [defaultGetToggleHideAllColumnsProps];\n  hooks.stateReducers.push(reducer);\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions);\n  hooks.headerGroupsDeps.push(function (deps, _ref) {\n    var instance = _ref.instance;\n    return [].concat(deps, [instance.state.hiddenColumns]);\n  });\n  hooks.useInstance.push(useInstance);\n};\n\nuseColumnVisibility.pluginName = 'useColumnVisibility';\n\nvar defaultGetToggleHiddenProps = function defaultGetToggleHiddenProps(props, _ref2) {\n  var column = _ref2.column;\n  return [props, {\n    onChange: function onChange(e) {\n      column.toggleHidden(!e.target.checked);\n    },\n    style: {\n      cursor: 'pointer'\n    },\n    checked: column.isVisible,\n    title: 'Toggle Column Visible'\n  }];\n};\n\nvar defaultGetToggleHideAllColumnsProps = function defaultGetToggleHideAllColumnsProps(props, _ref3) {\n  var instance = _ref3.instance;\n  return [props, {\n    onChange: function onChange(e) {\n      instance.toggleHideAllColumns(!e.target.checked);\n    },\n    style: {\n      cursor: 'pointer'\n    },\n    checked: !instance.allColumnsHidden && !instance.state.hiddenColumns.length,\n    title: 'Toggle All Columns Hidden',\n    indeterminate: !instance.allColumnsHidden && instance.state.hiddenColumns.length\n  }];\n};\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return _extends({\n      hiddenColumns: []\n    }, state);\n  }\n\n  if (action.type === actions.resetHiddenColumns) {\n    return _extends({}, state, {\n      hiddenColumns: instance.initialState.hiddenColumns || []\n    });\n  }\n\n  if (action.type === actions.toggleHideColumn) {\n    var should = typeof action.value !== 'undefined' ? action.value : !state.hiddenColumns.includes(action.columnId);\n    var hiddenColumns = should ? [].concat(state.hiddenColumns, [action.columnId]) : state.hiddenColumns.filter(function (d) {\n      return d !== action.columnId;\n    });\n    return _extends({}, state, {\n      hiddenColumns: hiddenColumns\n    });\n  }\n\n  if (action.type === actions.setHiddenColumns) {\n    return _extends({}, state, {\n      hiddenColumns: functionalUpdate(action.value, state.hiddenColumns)\n    });\n  }\n\n  if (action.type === actions.toggleHideAllColumns) {\n    var shouldAll = typeof action.value !== 'undefined' ? action.value : !state.hiddenColumns.length;\n    return _extends({}, state, {\n      hiddenColumns: shouldAll ? instance.allColumns.map(function (d) {\n        return d.id;\n      }) : []\n    });\n  }\n}\n\nfunction useInstanceBeforeDimensions(instance) {\n  var headers = instance.headers,\n      hiddenColumns = instance.state.hiddenColumns;\n  var isMountedRef = React.useRef(false);\n  if (!isMountedRef.current) ;\n\n  var handleColumn = function handleColumn(column, parentVisible) {\n    column.isVisible = parentVisible && !hiddenColumns.includes(column.id);\n    var totalVisibleHeaderCount = 0;\n\n    if (column.headers && column.headers.length) {\n      column.headers.forEach(function (subColumn) {\n        return totalVisibleHeaderCount += handleColumn(subColumn, column.isVisible);\n      });\n    } else {\n      totalVisibleHeaderCount = column.isVisible ? 1 : 0;\n    }\n\n    column.totalVisibleHeaderCount = totalVisibleHeaderCount;\n    return totalVisibleHeaderCount;\n  };\n\n  var totalVisibleHeaderCount = 0;\n  headers.forEach(function (subHeader) {\n    return totalVisibleHeaderCount += handleColumn(subHeader, true);\n  });\n}\n\nfunction useInstance(instance) {\n  var flatHeaders = instance.flatHeaders,\n      dispatch = instance.dispatch,\n      allColumns = instance.allColumns,\n      getHooks = instance.getHooks,\n      hiddenColumns = instance.state.hiddenColumns;\n  var getInstance = useGetLatest(instance);\n  var allColumnsHidden = allColumns.length === hiddenColumns.length;\n  var toggleHideColumn = React.useCallback(function (columnId, value) {\n    return dispatch({\n      type: actions.toggleHideColumn,\n      columnId: columnId,\n      value: value\n    });\n  }, [dispatch]);\n  var setHiddenColumns = React.useCallback(function (value) {\n    return dispatch({\n      type: actions.setHiddenColumns,\n      value: value\n    });\n  }, [dispatch]);\n  var toggleHideAllColumns = React.useCallback(function (value) {\n    return dispatch({\n      type: actions.toggleHideAllColumns,\n      value: value\n    });\n  }, [dispatch]);\n  var getToggleHideAllColumnsProps = makePropGetter(getHooks().getToggleHideAllColumnsProps, {\n    instance: getInstance()\n  });\n  flatHeaders.forEach(function (column) {\n    column.toggleHidden = function (value) {\n      dispatch({\n        type: actions.toggleHideColumn,\n        columnId: column.id,\n        value: value\n      });\n    };\n\n    column.getToggleHiddenProps = makePropGetter(getHooks().getToggleHiddenProps, {\n      instance: getInstance(),\n      column: column\n    });\n  });\n  Object.assign(instance, {\n    allColumnsHidden: allColumnsHidden,\n    toggleHideColumn: toggleHideColumn,\n    setHiddenColumns: setHiddenColumns,\n    toggleHideAllColumns: toggleHideAllColumns,\n    getToggleHideAllColumnsProps: getToggleHideAllColumnsProps\n  });\n}\n\nvar defaultInitialState = {};\nvar defaultColumnInstance = {};\n\nvar defaultReducer = function defaultReducer(state, action, prevState) {\n  return state;\n};\n\nvar defaultGetSubRows = function defaultGetSubRows(row, index) {\n  return row.subRows || [];\n};\n\nvar defaultGetRowId = function defaultGetRowId(row, index, parent) {\n  return \"\" + (parent ? [parent.id, index].join('.') : index);\n};\n\nvar defaultUseControlledState = function defaultUseControlledState(d) {\n  return d;\n};\n\nfunction applyDefaults(props) {\n  var _props$initialState = props.initialState,\n      initialState = _props$initialState === void 0 ? defaultInitialState : _props$initialState,\n      _props$defaultColumn = props.defaultColumn,\n      defaultColumn = _props$defaultColumn === void 0 ? defaultColumnInstance : _props$defaultColumn,\n      _props$getSubRows = props.getSubRows,\n      getSubRows = _props$getSubRows === void 0 ? defaultGetSubRows : _props$getSubRows,\n      _props$getRowId = props.getRowId,\n      getRowId = _props$getRowId === void 0 ? defaultGetRowId : _props$getRowId,\n      _props$stateReducer = props.stateReducer,\n      stateReducer = _props$stateReducer === void 0 ? defaultReducer : _props$stateReducer,\n      _props$useControlledS = props.useControlledState,\n      useControlledState = _props$useControlledS === void 0 ? defaultUseControlledState : _props$useControlledS,\n      rest = _objectWithoutPropertiesLoose(props, [\"initialState\", \"defaultColumn\", \"getSubRows\", \"getRowId\", \"stateReducer\", \"useControlledState\"]);\n\n  return _extends({}, rest, {\n    initialState: initialState,\n    defaultColumn: defaultColumn,\n    getSubRows: getSubRows,\n    getRowId: getRowId,\n    stateReducer: stateReducer,\n    useControlledState: useControlledState\n  });\n}\n\nvar useTable = function useTable(props) {\n  for (var _len = arguments.length, plugins = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    plugins[_key - 1] = arguments[_key];\n  } // Apply default props\n\n\n  props = applyDefaults(props); // Add core plugins\n\n  plugins = [useColumnVisibility].concat(plugins); // Create the table instance\n\n  var instanceRef = React.useRef({}); // Create a getter for the instance (helps avoid a lot of potential memory leaks)\n\n  var getInstance = useGetLatest(instanceRef.current); // Assign the props, plugins and hooks to the instance\n\n  Object.assign(getInstance(), _extends({}, props, {\n    plugins: plugins,\n    hooks: makeDefaultPluginHooks()\n  })); // Allow plugins to register hooks as early as possible\n\n  plugins.filter(Boolean).forEach(function (plugin) {\n    plugin(getInstance().hooks);\n  }); // Consume all hooks and make a getter for them\n\n  var getHooks = useGetLatest(getInstance().hooks);\n  getInstance().getHooks = getHooks;\n  delete getInstance().hooks; // Allow useOptions hooks to modify the options coming into the table\n\n  Object.assign(getInstance(), reduceHooks(getHooks().useOptions, applyDefaults(props)));\n\n  var _getInstance = getInstance(),\n      data = _getInstance.data,\n      userColumns = _getInstance.columns,\n      initialState = _getInstance.initialState,\n      defaultColumn = _getInstance.defaultColumn,\n      getSubRows = _getInstance.getSubRows,\n      getRowId = _getInstance.getRowId,\n      stateReducer = _getInstance.stateReducer,\n      useControlledState = _getInstance.useControlledState; // Setup user reducer ref\n\n\n  var getStateReducer = useGetLatest(stateReducer); // Build the reducer\n\n  var reducer = React.useCallback(function (state, action) {\n    // Detect invalid actions\n    if (!action.type) {\n      console.info({\n        action: action\n      });\n      throw new Error('Unknown Action 👆');\n    } // Reduce the state from all plugin reducers\n\n\n    return [].concat(getHooks().stateReducers, Array.isArray(getStateReducer()) ? getStateReducer() : [getStateReducer()]).reduce(function (s, handler) {\n      return handler(s, action, state, getInstance()) || s;\n    }, state);\n  }, [getHooks, getStateReducer, getInstance]); // Start the reducer\n\n  var _React$useReducer = React.useReducer(reducer, undefined, function () {\n    return reducer(initialState, {\n      type: actions.init\n    });\n  }),\n      reducerState = _React$useReducer[0],\n      dispatch = _React$useReducer[1]; // Allow the user to control the final state with hooks\n\n\n  var state = reduceHooks([].concat(getHooks().useControlledState, [useControlledState]), reducerState, {\n    instance: getInstance()\n  });\n  Object.assign(getInstance(), {\n    state: state,\n    dispatch: dispatch\n  }); // Decorate All the columns\n\n  var columns = React.useMemo(function () {\n    return linkColumnStructure(reduceHooks(getHooks().columns, userColumns, {\n      instance: getInstance()\n    }));\n  }, [getHooks, getInstance, userColumns].concat(reduceHooks(getHooks().columnsDeps, [], {\n    instance: getInstance()\n  })));\n  getInstance().columns = columns; // Get the flat list of all columns and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n\n  var allColumns = React.useMemo(function () {\n    return reduceHooks(getHooks().allColumns, flattenColumns(columns), {\n      instance: getInstance()\n    }).map(assignColumnAccessor);\n  }, [columns, getHooks, getInstance].concat(reduceHooks(getHooks().allColumnsDeps, [], {\n    instance: getInstance()\n  })));\n  getInstance().allColumns = allColumns; // Access the row model using initial columns\n\n  var coreDataModel = React.useMemo(function () {\n    var rows = [];\n    var flatRows = [];\n    var rowsById = {};\n    var allColumnsQueue = [].concat(allColumns);\n\n    while (allColumnsQueue.length) {\n      var column = allColumnsQueue.shift();\n      accessRowsForColumn({\n        data: data,\n        rows: rows,\n        flatRows: flatRows,\n        rowsById: rowsById,\n        column: column,\n        getRowId: getRowId,\n        getSubRows: getSubRows,\n        accessValueHooks: getHooks().accessValue,\n        getInstance: getInstance\n      });\n    }\n\n    return {\n      rows: rows,\n      flatRows: flatRows,\n      rowsById: rowsById\n    };\n  }, [allColumns, data, getRowId, getSubRows, getHooks, getInstance]); // Allow materialized columns to also access data\n\n  var _React$useMemo = React.useMemo(function () {\n    var rows = coreDataModel.rows,\n        flatRows = coreDataModel.flatRows,\n        rowsById = coreDataModel.rowsById;\n    var materializedColumns = reduceHooks(getHooks().materializedColumns, [], {\n      instance: getInstance()\n    });\n    materializedColumns.forEach(function (d) {\n      return assignColumnAccessor(d);\n    });\n    var materializedColumnsQueue = [].concat(materializedColumns);\n\n    while (materializedColumnsQueue.length) {\n      var column = materializedColumnsQueue.shift();\n      accessRowsForColumn({\n        data: data,\n        rows: rows,\n        flatRows: flatRows,\n        rowsById: rowsById,\n        column: column,\n        getRowId: getRowId,\n        getSubRows: getSubRows,\n        accessValueHooks: getHooks().accessValue,\n        getInstance: getInstance\n      });\n    }\n\n    return [rows, flatRows, rowsById, materializedColumns];\n  }, [coreDataModel, getHooks, getInstance, data, getRowId, getSubRows].concat(reduceHooks(getHooks().materializedColumnsDeps, [], {\n    instance: getInstance()\n  }))),\n      rows = _React$useMemo[0],\n      flatRows = _React$useMemo[1],\n      rowsById = _React$useMemo[2],\n      materializedColumns = _React$useMemo[3];\n\n  Object.assign(getInstance(), {\n    rows: rows,\n    flatRows: flatRows,\n    rowsById: rowsById,\n    materializedColumns: materializedColumns\n  });\n  loopHooks(getHooks().useInstanceAfterData, getInstance()); // Combine new materialized columns with all columns (dedupe prefers later columns)\n\n  allColumns = React.useMemo(function () {\n    return dedupeBy([].concat(allColumns, materializedColumns), function (d) {\n      return d.id;\n    });\n  }, [allColumns, materializedColumns]);\n  getInstance().allColumns = allColumns; // Get the flat list of all columns AFTER the rows\n  // have been access, and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n\n  var visibleColumns = React.useMemo(function () {\n    return reduceHooks(getHooks().visibleColumns, allColumns, {\n      instance: getInstance()\n    }).map(function (d) {\n      return decorateColumn(d, defaultColumn);\n    });\n  }, [getHooks, allColumns, getInstance, defaultColumn].concat(reduceHooks(getHooks().visibleColumnsDeps, [], {\n    instance: getInstance()\n  }))); // Combine new visible columns with all columns (dedupe prefers later columns)\n\n  allColumns = React.useMemo(function () {\n    return dedupeBy([].concat(allColumns, visibleColumns), function (d) {\n      return d.id;\n    });\n  }, [allColumns, visibleColumns]);\n  getInstance().allColumns = allColumns; // Make the headerGroups\n\n  var headerGroups = React.useMemo(function () {\n    return reduceHooks(getHooks().headerGroups, makeHeaderGroups(visibleColumns, defaultColumn), getInstance());\n  }, [getHooks, visibleColumns, defaultColumn, getInstance].concat(reduceHooks(getHooks().headerGroupsDeps, [], {\n    instance: getInstance()\n  })));\n  getInstance().headerGroups = headerGroups; // Get the first level of headers\n\n  var headers = React.useMemo(function () {\n    return headerGroups.length ? headerGroups[0].headers : [];\n  }, [headerGroups]);\n  getInstance().headers = headers; // Provide a flat header list for utilities\n\n  getInstance().flatHeaders = headerGroups.reduce(function (all, headerGroup) {\n    return [].concat(all, headerGroup.headers);\n  }, []);\n  loopHooks(getHooks().useInstanceBeforeDimensions, getInstance()); // Filter columns down to visible ones\n\n  var visibleColumnsDep = visibleColumns.filter(function (d) {\n    return d.isVisible;\n  }).map(function (d) {\n    return d.id;\n  }).sort().join('_');\n  visibleColumns = React.useMemo(function () {\n    return visibleColumns.filter(function (d) {\n      return d.isVisible;\n    });\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [visibleColumns, visibleColumnsDep]);\n  getInstance().visibleColumns = visibleColumns; // Header Visibility is needed by this point\n\n  var _calculateHeaderWidth = calculateHeaderWidths(headers),\n      totalColumnsMinWidth = _calculateHeaderWidth[0],\n      totalColumnsWidth = _calculateHeaderWidth[1],\n      totalColumnsMaxWidth = _calculateHeaderWidth[2];\n\n  getInstance().totalColumnsMinWidth = totalColumnsMinWidth;\n  getInstance().totalColumnsWidth = totalColumnsWidth;\n  getInstance().totalColumnsMaxWidth = totalColumnsMaxWidth;\n  loopHooks(getHooks().useInstance, getInstance()) // Each materialized header needs to be assigned a render function and other\n  // prop getter properties here.\n  ;\n  [].concat(getInstance().flatHeaders, getInstance().allColumns).forEach(function (column) {\n    // Give columns/headers rendering power\n    column.render = makeRenderer(getInstance(), column); // Give columns/headers a default getHeaderProps\n\n    column.getHeaderProps = makePropGetter(getHooks().getHeaderProps, {\n      instance: getInstance(),\n      column: column\n    }); // Give columns/headers a default getFooterProps\n\n    column.getFooterProps = makePropGetter(getHooks().getFooterProps, {\n      instance: getInstance(),\n      column: column\n    });\n  });\n  getInstance().headerGroups = getInstance().headerGroups.filter(function (headerGroup, i) {\n    // Filter out any headers and headerGroups that don't have visible columns\n    headerGroup.headers = headerGroup.headers.filter(function (column) {\n      var recurse = function recurse(headers) {\n        return headers.filter(function (column) {\n          if (column.headers) {\n            return recurse(column.headers);\n          }\n\n          return column.isVisible;\n        }).length;\n      };\n\n      if (column.headers) {\n        return recurse(column.headers);\n      }\n\n      return column.isVisible;\n    }); // Give headerGroups getRowProps\n\n    if (headerGroup.headers.length) {\n      headerGroup.getHeaderGroupProps = makePropGetter(getHooks().getHeaderGroupProps, {\n        instance: getInstance(),\n        headerGroup: headerGroup,\n        index: i\n      });\n      headerGroup.getFooterGroupProps = makePropGetter(getHooks().getFooterGroupProps, {\n        instance: getInstance(),\n        headerGroup: headerGroup,\n        index: i\n      });\n      return true;\n    }\n\n    return false;\n  });\n  getInstance().footerGroups = [].concat(getInstance().headerGroups).reverse(); // The prepareRow function is absolutely necessary and MUST be called on\n  // any rows the user wishes to be displayed.\n\n  getInstance().prepareRow = React.useCallback(function (row) {\n    row.getRowProps = makePropGetter(getHooks().getRowProps, {\n      instance: getInstance(),\n      row: row\n    }); // Build the visible cells for each row\n\n    row.allCells = allColumns.map(function (column) {\n      var cell = {\n        column: column,\n        row: row,\n        value: row.values[column.id]\n      }; // Give each cell a getCellProps base\n\n      cell.getCellProps = makePropGetter(getHooks().getCellProps, {\n        instance: getInstance(),\n        cell: cell\n      }); // Give each cell a renderer function (supports multiple renderers)\n\n      cell.render = makeRenderer(getInstance(), column, {\n        row: row,\n        cell: cell\n      });\n      return cell;\n    });\n    row.cells = visibleColumns.map(function (column) {\n      return row.allCells.find(function (cell) {\n        return cell.column.id === column.id;\n      });\n    }); // need to apply any row specific hooks (useExpanded requires this)\n\n    loopHooks(getHooks().prepareRow, row, {\n      instance: getInstance()\n    });\n  }, [getHooks, getInstance, allColumns, visibleColumns]);\n  getInstance().getTableProps = makePropGetter(getHooks().getTableProps, {\n    instance: getInstance()\n  });\n  getInstance().getTableBodyProps = makePropGetter(getHooks().getTableBodyProps, {\n    instance: getInstance()\n  });\n  loopHooks(getHooks().useFinalInstance, getInstance());\n  return getInstance();\n};\n\nfunction calculateHeaderWidths(headers, left) {\n  if (left === void 0) {\n    left = 0;\n  }\n\n  var sumTotalMinWidth = 0;\n  var sumTotalWidth = 0;\n  var sumTotalMaxWidth = 0;\n  var sumTotalFlexWidth = 0;\n  headers.forEach(function (header) {\n    var subHeaders = header.headers;\n    header.totalLeft = left;\n\n    if (subHeaders && subHeaders.length) {\n      var _calculateHeaderWidth2 = calculateHeaderWidths(subHeaders, left),\n          totalMinWidth = _calculateHeaderWidth2[0],\n          totalWidth = _calculateHeaderWidth2[1],\n          totalMaxWidth = _calculateHeaderWidth2[2],\n          totalFlexWidth = _calculateHeaderWidth2[3];\n\n      header.totalMinWidth = totalMinWidth;\n      header.totalWidth = totalWidth;\n      header.totalMaxWidth = totalMaxWidth;\n      header.totalFlexWidth = totalFlexWidth;\n    } else {\n      header.totalMinWidth = header.minWidth;\n      header.totalWidth = Math.min(Math.max(header.minWidth, header.width), header.maxWidth);\n      header.totalMaxWidth = header.maxWidth;\n      header.totalFlexWidth = header.canResize ? header.totalWidth : 0;\n    }\n\n    if (header.isVisible) {\n      left += header.totalWidth;\n      sumTotalMinWidth += header.totalMinWidth;\n      sumTotalWidth += header.totalWidth;\n      sumTotalMaxWidth += header.totalMaxWidth;\n      sumTotalFlexWidth += header.totalFlexWidth;\n    }\n  });\n  return [sumTotalMinWidth, sumTotalWidth, sumTotalMaxWidth, sumTotalFlexWidth];\n}\n\nfunction accessRowsForColumn(_ref) {\n  var data = _ref.data,\n      rows = _ref.rows,\n      flatRows = _ref.flatRows,\n      rowsById = _ref.rowsById,\n      column = _ref.column,\n      getRowId = _ref.getRowId,\n      getSubRows = _ref.getSubRows,\n      accessValueHooks = _ref.accessValueHooks,\n      getInstance = _ref.getInstance; // Access the row's data column-by-column\n  // We do it this way so we can incrementally add materialized\n  // columns after the first pass and avoid excessive looping\n\n  var accessRow = function accessRow(originalRow, rowIndex, depth, parent, parentRows) {\n    if (depth === void 0) {\n      depth = 0;\n    } // Keep the original reference around\n\n\n    var original = originalRow;\n    var id = getRowId(originalRow, rowIndex, parent);\n    var row = rowsById[id]; // If the row hasn't been created, let's make it\n\n    if (!row) {\n      row = {\n        id: id,\n        original: original,\n        index: rowIndex,\n        depth: depth,\n        cells: [{}] // This is a dummy cell\n\n      }; // Override common array functions (and the dummy cell's getCellProps function)\n      // to show an error if it is accessed without calling prepareRow\n\n      row.cells.map = unpreparedAccessWarning;\n      row.cells.filter = unpreparedAccessWarning;\n      row.cells.forEach = unpreparedAccessWarning;\n      row.cells[0].getCellProps = unpreparedAccessWarning; // Create the cells and values\n\n      row.values = {}; // Push this row into the parentRows array\n\n      parentRows.push(row); // Keep track of every row in a flat array\n\n      flatRows.push(row); // Also keep track of every row by its ID\n\n      rowsById[id] = row; // Get the original subrows\n\n      row.originalSubRows = getSubRows(originalRow, rowIndex); // Then recursively access them\n\n      if (row.originalSubRows) {\n        var subRows = [];\n        row.originalSubRows.forEach(function (d, i) {\n          return accessRow(d, i, depth + 1, row, subRows);\n        }); // Keep the new subRows array on the row\n\n        row.subRows = subRows;\n      }\n    } else if (row.subRows) {\n      // If the row exists, then it's already been accessed\n      // Keep recursing, but don't worry about passing the\n      // accumlator array (those rows already exist)\n      row.originalSubRows.forEach(function (d, i) {\n        return accessRow(d, i, depth + 1, row);\n      });\n    } // If the column has an accessor, use it to get a value\n\n\n    if (column.accessor) {\n      row.values[column.id] = column.accessor(originalRow, rowIndex, row);\n    } // Allow plugins to manipulate the column value\n\n\n    row.values[column.id] = reduceHooks(accessValueHooks, row.values[column.id], {\n      row: row,\n      column: column,\n      instance: getInstance()\n    }, true);\n  };\n\n  data.forEach(function (originalRow, rowIndex) {\n    return accessRow(originalRow, rowIndex, 0, undefined, rows);\n  });\n}\n\nactions.resetExpanded = 'resetExpanded';\nactions.toggleRowExpanded = 'toggleRowExpanded';\nactions.toggleAllRowsExpanded = 'toggleAllRowsExpanded';\n\nvar useExpanded = function useExpanded(hooks) {\n  hooks.getToggleAllRowsExpandedProps = [defaultGetToggleAllRowsExpandedProps];\n  hooks.getToggleRowExpandedProps = [defaultGetToggleRowExpandedProps];\n  hooks.stateReducers.push(reducer$1);\n  hooks.useInstance.push(useInstance$1);\n  hooks.prepareRow.push(prepareRow);\n};\n\nuseExpanded.pluginName = 'useExpanded';\n\nvar defaultGetToggleAllRowsExpandedProps = function defaultGetToggleAllRowsExpandedProps(props, _ref) {\n  var instance = _ref.instance;\n  return [props, {\n    onClick: function onClick(e) {\n      instance.toggleAllRowsExpanded();\n    },\n    style: {\n      cursor: 'pointer'\n    },\n    title: 'Toggle All Rows Expanded'\n  }];\n};\n\nvar defaultGetToggleRowExpandedProps = function defaultGetToggleRowExpandedProps(props, _ref2) {\n  var row = _ref2.row;\n  return [props, {\n    onClick: function onClick() {\n      row.toggleRowExpanded();\n    },\n    style: {\n      cursor: 'pointer'\n    },\n    title: 'Toggle Row Expanded'\n  }];\n}; // Reducer\n\n\nfunction reducer$1(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return _extends({\n      expanded: {}\n    }, state);\n  }\n\n  if (action.type === actions.resetExpanded) {\n    return _extends({}, state, {\n      expanded: instance.initialState.expanded || {}\n    });\n  }\n\n  if (action.type === actions.toggleAllRowsExpanded) {\n    var value = action.value;\n    var isAllRowsExpanded = instance.isAllRowsExpanded,\n        rowsById = instance.rowsById;\n    var expandAll = typeof value !== 'undefined' ? value : !isAllRowsExpanded;\n\n    if (expandAll) {\n      var expanded = {};\n      Object.keys(rowsById).forEach(function (rowId) {\n        expanded[rowId] = true;\n      });\n      return _extends({}, state, {\n        expanded: expanded\n      });\n    }\n\n    return _extends({}, state, {\n      expanded: {}\n    });\n  }\n\n  if (action.type === actions.toggleRowExpanded) {\n    var id = action.id,\n        setExpanded = action.value;\n    var exists = state.expanded[id];\n    var shouldExist = typeof setExpanded !== 'undefined' ? setExpanded : !exists;\n\n    if (!exists && shouldExist) {\n      var _extends2;\n\n      return _extends({}, state, {\n        expanded: _extends({}, state.expanded, (_extends2 = {}, _extends2[id] = true, _extends2))\n      });\n    } else if (exists && !shouldExist) {\n      var _state$expanded = state.expanded,\n          _ = _state$expanded[id],\n          rest = _objectWithoutPropertiesLoose(_state$expanded, [id].map(_toPropertyKey));\n\n      return _extends({}, state, {\n        expanded: rest\n      });\n    } else {\n      return state;\n    }\n  }\n}\n\nfunction useInstance$1(instance) {\n  var data = instance.data,\n      rows = instance.rows,\n      rowsById = instance.rowsById,\n      _instance$manualExpan = instance.manualExpandedKey,\n      manualExpandedKey = _instance$manualExpan === void 0 ? 'expanded' : _instance$manualExpan,\n      _instance$paginateExp = instance.paginateExpandedRows,\n      paginateExpandedRows = _instance$paginateExp === void 0 ? true : _instance$paginateExp,\n      _instance$expandSubRo = instance.expandSubRows,\n      expandSubRows = _instance$expandSubRo === void 0 ? true : _instance$expandSubRo,\n      _instance$autoResetEx = instance.autoResetExpanded,\n      autoResetExpanded = _instance$autoResetEx === void 0 ? true : _instance$autoResetEx,\n      getHooks = instance.getHooks,\n      plugins = instance.plugins,\n      expanded = instance.state.expanded,\n      dispatch = instance.dispatch;\n  ensurePluginOrder(plugins, ['useSortBy', 'useGroupBy', 'usePivotColumns', 'useGlobalFilter'], 'useExpanded');\n  var getAutoResetExpanded = useGetLatest(autoResetExpanded);\n  var isAllRowsExpanded = Boolean(Object.keys(rowsById).length && Object.keys(expanded).length);\n\n  if (isAllRowsExpanded) {\n    if (Object.keys(rowsById).some(function (id) {\n      return !expanded[id];\n    })) {\n      isAllRowsExpanded = false;\n    }\n  } // Bypass any effects from firing when this changes\n\n\n  useMountedLayoutEffect(function () {\n    if (getAutoResetExpanded()) {\n      dispatch({\n        type: actions.resetExpanded\n      });\n    }\n  }, [dispatch, data]);\n  var toggleRowExpanded = React.useCallback(function (id, value) {\n    dispatch({\n      type: actions.toggleRowExpanded,\n      id: id,\n      value: value\n    });\n  }, [dispatch]);\n  var toggleAllRowsExpanded = React.useCallback(function (value) {\n    return dispatch({\n      type: actions.toggleAllRowsExpanded,\n      value: value\n    });\n  }, [dispatch]);\n  var expandedRows = React.useMemo(function () {\n    if (paginateExpandedRows) {\n      return expandRows(rows, {\n        manualExpandedKey: manualExpandedKey,\n        expanded: expanded,\n        expandSubRows: expandSubRows\n      });\n    }\n\n    return rows;\n  }, [paginateExpandedRows, rows, manualExpandedKey, expanded, expandSubRows]);\n  var expandedDepth = React.useMemo(function () {\n    return findExpandedDepth(expanded);\n  }, [expanded]);\n  var getInstance = useGetLatest(instance);\n  var getToggleAllRowsExpandedProps = makePropGetter(getHooks().getToggleAllRowsExpandedProps, {\n    instance: getInstance()\n  });\n  Object.assign(instance, {\n    preExpandedRows: rows,\n    expandedRows: expandedRows,\n    rows: expandedRows,\n    expandedDepth: expandedDepth,\n    isAllRowsExpanded: isAllRowsExpanded,\n    toggleRowExpanded: toggleRowExpanded,\n    toggleAllRowsExpanded: toggleAllRowsExpanded,\n    getToggleAllRowsExpandedProps: getToggleAllRowsExpandedProps\n  });\n}\n\nfunction prepareRow(row, _ref3) {\n  var getHooks = _ref3.instance.getHooks,\n      instance = _ref3.instance;\n\n  row.toggleRowExpanded = function (set) {\n    return instance.toggleRowExpanded(row.id, set);\n  };\n\n  row.getToggleRowExpandedProps = makePropGetter(getHooks().getToggleRowExpandedProps, {\n    instance: instance,\n    row: row\n  });\n}\n\nfunction findExpandedDepth(expanded) {\n  var maxDepth = 0;\n  Object.keys(expanded).forEach(function (id) {\n    var splitId = id.split('.');\n    maxDepth = Math.max(maxDepth, splitId.length);\n  });\n  return maxDepth;\n}\n\nvar text = function text(rows, ids, filterValue) {\n  rows = rows.filter(function (row) {\n    return ids.some(function (id) {\n      var rowValue = row.values[id];\n      return String(rowValue).toLowerCase().includes(String(filterValue).toLowerCase());\n    });\n  });\n  return rows;\n};\n\ntext.autoRemove = function (val) {\n  return !val;\n};\n\nvar exactText = function exactText(rows, ids, filterValue) {\n  return rows.filter(function (row) {\n    return ids.some(function (id) {\n      var rowValue = row.values[id];\n      return rowValue !== undefined ? String(rowValue).toLowerCase() === String(filterValue).toLowerCase() : true;\n    });\n  });\n};\n\nexactText.autoRemove = function (val) {\n  return !val;\n};\n\nvar exactTextCase = function exactTextCase(rows, ids, filterValue) {\n  return rows.filter(function (row) {\n    return ids.some(function (id) {\n      var rowValue = row.values[id];\n      return rowValue !== undefined ? String(rowValue) === String(filterValue) : true;\n    });\n  });\n};\n\nexactTextCase.autoRemove = function (val) {\n  return !val;\n};\n\nvar includes = function includes(rows, ids, filterValue) {\n  return rows.filter(function (row) {\n    return ids.some(function (id) {\n      var rowValue = row.values[id];\n      return filterValue.includes(rowValue);\n    });\n  });\n};\n\nincludes.autoRemove = function (val) {\n  return !val || !val.length;\n};\n\nvar includesAll = function includesAll(rows, ids, filterValue) {\n  return rows.filter(function (row) {\n    return ids.some(function (id) {\n      var rowValue = row.values[id];\n      return rowValue && rowValue.length && filterValue.every(function (val) {\n        return rowValue.includes(val);\n      });\n    });\n  });\n};\n\nincludesAll.autoRemove = function (val) {\n  return !val || !val.length;\n};\n\nvar exact = function exact(rows, ids, filterValue) {\n  return rows.filter(function (row) {\n    return ids.some(function (id) {\n      var rowValue = row.values[id];\n      return rowValue === filterValue;\n    });\n  });\n};\n\nexact.autoRemove = function (val) {\n  return typeof val === 'undefined';\n};\n\nvar equals = function equals(rows, ids, filterValue) {\n  return rows.filter(function (row) {\n    return ids.some(function (id) {\n      var rowValue = row.values[id]; // eslint-disable-next-line eqeqeq\n\n      return rowValue == filterValue;\n    });\n  });\n};\n\nequals.autoRemove = function (val) {\n  return val == null;\n};\n\nvar between = function between(rows, ids, filterValue) {\n  var _ref = filterValue || [],\n      min = _ref[0],\n      max = _ref[1];\n\n  min = typeof min === 'number' ? min : -Infinity;\n  max = typeof max === 'number' ? max : Infinity;\n\n  if (min > max) {\n    var temp = min;\n    min = max;\n    max = temp;\n  }\n\n  return rows.filter(function (row) {\n    return ids.some(function (id) {\n      var rowValue = row.values[id];\n      return rowValue >= min && rowValue <= max;\n    });\n  });\n};\n\nbetween.autoRemove = function (val) {\n  return !val || typeof val[0] !== 'number' && typeof val[1] !== 'number';\n};\n\nvar filterTypes =\n/*#__PURE__*/\nObject.freeze({\n  __proto__: null,\n  text: text,\n  exactText: exactText,\n  exactTextCase: exactTextCase,\n  includes: includes,\n  includesAll: includesAll,\n  exact: exact,\n  equals: equals,\n  between: between\n});\nactions.resetFilters = 'resetFilters';\nactions.setFilter = 'setFilter';\nactions.setAllFilters = 'setAllFilters';\n\nvar useFilters = function useFilters(hooks) {\n  hooks.stateReducers.push(reducer$2);\n  hooks.useInstance.push(useInstance$2);\n};\n\nuseFilters.pluginName = 'useFilters';\n\nfunction reducer$2(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return _extends({\n      filters: []\n    }, state);\n  }\n\n  if (action.type === actions.resetFilters) {\n    return _extends({}, state, {\n      filters: instance.initialState.filters || []\n    });\n  }\n\n  if (action.type === actions.setFilter) {\n    var columnId = action.columnId,\n        filterValue = action.filterValue;\n    var allColumns = instance.allColumns,\n        userFilterTypes = instance.filterTypes;\n    var column = allColumns.find(function (d) {\n      return d.id === columnId;\n    });\n\n    if (!column) {\n      throw new Error(\"React-Table: Could not find a column with id: \" + columnId);\n    }\n\n    var filterMethod = getFilterMethod(column.filter, userFilterTypes || {}, filterTypes);\n    var previousfilter = state.filters.find(function (d) {\n      return d.id === columnId;\n    });\n    var newFilter = functionalUpdate(filterValue, previousfilter && previousfilter.value); //\n\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter, column)) {\n      return _extends({}, state, {\n        filters: state.filters.filter(function (d) {\n          return d.id !== columnId;\n        })\n      });\n    }\n\n    if (previousfilter) {\n      return _extends({}, state, {\n        filters: state.filters.map(function (d) {\n          if (d.id === columnId) {\n            return {\n              id: columnId,\n              value: newFilter\n            };\n          }\n\n          return d;\n        })\n      });\n    }\n\n    return _extends({}, state, {\n      filters: [].concat(state.filters, [{\n        id: columnId,\n        value: newFilter\n      }])\n    });\n  }\n\n  if (action.type === actions.setAllFilters) {\n    var filters = action.filters;\n    var _allColumns = instance.allColumns,\n        _userFilterTypes = instance.filterTypes;\n    return _extends({}, state, {\n      // Filter out undefined values\n      filters: functionalUpdate(filters, state.filters).filter(function (filter) {\n        var column = _allColumns.find(function (d) {\n          return d.id === filter.id;\n        });\n\n        var filterMethod = getFilterMethod(column.filter, _userFilterTypes || {}, filterTypes);\n\n        if (shouldAutoRemoveFilter(filterMethod.autoRemove, filter.value, column)) {\n          return false;\n        }\n\n        return true;\n      })\n    });\n  }\n}\n\nfunction useInstance$2(instance) {\n  var data = instance.data,\n      rows = instance.rows,\n      flatRows = instance.flatRows,\n      rowsById = instance.rowsById,\n      allColumns = instance.allColumns,\n      userFilterTypes = instance.filterTypes,\n      manualFilters = instance.manualFilters,\n      _instance$defaultCanF = instance.defaultCanFilter,\n      defaultCanFilter = _instance$defaultCanF === void 0 ? false : _instance$defaultCanF,\n      disableFilters = instance.disableFilters,\n      filters = instance.state.filters,\n      dispatch = instance.dispatch,\n      _instance$autoResetFi = instance.autoResetFilters,\n      autoResetFilters = _instance$autoResetFi === void 0 ? true : _instance$autoResetFi;\n  var setFilter = React.useCallback(function (columnId, filterValue) {\n    dispatch({\n      type: actions.setFilter,\n      columnId: columnId,\n      filterValue: filterValue\n    });\n  }, [dispatch]);\n  var setAllFilters = React.useCallback(function (filters) {\n    dispatch({\n      type: actions.setAllFilters,\n      filters: filters\n    });\n  }, [dispatch]);\n  allColumns.forEach(function (column) {\n    var id = column.id,\n        accessor = column.accessor,\n        columnDefaultCanFilter = column.defaultCanFilter,\n        columnDisableFilters = column.disableFilters; // Determine if a column is filterable\n\n    column.canFilter = accessor ? getFirstDefined(columnDisableFilters === true ? false : undefined, disableFilters === true ? false : undefined, true) : getFirstDefined(columnDefaultCanFilter, defaultCanFilter, false); // Provide the column a way of updating the filter value\n\n    column.setFilter = function (val) {\n      return setFilter(column.id, val);\n    }; // Provide the current filter value to the column for\n    // convenience\n\n\n    var found = filters.find(function (d) {\n      return d.id === id;\n    });\n    column.filterValue = found && found.value;\n  });\n\n  var _React$useMemo = React.useMemo(function () {\n    if (manualFilters || !filters.length) {\n      return [rows, flatRows, rowsById];\n    }\n\n    var filteredFlatRows = [];\n    var filteredRowsById = {}; // Filters top level and nested rows\n\n    var filterRows = function filterRows(rows, depth) {\n      if (depth === void 0) {\n        depth = 0;\n      }\n\n      var filteredRows = rows;\n      filteredRows = filters.reduce(function (filteredSoFar, _ref) {\n        var columnId = _ref.id,\n            filterValue = _ref.value; // Find the filters column\n\n        var column = allColumns.find(function (d) {\n          return d.id === columnId;\n        });\n\n        if (!column) {\n          return filteredSoFar;\n        }\n\n        if (depth === 0) {\n          column.preFilteredRows = filteredSoFar;\n        }\n\n        var filterMethod = getFilterMethod(column.filter, userFilterTypes || {}, filterTypes);\n\n        if (!filterMethod) {\n          console.warn(\"Could not find a valid 'column.filter' for column with the ID: \" + column.id + \".\");\n          return filteredSoFar;\n        } // Pass the rows, id, filterValue and column to the filterMethod\n        // to get the filtered rows back\n\n\n        column.filteredRows = filterMethod(filteredSoFar, [columnId], filterValue);\n        return column.filteredRows;\n      }, rows); // Apply the filter to any subRows\n      // We technically could do this recursively in the above loop,\n      // but that would severely hinder the API for the user, since they\n      // would be required to do that recursion in some scenarios\n\n      filteredRows = filteredRows.map(function (row) {\n        filteredFlatRows.push(row);\n        filteredRowsById[row.id] = row;\n\n        if (!row.subRows) {\n          return row;\n        }\n\n        return _extends({}, row, {\n          subRows: row.subRows && row.subRows.length > 0 ? filterRows(row.subRows, depth + 1) : row.subRows\n        });\n      });\n      return filteredRows;\n    };\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById];\n  }, [manualFilters, filters, rows, flatRows, rowsById, allColumns, userFilterTypes]),\n      filteredRows = _React$useMemo[0],\n      filteredFlatRows = _React$useMemo[1],\n      filteredRowsById = _React$useMemo[2];\n\n  React.useMemo(function () {\n    // Now that each filtered column has it's partially filtered rows,\n    // lets assign the final filtered rows to all of the other columns\n    var nonFilteredColumns = allColumns.filter(function (column) {\n      return !filters.find(function (d) {\n        return d.id === column.id;\n      });\n    }); // This essentially enables faceted filter options to be built easily\n    // using every column's preFilteredRows value\n\n    nonFilteredColumns.forEach(function (column) {\n      column.preFilteredRows = filteredRows;\n      column.filteredRows = filteredRows;\n    });\n  }, [filteredRows, filters, allColumns]);\n  var getAutoResetFilters = useGetLatest(autoResetFilters);\n  useMountedLayoutEffect(function () {\n    if (getAutoResetFilters()) {\n      dispatch({\n        type: actions.resetFilters\n      });\n    }\n  }, [dispatch, manualFilters ? null : data]);\n  Object.assign(instance, {\n    preFilteredRows: rows,\n    preFilteredFlatRows: flatRows,\n    preFilteredRowsById: rowsById,\n    filteredRows: filteredRows,\n    filteredFlatRows: filteredFlatRows,\n    filteredRowsById: filteredRowsById,\n    rows: filteredRows,\n    flatRows: filteredFlatRows,\n    rowsById: filteredRowsById,\n    setFilter: setFilter,\n    setAllFilters: setAllFilters\n  });\n}\n\nactions.resetGlobalFilter = 'resetGlobalFilter';\nactions.setGlobalFilter = 'setGlobalFilter';\n\nvar useGlobalFilter = function useGlobalFilter(hooks) {\n  hooks.stateReducers.push(reducer$3);\n  hooks.useInstance.push(useInstance$3);\n};\n\nuseGlobalFilter.pluginName = 'useGlobalFilter';\n\nfunction reducer$3(state, action, previousState, instance) {\n  if (action.type === actions.resetGlobalFilter) {\n    return _extends({}, state, {\n      globalFilter: instance.initialState.globalFilter || undefined\n    });\n  }\n\n  if (action.type === actions.setGlobalFilter) {\n    var filterValue = action.filterValue;\n    var userFilterTypes = instance.userFilterTypes;\n    var filterMethod = getFilterMethod(instance.globalFilter, userFilterTypes || {}, filterTypes);\n    var newFilter = functionalUpdate(filterValue, state.globalFilter); //\n\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter)) {\n      var globalFilter = state.globalFilter,\n          stateWithoutGlobalFilter = _objectWithoutPropertiesLoose(state, [\"globalFilter\"]);\n\n      return stateWithoutGlobalFilter;\n    }\n\n    return _extends({}, state, {\n      globalFilter: newFilter\n    });\n  }\n}\n\nfunction useInstance$3(instance) {\n  var data = instance.data,\n      rows = instance.rows,\n      flatRows = instance.flatRows,\n      rowsById = instance.rowsById,\n      allColumns = instance.allColumns,\n      userFilterTypes = instance.filterTypes,\n      globalFilter = instance.globalFilter,\n      manualGlobalFilter = instance.manualGlobalFilter,\n      globalFilterValue = instance.state.globalFilter,\n      dispatch = instance.dispatch,\n      _instance$autoResetGl = instance.autoResetGlobalFilter,\n      autoResetGlobalFilter = _instance$autoResetGl === void 0 ? true : _instance$autoResetGl;\n  var setGlobalFilter = React.useCallback(function (filterValue) {\n    dispatch({\n      type: actions.setGlobalFilter,\n      filterValue: filterValue\n    });\n  }, [dispatch]); // TODO: Create a filter cache for incremental high speed multi-filtering\n  // This gets pretty complicated pretty fast, since you have to maintain a\n  // cache for each row group (top-level rows, and each row's recursive subrows)\n  // This would make multi-filtering a lot faster though. Too far?\n\n  var _React$useMemo = React.useMemo(function () {\n    if (manualGlobalFilter || typeof globalFilterValue === 'undefined') {\n      return [rows, flatRows, rowsById];\n    }\n\n    var filteredFlatRows = [];\n    var filteredRowsById = {};\n    var filterMethod = getFilterMethod(globalFilter, userFilterTypes || {}, filterTypes);\n\n    if (!filterMethod) {\n      console.warn(\"Could not find a valid 'globalFilter' option.\");\n      return rows;\n    } // Filters top level and nested rows\n\n\n    var filterRows = function filterRows(filteredRows) {\n      return filterMethod(filteredRows, allColumns.map(function (d) {\n        return d.id;\n      }), globalFilterValue).map(function (row) {\n        filteredFlatRows.push(row);\n        filteredRowsById[row.id] = row;\n        return _extends({}, row, {\n          subRows: row.subRows && row.subRows.length ? filterRows(row.subRows) : row.subRows\n        });\n      });\n    };\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById];\n  }, [manualGlobalFilter, globalFilterValue, globalFilter, userFilterTypes, rows, flatRows, rowsById, allColumns]),\n      globalFilteredRows = _React$useMemo[0],\n      globalFilteredFlatRows = _React$useMemo[1],\n      globalFilteredRowsById = _React$useMemo[2];\n\n  var getAutoResetGlobalFilter = useGetLatest(autoResetGlobalFilter);\n  useMountedLayoutEffect(function () {\n    if (getAutoResetGlobalFilter()) {\n      dispatch({\n        type: actions.resetGlobalFilter\n      });\n    }\n  }, [dispatch, manualGlobalFilter ? null : data]);\n  Object.assign(instance, {\n    preGlobalFilteredRows: rows,\n    preGlobalFilteredFlatRows: flatRows,\n    preGlobalFilteredRowsById: rowsById,\n    globalFilteredRows: globalFilteredRows,\n    globalFilteredFlatRows: globalFilteredFlatRows,\n    globalFilteredRowsById: globalFilteredRowsById,\n    rows: globalFilteredRows,\n    flatRows: globalFilteredFlatRows,\n    rowsById: globalFilteredRowsById,\n    setGlobalFilter: setGlobalFilter\n  });\n}\n\nfunction sum(values, aggregatedValues) {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return aggregatedValues.reduce(function (sum, next) {\n    return sum + (typeof next === 'number' ? next : 0);\n  }, 0);\n}\n\nfunction min(values) {\n  var min = 0;\n  values.forEach(function (value) {\n    if (typeof value === 'number') {\n      min = Math.min(min, value);\n    }\n  });\n  return min;\n}\n\nfunction max(values) {\n  var max = 0;\n  values.forEach(function (value) {\n    if (typeof value === 'number') {\n      max = Math.max(max, value);\n    }\n  });\n  return max;\n}\n\nfunction minMax(values) {\n  var min = 0;\n  var max = 0;\n  values.forEach(function (value) {\n    if (typeof value === 'number') {\n      min = Math.min(min, value);\n      max = Math.max(max, value);\n    }\n  });\n  return min + \"..\" + max;\n}\n\nfunction average(values) {\n  return sum(null, values) / values.length;\n}\n\nfunction median(values) {\n  if (!values.length) {\n    return null;\n  }\n\n  var min = 0;\n  var max = 0;\n  values.forEach(function (value) {\n    if (typeof value === 'number') {\n      min = Math.min(min, value);\n      max = Math.max(max, value);\n    }\n  });\n  return (min + max) / 2;\n}\n\nfunction unique(values) {\n  return [].concat(new Set(values).values());\n}\n\nfunction uniqueCount(values) {\n  return new Set(values).size;\n}\n\nfunction count(values) {\n  return values.length;\n}\n\nvar aggregations =\n/*#__PURE__*/\nObject.freeze({\n  __proto__: null,\n  sum: sum,\n  min: min,\n  max: max,\n  minMax: minMax,\n  average: average,\n  median: median,\n  unique: unique,\n  uniqueCount: uniqueCount,\n  count: count\n});\nvar emptyArray = [];\nvar emptyObject = {}; // Actions\n\nactions.resetGroupBy = 'resetGroupBy';\nactions.toggleGroupBy = 'toggleGroupBy';\n\nvar useGroupBy = function useGroupBy(hooks) {\n  hooks.getGroupByToggleProps = [defaultGetGroupByToggleProps];\n  hooks.stateReducers.push(reducer$4);\n  hooks.visibleColumnsDeps.push(function (deps, _ref) {\n    var instance = _ref.instance;\n    return [].concat(deps, [instance.state.groupBy]);\n  });\n  hooks.visibleColumns.push(visibleColumns);\n  hooks.useInstance.push(useInstance$4);\n  hooks.prepareRow.push(prepareRow$1);\n};\n\nuseGroupBy.pluginName = 'useGroupBy';\n\nvar defaultGetGroupByToggleProps = function defaultGetGroupByToggleProps(props, _ref2) {\n  var header = _ref2.header;\n  return [props, {\n    onClick: header.canGroupBy ? function (e) {\n      e.persist();\n      header.toggleGroupBy();\n    } : undefined,\n    style: {\n      cursor: header.canGroupBy ? 'pointer' : undefined\n    },\n    title: 'Toggle GroupBy'\n  }];\n}; // Reducer\n\n\nfunction reducer$4(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return _extends({\n      groupBy: []\n    }, state);\n  }\n\n  if (action.type === actions.resetGroupBy) {\n    return _extends({}, state, {\n      groupBy: instance.initialState.groupBy || []\n    });\n  }\n\n  if (action.type === actions.toggleGroupBy) {\n    var columnId = action.columnId,\n        setGroupBy = action.value;\n    var resolvedGroupBy = typeof setGroupBy !== 'undefined' ? setGroupBy : !state.groupBy.includes(columnId);\n\n    if (resolvedGroupBy) {\n      return _extends({}, state, {\n        groupBy: [].concat(state.groupBy, [columnId])\n      });\n    }\n\n    return _extends({}, state, {\n      groupBy: state.groupBy.filter(function (d) {\n        return d !== columnId;\n      })\n    });\n  }\n}\n\nfunction visibleColumns(columns, _ref3) {\n  var groupBy = _ref3.instance.state.groupBy; // Sort grouped columns to the start of the column list\n  // before the headers are built\n\n  var groupByColumns = groupBy.map(function (g) {\n    return columns.find(function (col) {\n      return col.id === g;\n    });\n  }).filter(Boolean);\n  var nonGroupByColumns = columns.filter(function (col) {\n    return !groupBy.includes(col.id);\n  });\n  columns = [].concat(groupByColumns, nonGroupByColumns);\n  columns.forEach(function (column) {\n    column.isGrouped = groupBy.includes(column.id);\n    column.groupedIndex = groupBy.indexOf(column.id);\n  });\n  return columns;\n}\n\nvar defaultUserAggregations = {};\n\nfunction useInstance$4(instance) {\n  var data = instance.data,\n      rows = instance.rows,\n      flatRows = instance.flatRows,\n      rowsById = instance.rowsById,\n      allColumns = instance.allColumns,\n      flatHeaders = instance.flatHeaders,\n      _instance$groupByFn = instance.groupByFn,\n      groupByFn = _instance$groupByFn === void 0 ? defaultGroupByFn : _instance$groupByFn,\n      manualGroupBy = instance.manualGroupBy,\n      _instance$aggregation = instance.aggregations,\n      userAggregations = _instance$aggregation === void 0 ? defaultUserAggregations : _instance$aggregation,\n      plugins = instance.plugins,\n      groupBy = instance.state.groupBy,\n      dispatch = instance.dispatch,\n      _instance$autoResetGr = instance.autoResetGroupBy,\n      autoResetGroupBy = _instance$autoResetGr === void 0 ? true : _instance$autoResetGr,\n      disableGroupBy = instance.disableGroupBy,\n      defaultCanGroupBy = instance.defaultCanGroupBy,\n      getHooks = instance.getHooks;\n  ensurePluginOrder(plugins, ['useFilters'], 'useGroupBy');\n  var getInstance = useGetLatest(instance);\n  allColumns.forEach(function (column) {\n    var accessor = column.accessor,\n        defaultColumnGroupBy = column.defaultGroupBy,\n        columnDisableGroupBy = column.disableGroupBy;\n    column.canGroupBy = accessor ? getFirstDefined(column.canGroupBy, columnDisableGroupBy === true ? false : undefined, disableGroupBy === true ? false : undefined, true) : getFirstDefined(column.canGroupBy, defaultColumnGroupBy, defaultCanGroupBy, false);\n\n    if (column.canGroupBy) {\n      column.toggleGroupBy = function () {\n        return instance.toggleGroupBy(column.id);\n      };\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell;\n  });\n  var toggleGroupBy = React.useCallback(function (columnId, value) {\n    dispatch({\n      type: actions.toggleGroupBy,\n      columnId: columnId,\n      value: value\n    });\n  }, [dispatch]);\n  flatHeaders.forEach(function (header) {\n    header.getGroupByToggleProps = makePropGetter(getHooks().getGroupByToggleProps, {\n      instance: getInstance(),\n      header: header\n    });\n  });\n\n  var _React$useMemo = React.useMemo(function () {\n    if (manualGroupBy || !groupBy.length) {\n      return [rows, flatRows, rowsById, emptyArray, emptyObject, flatRows, rowsById];\n    } // Ensure that the list of filtered columns exist\n\n\n    var existingGroupBy = groupBy.filter(function (g) {\n      return allColumns.find(function (col) {\n        return col.id === g;\n      });\n    }); // Find the columns that can or are aggregating\n    // Uses each column to aggregate rows into a single value\n\n    var aggregateRowsToValues = function aggregateRowsToValues(leafRows, groupedRows, depth) {\n      var values = {};\n      allColumns.forEach(function (column) {\n        // Don't aggregate columns that are in the groupBy\n        if (existingGroupBy.includes(column.id)) {\n          values[column.id] = groupedRows[0] ? groupedRows[0].values[column.id] : null;\n          return;\n        } // Get the columnValues to aggregate\n\n\n        var groupedValues = groupedRows.map(function (row) {\n          return row.values[column.id];\n        }); // Get the columnValues to aggregate\n\n        var leafValues = leafRows.map(function (row) {\n          var columnValue = row.values[column.id];\n\n          if (!depth && column.aggregatedValue) {\n            var aggregateValueFn = typeof column.aggregateValue === 'function' ? column.aggregateValue : userAggregations[column.aggregateValue] || aggregations[column.aggregateValue];\n\n            if (!aggregateValueFn) {\n              console.info({\n                column: column\n              });\n              throw new Error(\"React Table: Invalid column.aggregateValue option for column listed above\");\n            }\n\n            columnValue = aggregateValueFn(columnValue, row, column);\n          }\n\n          return columnValue;\n        }); // Aggregate the values\n\n        var aggregateFn = typeof column.aggregate === 'function' ? column.aggregate : userAggregations[column.aggregate] || aggregations[column.aggregate];\n\n        if (aggregateFn) {\n          values[column.id] = aggregateFn(leafValues, groupedValues);\n        } else if (column.aggregate) {\n          console.info({\n            column: column\n          });\n          throw new Error(\"React Table: Invalid column.aggregate option for column listed above\");\n        } else {\n          values[column.id] = null;\n        }\n      });\n      return values;\n    };\n\n    var groupedFlatRows = [];\n    var groupedRowsById = {};\n    var onlyGroupedFlatRows = [];\n    var onlyGroupedRowsById = {};\n    var nonGroupedFlatRows = [];\n    var nonGroupedRowsById = {}; // Recursively group the data\n\n    var groupUpRecursively = function groupUpRecursively(rows, depth, parentId) {\n      if (depth === void 0) {\n        depth = 0;\n      } // This is the last level, just return the rows\n\n\n      if (depth === existingGroupBy.length) {\n        return rows;\n      }\n\n      var columnId = existingGroupBy[depth]; // Group the rows together for this level\n\n      var rowGroupsMap = groupByFn(rows, columnId); // Peform aggregations for each group\n\n      var aggregatedGroupedRows = Object.entries(rowGroupsMap).map(function (_ref4, index) {\n        var groupByVal = _ref4[0],\n            groupedRows = _ref4[1];\n        var id = columnId + \":\" + groupByVal;\n        id = parentId ? parentId + \">\" + id : id; // First, Recurse to group sub rows before aggregation\n\n        var subRows = groupUpRecursively(groupedRows, depth + 1, id); // Flatten the leaf rows of the rows in this group\n\n        var leafRows = depth ? flattenBy(groupedRows, 'leafRows') : groupedRows;\n        var values = aggregateRowsToValues(leafRows, groupedRows, depth);\n        var row = {\n          id: id,\n          isGrouped: true,\n          groupByID: columnId,\n          groupByVal: groupByVal,\n          values: values,\n          subRows: subRows,\n          leafRows: leafRows,\n          depth: depth,\n          index: index\n        };\n        subRows.forEach(function (subRow) {\n          groupedFlatRows.push(subRow);\n          groupedRowsById[subRow.id] = subRow;\n\n          if (subRow.isGrouped) {\n            onlyGroupedFlatRows.push(subRow);\n            onlyGroupedRowsById[subRow.id] = subRow;\n          } else {\n            nonGroupedFlatRows.push(subRow);\n            nonGroupedRowsById[subRow.id] = subRow;\n          }\n        });\n        return row;\n      });\n      return aggregatedGroupedRows;\n    };\n\n    var groupedRows = groupUpRecursively(rows);\n    groupedRows.forEach(function (subRow) {\n      groupedFlatRows.push(subRow);\n      groupedRowsById[subRow.id] = subRow;\n\n      if (subRow.isGrouped) {\n        onlyGroupedFlatRows.push(subRow);\n        onlyGroupedRowsById[subRow.id] = subRow;\n      } else {\n        nonGroupedFlatRows.push(subRow);\n        nonGroupedRowsById[subRow.id] = subRow;\n      }\n    }); // Assign the new data\n\n    return [groupedRows, groupedFlatRows, groupedRowsById, onlyGroupedFlatRows, onlyGroupedRowsById, nonGroupedFlatRows, nonGroupedRowsById];\n  }, [manualGroupBy, groupBy, rows, flatRows, rowsById, allColumns, userAggregations, groupByFn]),\n      groupedRows = _React$useMemo[0],\n      groupedFlatRows = _React$useMemo[1],\n      groupedRowsById = _React$useMemo[2],\n      onlyGroupedFlatRows = _React$useMemo[3],\n      onlyGroupedRowsById = _React$useMemo[4],\n      nonGroupedFlatRows = _React$useMemo[5],\n      nonGroupedRowsById = _React$useMemo[6];\n\n  var getAutoResetGroupBy = useGetLatest(autoResetGroupBy);\n  useMountedLayoutEffect(function () {\n    if (getAutoResetGroupBy()) {\n      dispatch({\n        type: actions.resetGroupBy\n      });\n    }\n  }, [dispatch, manualGroupBy ? null : data]);\n  Object.assign(instance, {\n    preGroupedRows: rows,\n    preGroupedFlatRow: flatRows,\n    preGroupedRowsById: rowsById,\n    groupedRows: groupedRows,\n    groupedFlatRows: groupedFlatRows,\n    groupedRowsById: groupedRowsById,\n    onlyGroupedFlatRows: onlyGroupedFlatRows,\n    onlyGroupedRowsById: onlyGroupedRowsById,\n    nonGroupedFlatRows: nonGroupedFlatRows,\n    nonGroupedRowsById: nonGroupedRowsById,\n    rows: groupedRows,\n    flatRows: groupedFlatRows,\n    rowsById: groupedRowsById,\n    toggleGroupBy: toggleGroupBy\n  });\n}\n\nfunction prepareRow$1(row) {\n  row.allCells.forEach(function (cell) {\n    // Grouped cells are in the groupBy and the pivot cell for the row\n    cell.isGrouped = cell.column.isGrouped && cell.column.id === row.groupByID; // Placeholder cells are any columns in the groupBy that are not grouped\n\n    cell.isPlaceholder = !cell.isGrouped && cell.column.isGrouped; // Aggregated cells are not grouped, not repeated, but still have subRows\n\n    cell.isAggregated = !cell.isGrouped && !cell.isPlaceholder && row.canExpand;\n  });\n}\n\nvar reSplitAlphaNumeric = /([0-9]+)/gm; // Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\n\nvar alphanumeric = function alphanumeric(rowA, rowB, columnId) {\n  var a = getRowValueByColumnID(rowA, columnId);\n  var b = getRowValueByColumnID(rowB, columnId); // Force to strings (or \"\" for unsupported types)\n\n  a = toString(a);\n  b = toString(b); // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n\n  a = a.split(reSplitAlphaNumeric).filter(Boolean);\n  b = b.split(reSplitAlphaNumeric).filter(Boolean); // While\n\n  while (a.length && b.length) {\n    var aa = a.shift();\n    var bb = b.shift();\n    var an = parseInt(aa, 10);\n    var bn = parseInt(bb, 10);\n    var combo = [an, bn].sort(); // Both are string\n\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1;\n      }\n\n      if (bb > aa) {\n        return -1;\n      }\n\n      continue;\n    } // One is a string, one is a number\n\n\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1;\n    } // Both are numbers\n\n\n    if (an > bn) {\n      return 1;\n    }\n\n    if (bn > an) {\n      return -1;\n    }\n  }\n\n  return a.length - b.length;\n};\n\nfunction datetime(rowA, rowB, columnId) {\n  var a = getRowValueByColumnID(rowA, columnId);\n  var b = getRowValueByColumnID(rowB, columnId);\n  a = a.getTime();\n  b = b.getTime();\n  return compareBasic(a, b);\n}\n\nfunction basic(rowA, rowB, columnId) {\n  var a = getRowValueByColumnID(rowA, columnId);\n  var b = getRowValueByColumnID(rowB, columnId);\n  return compareBasic(a, b);\n} // Utils\n\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1;\n}\n\nfunction getRowValueByColumnID(row, columnId) {\n  return row.values[columnId];\n}\n\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return '';\n    }\n\n    return String(a);\n  }\n\n  if (typeof a === 'string') {\n    return a;\n  }\n\n  return '';\n}\n\nvar sortTypes =\n/*#__PURE__*/\nObject.freeze({\n  __proto__: null,\n  alphanumeric: alphanumeric,\n  datetime: datetime,\n  basic: basic\n});\nactions.resetSortBy = 'resetSortBy';\nactions.toggleSortBy = 'toggleSortBy';\nactions.clearSortBy = 'clearSortBy';\ndefaultColumn.sortType = 'alphanumeric';\ndefaultColumn.sortDescFirst = false;\n\nvar useSortBy = function useSortBy(hooks) {\n  hooks.getSortByToggleProps = [defaultGetSortByToggleProps];\n  hooks.stateReducers.push(reducer$5);\n  hooks.useInstance.push(useInstance$5);\n};\n\nuseSortBy.pluginName = 'useSortBy';\n\nvar defaultGetSortByToggleProps = function defaultGetSortByToggleProps(props, _ref) {\n  var instance = _ref.instance,\n      column = _ref.column;\n  var _instance$isMultiSort = instance.isMultiSortEvent,\n      isMultiSortEvent = _instance$isMultiSort === void 0 ? function (e) {\n    return e.shiftKey;\n  } : _instance$isMultiSort;\n  return [props, {\n    onClick: column.canSort ? function (e) {\n      e.persist();\n      column.toggleSortBy(undefined, !instance.disableMultiSort && isMultiSortEvent(e));\n    } : undefined,\n    style: {\n      cursor: column.canSort ? 'pointer' : undefined\n    },\n    title: column.canSort ? 'Toggle SortBy' : undefined\n  }];\n}; // Reducer\n\n\nfunction reducer$5(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return _extends({\n      sortBy: []\n    }, state);\n  }\n\n  if (action.type === actions.resetSortBy) {\n    return _extends({}, state, {\n      sortBy: instance.initialState.sortBy || []\n    });\n  }\n\n  if (action.type === actions.clearSortBy) {\n    var sortBy = state.sortBy;\n    var newSortBy = sortBy.filter(function (d) {\n      return d.id !== action.columnId;\n    });\n    return _extends({}, state, {\n      sortBy: newSortBy\n    });\n  }\n\n  if (action.type === actions.toggleSortBy) {\n    var columnId = action.columnId,\n        desc = action.desc,\n        multi = action.multi;\n    var allColumns = instance.allColumns,\n        disableMultiSort = instance.disableMultiSort,\n        disableSortRemove = instance.disableSortRemove,\n        disableMultiRemove = instance.disableMultiRemove,\n        _instance$maxMultiSor = instance.maxMultiSortColCount,\n        maxMultiSortColCount = _instance$maxMultiSor === void 0 ? Number.MAX_SAFE_INTEGER : _instance$maxMultiSor;\n    var _sortBy = state.sortBy; // Find the column for this columnId\n\n    var column = allColumns.find(function (d) {\n      return d.id === columnId;\n    });\n    var sortDescFirst = column.sortDescFirst; // Find any existing sortBy for this column\n\n    var existingSortBy = _sortBy.find(function (d) {\n      return d.id === columnId;\n    });\n\n    var existingIndex = _sortBy.findIndex(function (d) {\n      return d.id === columnId;\n    });\n\n    var hasDescDefined = typeof desc !== 'undefined' && desc !== null;\n    var _newSortBy = []; // What should we do with this sort action?\n\n    var sortAction;\n\n    if (!disableMultiSort && multi) {\n      if (existingSortBy) {\n        sortAction = 'toggle';\n      } else {\n        sortAction = 'add';\n      }\n    } else {\n      // Normal mode\n      if (existingIndex !== _sortBy.length - 1) {\n        sortAction = 'replace';\n      } else if (existingSortBy) {\n        sortAction = 'toggle';\n      } else {\n        sortAction = 'replace';\n      }\n    } // Handle toggle states that will remove the sortBy\n\n\n    if (sortAction === 'toggle' && // Must be toggling\n    !disableSortRemove && // If disableSortRemove, disable in general\n    !hasDescDefined && ( // Must not be setting desc\n    multi ? !disableMultiRemove : true) && ( // If multi, don't allow if disableMultiRemove\n    existingSortBy && // Finally, detect if it should indeed be removed\n    existingSortBy.desc && !sortDescFirst || !existingSortBy.desc && sortDescFirst)) {\n      sortAction = 'remove';\n    }\n\n    if (sortAction === 'replace') {\n      _newSortBy = [{\n        id: columnId,\n        desc: hasDescDefined ? desc : sortDescFirst\n      }];\n    } else if (sortAction === 'add') {\n      _newSortBy = [].concat(_sortBy, [{\n        id: columnId,\n        desc: hasDescDefined ? desc : sortDescFirst\n      }]); // Take latest n columns\n\n      _newSortBy.splice(0, _newSortBy.length - maxMultiSortColCount);\n    } else if (sortAction === 'toggle') {\n      // This flips (or sets) the\n      _newSortBy = _sortBy.map(function (d) {\n        if (d.id === columnId) {\n          return _extends({}, d, {\n            desc: hasDescDefined ? desc : !existingSortBy.desc\n          });\n        }\n\n        return d;\n      });\n    } else if (sortAction === 'remove') {\n      _newSortBy = _sortBy.filter(function (d) {\n        return d.id !== columnId;\n      });\n    }\n\n    return _extends({}, state, {\n      sortBy: _newSortBy\n    });\n  }\n}\n\nfunction useInstance$5(instance) {\n  var data = instance.data,\n      rows = instance.rows,\n      flatRows = instance.flatRows,\n      allColumns = instance.allColumns,\n      _instance$orderByFn = instance.orderByFn,\n      orderByFn = _instance$orderByFn === void 0 ? defaultOrderByFn : _instance$orderByFn,\n      userSortTypes = instance.sortTypes,\n      manualSortBy = instance.manualSortBy,\n      defaultCanSort = instance.defaultCanSort,\n      disableSortBy = instance.disableSortBy,\n      flatHeaders = instance.flatHeaders,\n      sortBy = instance.state.sortBy,\n      dispatch = instance.dispatch,\n      plugins = instance.plugins,\n      getHooks = instance.getHooks,\n      _instance$autoResetSo = instance.autoResetSortBy,\n      autoResetSortBy = _instance$autoResetSo === void 0 ? true : _instance$autoResetSo;\n  ensurePluginOrder(plugins, ['useFilters', 'useGlobalFilter', 'useGroupBy', 'usePivotColumns'], 'useSortBy'); // Updates sorting based on a columnId, desc flag and multi flag\n\n  var toggleSortBy = React.useCallback(function (columnId, desc, multi) {\n    dispatch({\n      type: actions.toggleSortBy,\n      columnId: columnId,\n      desc: desc,\n      multi: multi\n    });\n  }, [dispatch]); // use reference to avoid memory leak in #1608\n\n  var getInstance = useGetLatest(instance); // Add the getSortByToggleProps method to columns and headers\n\n  flatHeaders.forEach(function (column) {\n    var accessor = column.accessor,\n        defaultColumnCanSort = column.canSort,\n        columnDisableSortBy = column.disableSortBy,\n        id = column.id;\n    var canSort = accessor ? getFirstDefined(columnDisableSortBy === true ? false : undefined, disableSortBy === true ? false : undefined, true) : getFirstDefined(defaultCanSort, defaultColumnCanSort, false);\n    column.canSort = canSort;\n\n    if (column.canSort) {\n      column.toggleSortBy = function (desc, multi) {\n        return toggleSortBy(column.id, desc, multi);\n      };\n\n      column.clearSortBy = function () {\n        dispatch({\n          type: actions.clearSortBy,\n          columnId: column.id\n        });\n      };\n    }\n\n    column.getSortByToggleProps = makePropGetter(getHooks().getSortByToggleProps, {\n      instance: getInstance(),\n      column: column\n    });\n    var columnSort = sortBy.find(function (d) {\n      return d.id === id;\n    });\n    column.isSorted = !!columnSort;\n    column.sortedIndex = sortBy.findIndex(function (d) {\n      return d.id === id;\n    });\n    column.isSortedDesc = column.isSorted ? columnSort.desc : undefined;\n  });\n\n  var _React$useMemo = React.useMemo(function () {\n    if (manualSortBy || !sortBy.length) {\n      return [rows, flatRows];\n    }\n\n    var sortedFlatRows = []; // Filter out sortBys that correspond to non existing columns\n\n    var availableSortBy = sortBy.filter(function (sort) {\n      return allColumns.find(function (col) {\n        return col.id === sort.id;\n      });\n    });\n\n    var sortData = function sortData(rows) {\n      // Use the orderByFn to compose multiple sortBy's together.\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      var sortedData = orderByFn(rows, availableSortBy.map(function (sort) {\n        // Support custom sorting methods for each column\n        var column = allColumns.find(function (d) {\n          return d.id === sort.id;\n        });\n\n        if (!column) {\n          throw new Error(\"React-Table: Could not find a column with id: \" + sort.id + \" while sorting\");\n        }\n\n        var sortType = column.sortType; // Look up sortBy functions in this order:\n        // column function\n        // column string lookup on user sortType\n        // column string lookup on built-in sortType\n        // default function\n        // default string lookup on user sortType\n        // default string lookup on built-in sortType\n\n        var sortMethod = isFunction(sortType) || (userSortTypes || {})[sortType] || sortTypes[sortType];\n\n        if (!sortMethod) {\n          throw new Error(\"React-Table: Could not find a valid sortType of '\" + sortType + \"' for column '\" + sort.id + \"'.\");\n        } // Return the correct sortFn.\n        // This function should always return in ascending order\n\n\n        return function (a, b) {\n          return sortMethod(a, b, sort.id, sort.desc);\n        };\n      }), // Map the directions\n      availableSortBy.map(function (sort) {\n        // Detect and use the sortInverted option\n        var column = allColumns.find(function (d) {\n          return d.id === sort.id;\n        });\n\n        if (column && column.sortInverted) {\n          return sort.desc;\n        }\n\n        return !sort.desc;\n      })); // If there are sub-rows, sort them\n\n      sortedData.forEach(function (row) {\n        sortedFlatRows.push(row);\n\n        if (!row.subRows || row.subRows.length <= 1) {\n          return;\n        }\n\n        row.subRows = sortData(row.subRows);\n      });\n      return sortedData;\n    };\n\n    return [sortData(rows), sortedFlatRows];\n  }, [manualSortBy, sortBy, rows, flatRows, allColumns, orderByFn, userSortTypes]),\n      sortedRows = _React$useMemo[0],\n      sortedFlatRows = _React$useMemo[1];\n\n  var getAutoResetSortBy = useGetLatest(autoResetSortBy);\n  useMountedLayoutEffect(function () {\n    if (getAutoResetSortBy()) {\n      dispatch({\n        type: actions.resetSortBy\n      });\n    }\n  }, [manualSortBy ? null : data]);\n  Object.assign(instance, {\n    preSortedRows: rows,\n    preSortedFlatRows: flatRows,\n    sortedRows: sortedRows,\n    sortedFlatRows: sortedFlatRows,\n    rows: sortedRows,\n    flatRows: sortedFlatRows,\n    toggleSortBy: toggleSortBy\n  });\n}\n\nvar pluginName = 'usePagination'; // Actions\n\nactions.resetPage = 'resetPage';\nactions.gotoPage = 'gotoPage';\nactions.setPageSize = 'setPageSize';\n\nvar usePagination = function usePagination(hooks) {\n  hooks.stateReducers.push(reducer$6);\n  hooks.useInstance.push(useInstance$6);\n};\n\nusePagination.pluginName = pluginName;\n\nfunction reducer$6(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return _extends({\n      pageSize: 10,\n      pageIndex: 0\n    }, state);\n  }\n\n  if (action.type === actions.resetPage) {\n    return _extends({}, state, {\n      pageIndex: instance.initialState.pageIndex || 0\n    });\n  }\n\n  if (action.type === actions.gotoPage) {\n    var pageCount = instance.pageCount;\n    var newPageIndex = functionalUpdate(action.pageIndex, state.pageIndex);\n\n    if (newPageIndex < 0 || newPageIndex > pageCount - 1) {\n      return state;\n    }\n\n    return _extends({}, state, {\n      pageIndex: newPageIndex\n    });\n  }\n\n  if (action.type === actions.setPageSize) {\n    var pageSize = action.pageSize;\n    var topRowIndex = state.pageSize * state.pageIndex;\n    var pageIndex = Math.floor(topRowIndex / pageSize);\n    return _extends({}, state, {\n      pageIndex: pageIndex,\n      pageSize: pageSize\n    });\n  }\n}\n\nfunction useInstance$6(instance) {\n  var rows = instance.rows,\n      _instance$autoResetPa = instance.autoResetPage,\n      autoResetPage = _instance$autoResetPa === void 0 ? true : _instance$autoResetPa,\n      _instance$manualExpan = instance.manualExpandedKey,\n      manualExpandedKey = _instance$manualExpan === void 0 ? 'expanded' : _instance$manualExpan,\n      plugins = instance.plugins,\n      userPageCount = instance.pageCount,\n      _instance$paginateExp = instance.paginateExpandedRows,\n      paginateExpandedRows = _instance$paginateExp === void 0 ? true : _instance$paginateExp,\n      _instance$expandSubRo = instance.expandSubRows,\n      expandSubRows = _instance$expandSubRo === void 0 ? true : _instance$expandSubRo,\n      _instance$state = instance.state,\n      pageSize = _instance$state.pageSize,\n      pageIndex = _instance$state.pageIndex,\n      expanded = _instance$state.expanded,\n      globalFilter = _instance$state.globalFilter,\n      filters = _instance$state.filters,\n      groupBy = _instance$state.groupBy,\n      sortBy = _instance$state.sortBy,\n      dispatch = instance.dispatch,\n      data = instance.data,\n      manualPagination = instance.manualPagination,\n      manualGlobalFilter = instance.manualGlobalFilter,\n      manualFilters = instance.manualFilters,\n      manualGroupBy = instance.manualGroupBy,\n      manualSortBy = instance.manualSortBy;\n  ensurePluginOrder(plugins, ['useGlobalFilter', 'useFilters', 'useGroupBy', 'useSortBy', 'useExpanded'], 'usePagination');\n  var getAutoResetPage = useGetLatest(autoResetPage);\n  useMountedLayoutEffect(function () {\n    if (getAutoResetPage()) {\n      dispatch({\n        type: actions.resetPage\n      });\n    }\n  }, [dispatch, manualPagination ? null : data, manualGlobalFilter ? null : globalFilter, manualFilters ? null : filters, manualGroupBy ? null : groupBy, manualSortBy ? null : sortBy]);\n  var pageCount = manualPagination ? userPageCount : Math.ceil(rows.length / pageSize);\n  var pageOptions = React.useMemo(function () {\n    return pageCount > 0 ? [].concat(new Array(pageCount)).map(function (d, i) {\n      return i;\n    }) : [];\n  }, [pageCount]);\n  var page = React.useMemo(function () {\n    var page;\n\n    if (manualPagination) {\n      page = rows;\n    } else {\n      var pageStart = pageSize * pageIndex;\n      var pageEnd = pageStart + pageSize;\n      page = rows.slice(pageStart, pageEnd);\n    }\n\n    if (paginateExpandedRows) {\n      return page;\n    }\n\n    return expandRows(page, {\n      manualExpandedKey: manualExpandedKey,\n      expanded: expanded,\n      expandSubRows: expandSubRows\n    });\n  }, [expandSubRows, expanded, manualExpandedKey, manualPagination, pageIndex, pageSize, paginateExpandedRows, rows]);\n  var canPreviousPage = pageIndex > 0;\n  var canNextPage = pageCount === -1 || pageIndex < pageCount - 1;\n  var gotoPage = React.useCallback(function (pageIndex) {\n    dispatch({\n      type: actions.gotoPage,\n      pageIndex: pageIndex\n    });\n  }, [dispatch]);\n  var previousPage = React.useCallback(function () {\n    return gotoPage(function (old) {\n      return old - 1;\n    });\n  }, [gotoPage]);\n  var nextPage = React.useCallback(function () {\n    return gotoPage(function (old) {\n      return old + 1;\n    });\n  }, [gotoPage]);\n  var setPageSize = React.useCallback(function (pageSize) {\n    dispatch({\n      type: actions.setPageSize,\n      pageSize: pageSize\n    });\n  }, [dispatch]);\n  Object.assign(instance, {\n    pageOptions: pageOptions,\n    pageCount: pageCount,\n    page: page,\n    canPreviousPage: canPreviousPage,\n    canNextPage: canNextPage,\n    gotoPage: gotoPage,\n    previousPage: previousPage,\n    nextPage: nextPage,\n    setPageSize: setPageSize\n  });\n}\n\nactions.resetPivot = 'resetPivot';\nactions.togglePivot = 'togglePivot';\n\nvar _UNSTABLE_usePivotColumns = function _UNSTABLE_usePivotColumns(hooks) {\n  hooks.getPivotToggleProps = [defaultGetPivotToggleProps];\n  hooks.stateReducers.push(reducer$7);\n  hooks.useInstanceAfterData.push(useInstanceAfterData);\n  hooks.allColumns.push(allColumns);\n  hooks.accessValue.push(accessValue);\n  hooks.materializedColumns.push(materializedColumns);\n  hooks.materializedColumnsDeps.push(materializedColumnsDeps);\n  hooks.visibleColumns.push(visibleColumns$1);\n  hooks.visibleColumnsDeps.push(visibleColumnsDeps);\n  hooks.useInstance.push(useInstance$7);\n  hooks.prepareRow.push(prepareRow$2);\n};\n\n_UNSTABLE_usePivotColumns.pluginName = 'usePivotColumns';\nvar defaultPivotColumns = [];\n\nvar defaultGetPivotToggleProps = function defaultGetPivotToggleProps(props, _ref) {\n  var header = _ref.header;\n  return [props, {\n    onClick: header.canPivot ? function (e) {\n      e.persist();\n      header.togglePivot();\n    } : undefined,\n    style: {\n      cursor: header.canPivot ? 'pointer' : undefined\n    },\n    title: 'Toggle Pivot'\n  }];\n}; // Reducer\n\n\nfunction reducer$7(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return _extends({\n      pivotColumns: defaultPivotColumns\n    }, state);\n  }\n\n  if (action.type === actions.resetPivot) {\n    return _extends({}, state, {\n      pivotColumns: instance.initialState.pivotColumns || defaultPivotColumns\n    });\n  }\n\n  if (action.type === actions.togglePivot) {\n    var columnId = action.columnId,\n        setPivot = action.value;\n    var resolvedPivot = typeof setPivot !== 'undefined' ? setPivot : !state.pivotColumns.includes(columnId);\n\n    if (resolvedPivot) {\n      return _extends({}, state, {\n        pivotColumns: [].concat(state.pivotColumns, [columnId])\n      });\n    }\n\n    return _extends({}, state, {\n      pivotColumns: state.pivotColumns.filter(function (d) {\n        return d !== columnId;\n      })\n    });\n  }\n}\n\nfunction useInstanceAfterData(instance) {\n  instance.allColumns.forEach(function (column) {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id);\n  });\n}\n\nfunction allColumns(columns, _ref2) {\n  var instance = _ref2.instance;\n  columns.forEach(function (column) {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id);\n    column.uniqueValues = new Set();\n  });\n  return columns;\n}\n\nfunction accessValue(value, _ref3) {\n  var column = _ref3.column;\n\n  if (column.uniqueValues && typeof value !== 'undefined') {\n    column.uniqueValues.add(value);\n  }\n\n  return value;\n}\n\nfunction materializedColumns(materialized, _ref4) {\n  var instance = _ref4.instance;\n  var allColumns = instance.allColumns,\n      state = instance.state;\n\n  if (!state.pivotColumns.length || !state.groupBy || !state.groupBy.length) {\n    return materialized;\n  }\n\n  var pivotColumns = state.pivotColumns.map(function (id) {\n    return allColumns.find(function (d) {\n      return d.id === id;\n    });\n  }).filter(Boolean);\n  var sourceColumns = allColumns.filter(function (d) {\n    return !d.isPivotSource && !state.groupBy.includes(d.id) && !state.pivotColumns.includes(d.id);\n  });\n\n  var buildPivotColumns = function buildPivotColumns(depth, parent, pivotFilters) {\n    if (depth === void 0) {\n      depth = 0;\n    }\n\n    if (pivotFilters === void 0) {\n      pivotFilters = [];\n    }\n\n    var pivotColumn = pivotColumns[depth];\n\n    if (!pivotColumn) {\n      return sourceColumns.map(function (sourceColumn) {\n        // TODO: We could offer support here for renesting pivoted\n        // columns inside copies of their header groups. For now,\n        // that seems like it would be (1) overkill on nesting, considering\n        // you already get nesting for every pivot level and (2)\n        // really hard. :)\n        return _extends({}, sourceColumn, {\n          canPivot: false,\n          isPivoted: true,\n          parent: parent,\n          depth: depth,\n          id: \"\" + (parent ? parent.id + \".\" + sourceColumn.id : sourceColumn.id),\n          accessor: function accessor(originalRow, i, row) {\n            if (pivotFilters.every(function (filter) {\n              return filter(row);\n            })) {\n              return row.values[sourceColumn.id];\n            }\n          }\n        });\n      });\n    }\n\n    var uniqueValues = Array.from(pivotColumn.uniqueValues).sort();\n    return uniqueValues.map(function (uniqueValue) {\n      var columnGroup = _extends({}, pivotColumn, {\n        Header: pivotColumn.PivotHeader || typeof pivotColumn.header === 'string' ? pivotColumn.Header + \": \" + uniqueValue : uniqueValue,\n        isPivotGroup: true,\n        parent: parent,\n        depth: depth,\n        id: parent ? parent.id + \".\" + pivotColumn.id + \".\" + uniqueValue : pivotColumn.id + \".\" + uniqueValue,\n        pivotValue: uniqueValue\n      });\n\n      columnGroup.columns = buildPivotColumns(depth + 1, columnGroup, [].concat(pivotFilters, [function (row) {\n        return row.values[pivotColumn.id] === uniqueValue;\n      }]));\n      return columnGroup;\n    });\n  };\n\n  var newMaterialized = flattenColumns(buildPivotColumns());\n  return [].concat(materialized, newMaterialized);\n}\n\nfunction materializedColumnsDeps(deps, _ref5) {\n  var _ref5$instance$state = _ref5.instance.state,\n      pivotColumns = _ref5$instance$state.pivotColumns,\n      groupBy = _ref5$instance$state.groupBy;\n  return [].concat(deps, [pivotColumns, groupBy]);\n}\n\nfunction visibleColumns$1(visibleColumns, _ref6) {\n  var state = _ref6.instance.state;\n  visibleColumns = visibleColumns.filter(function (d) {\n    return !d.isPivotSource;\n  });\n\n  if (state.pivotColumns.length && state.groupBy && state.groupBy.length) {\n    visibleColumns = visibleColumns.filter(function (column) {\n      return column.isGrouped || column.isPivoted;\n    });\n  }\n\n  return visibleColumns;\n}\n\nfunction visibleColumnsDeps(deps, _ref7) {\n  var instance = _ref7.instance;\n  return [].concat(deps, [instance.state.pivotColumns, instance.state.groupBy]);\n}\n\nfunction useInstance$7(instance) {\n  var columns = instance.columns,\n      allColumns = instance.allColumns,\n      flatHeaders = instance.flatHeaders,\n      getHooks = instance.getHooks,\n      plugins = instance.plugins,\n      dispatch = instance.dispatch,\n      _instance$autoResetPi = instance.autoResetPivot,\n      autoResetPivot = _instance$autoResetPi === void 0 ? true : _instance$autoResetPi,\n      manaulPivot = instance.manaulPivot,\n      disablePivot = instance.disablePivot,\n      defaultCanPivot = instance.defaultCanPivot;\n  ensurePluginOrder(plugins, ['useGroupBy'], 'usePivotColumns');\n  var getInstance = useGetLatest(instance);\n  allColumns.forEach(function (column) {\n    var accessor = column.accessor,\n        defaultColumnPivot = column.defaultPivot,\n        columnDisablePivot = column.disablePivot;\n    column.canPivot = accessor ? getFirstDefined(column.canPivot, columnDisablePivot === true ? false : undefined, disablePivot === true ? false : undefined, true) : getFirstDefined(column.canPivot, defaultColumnPivot, defaultCanPivot, false);\n\n    if (column.canPivot) {\n      column.togglePivot = function () {\n        return instance.togglePivot(column.id);\n      };\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell;\n  });\n\n  var togglePivot = function togglePivot(columnId, value) {\n    dispatch({\n      type: actions.togglePivot,\n      columnId: columnId,\n      value: value\n    });\n  };\n\n  flatHeaders.forEach(function (header) {\n    header.getPivotToggleProps = makePropGetter(getHooks().getPivotToggleProps, {\n      instance: getInstance(),\n      header: header\n    });\n  });\n  var getAutoResetPivot = useGetLatest(autoResetPivot);\n  useMountedLayoutEffect(function () {\n    if (getAutoResetPivot()) {\n      dispatch({\n        type: actions.resetPivot\n      });\n    }\n  }, [dispatch, manaulPivot ? null : columns]);\n  Object.assign(instance, {\n    togglePivot: togglePivot\n  });\n}\n\nfunction prepareRow$2(row) {\n  row.allCells.forEach(function (cell) {\n    // Grouped cells are in the pivotColumns and the pivot cell for the row\n    cell.isPivoted = cell.column.isPivoted;\n  });\n}\n\nvar pluginName$1 = 'useRowSelect'; // Actions\n\nactions.resetSelectedRows = 'resetSelectedRows';\nactions.toggleAllRowsSelected = 'toggleAllRowsSelected';\nactions.toggleRowSelected = 'toggleRowSelected';\n\nvar useRowSelect = function useRowSelect(hooks) {\n  hooks.getToggleRowSelectedProps = [defaultGetToggleRowSelectedProps];\n  hooks.getToggleAllRowsSelectedProps = [defaultGetToggleAllRowsSelectedProps];\n  hooks.stateReducers.push(reducer$8);\n  hooks.useInstance.push(useInstance$8);\n  hooks.prepareRow.push(prepareRow$3);\n};\n\nuseRowSelect.pluginName = pluginName$1;\n\nvar defaultGetToggleRowSelectedProps = function defaultGetToggleRowSelectedProps(props, _ref) {\n  var instance = _ref.instance,\n      row = _ref.row;\n  var _instance$manualRowSe = instance.manualRowSelectedKey,\n      manualRowSelectedKey = _instance$manualRowSe === void 0 ? 'isSelected' : _instance$manualRowSe;\n  var checked = false;\n\n  if (row.original && row.original[manualRowSelectedKey]) {\n    checked = true;\n  } else {\n    checked = row.isSelected;\n  }\n\n  return [props, {\n    onChange: function onChange(e) {\n      row.toggleRowSelected(e.target.checked);\n    },\n    style: {\n      cursor: 'pointer'\n    },\n    checked: checked,\n    title: 'Toggle Row Selected',\n    indeterminate: row.isSomeSelected\n  }];\n};\n\nvar defaultGetToggleAllRowsSelectedProps = function defaultGetToggleAllRowsSelectedProps(props, _ref2) {\n  var instance = _ref2.instance;\n  return [props, {\n    onChange: function onChange(e) {\n      instance.toggleAllRowsSelected(e.target.checked);\n    },\n    style: {\n      cursor: 'pointer'\n    },\n    checked: instance.isAllRowsSelected,\n    title: 'Toggle All Rows Selected',\n    indeterminate: Boolean(!instance.isAllRowsSelected && Object.keys(instance.state.selectedRowIds).length)\n  }];\n};\n\nfunction reducer$8(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return _extends({\n      selectedRowIds: {}\n    }, state);\n  }\n\n  if (action.type === actions.resetSelectedRows) {\n    return _extends({}, state, {\n      selectedRowIds: instance.initialState.selectedRowIds || {}\n    });\n  }\n\n  if (action.type === actions.toggleAllRowsSelected) {\n    var setSelected = action.value;\n    var isAllRowsSelected = instance.isAllRowsSelected,\n        rowsById = instance.rowsById,\n        _instance$nonGroupedR = instance.nonGroupedRowsById,\n        nonGroupedRowsById = _instance$nonGroupedR === void 0 ? rowsById : _instance$nonGroupedR;\n    var selectAll = typeof setSelected !== 'undefined' ? setSelected : !isAllRowsSelected;\n\n    if (selectAll) {\n      var selectedRowIds = {};\n      Object.keys(nonGroupedRowsById).forEach(function (rowId) {\n        selectedRowIds[rowId] = true;\n      });\n      return _extends({}, state, {\n        selectedRowIds: selectedRowIds\n      });\n    }\n\n    return _extends({}, state, {\n      selectedRowIds: {}\n    });\n  }\n\n  if (action.type === actions.toggleRowSelected) {\n    var id = action.id,\n        _setSelected = action.value;\n    var _rowsById = instance.rowsById,\n        _instance$selectSubRo = instance.selectSubRows,\n        selectSubRows = _instance$selectSubRo === void 0 ? true : _instance$selectSubRo; // Join the ids of deep rows\n    // to make a key, then manage all of the keys\n    // in a flat object\n\n    var row = _rowsById[id];\n    var isSelected = row.isSelected;\n    var shouldExist = typeof _setSelected !== 'undefined' ? _setSelected : !isSelected;\n\n    if (isSelected === shouldExist) {\n      return state;\n    }\n\n    var newSelectedRowIds = _extends({}, state.selectedRowIds);\n\n    var handleRowById = function handleRowById(id) {\n      var row = _rowsById[id];\n\n      if (!row.isGrouped) {\n        if (!isSelected && shouldExist) {\n          newSelectedRowIds[id] = true;\n        } else if (isSelected && !shouldExist) {\n          delete newSelectedRowIds[id];\n        }\n      }\n\n      if (selectSubRows && row.subRows) {\n        return row.subRows.forEach(function (row) {\n          return handleRowById(row.id);\n        });\n      }\n    };\n\n    handleRowById(id);\n    return _extends({}, state, {\n      selectedRowIds: newSelectedRowIds\n    });\n  }\n}\n\nfunction useInstance$8(instance) {\n  var data = instance.data,\n      rows = instance.rows,\n      getHooks = instance.getHooks,\n      plugins = instance.plugins,\n      rowsById = instance.rowsById,\n      _instance$nonGroupedR2 = instance.nonGroupedRowsById,\n      nonGroupedRowsById = _instance$nonGroupedR2 === void 0 ? rowsById : _instance$nonGroupedR2,\n      _instance$autoResetSe = instance.autoResetSelectedRows,\n      autoResetSelectedRows = _instance$autoResetSe === void 0 ? true : _instance$autoResetSe,\n      selectedRowIds = instance.state.selectedRowIds,\n      _instance$selectSubRo2 = instance.selectSubRows,\n      selectSubRows = _instance$selectSubRo2 === void 0 ? true : _instance$selectSubRo2,\n      dispatch = instance.dispatch;\n  ensurePluginOrder(plugins, ['useFilters', 'useGroupBy', 'useSortBy'], 'useRowSelect');\n  var selectedFlatRows = React.useMemo(function () {\n    var selectedFlatRows = [];\n    rows.forEach(function (row) {\n      var isSelected = selectSubRows ? getRowIsSelected(row, selectedRowIds) : !!selectedRowIds[row.id];\n      row.isSelected = !!isSelected;\n      row.isSomeSelected = isSelected === null;\n\n      if (isSelected) {\n        selectedFlatRows.push(row);\n      }\n    });\n    return selectedFlatRows;\n  }, [rows, selectSubRows, selectedRowIds]);\n  var isAllRowsSelected = Boolean(Object.keys(nonGroupedRowsById).length && Object.keys(selectedRowIds).length);\n\n  if (isAllRowsSelected) {\n    if (Object.keys(nonGroupedRowsById).some(function (id) {\n      return !selectedRowIds[id];\n    })) {\n      isAllRowsSelected = false;\n    }\n  }\n\n  var getAutoResetSelectedRows = useGetLatest(autoResetSelectedRows);\n  useMountedLayoutEffect(function () {\n    if (getAutoResetSelectedRows()) {\n      dispatch({\n        type: actions.resetSelectedRows\n      });\n    }\n  }, [dispatch, data]);\n  var toggleAllRowsSelected = React.useCallback(function (value) {\n    return dispatch({\n      type: actions.toggleAllRowsSelected,\n      value: value\n    });\n  }, [dispatch]);\n  var toggleRowSelected = React.useCallback(function (id, value) {\n    return dispatch({\n      type: actions.toggleRowSelected,\n      id: id,\n      value: value\n    });\n  }, [dispatch]);\n  var getInstance = useGetLatest(instance);\n  var getToggleAllRowsSelectedProps = makePropGetter(getHooks().getToggleAllRowsSelectedProps, {\n    instance: getInstance()\n  });\n  Object.assign(instance, {\n    selectedFlatRows: selectedFlatRows,\n    isAllRowsSelected: isAllRowsSelected,\n    toggleRowSelected: toggleRowSelected,\n    toggleAllRowsSelected: toggleAllRowsSelected,\n    getToggleAllRowsSelectedProps: getToggleAllRowsSelectedProps\n  });\n}\n\nfunction prepareRow$3(row, _ref3) {\n  var instance = _ref3.instance;\n\n  row.toggleRowSelected = function (set) {\n    return instance.toggleRowSelected(row.id, set);\n  };\n\n  row.getToggleRowSelectedProps = makePropGetter(instance.getHooks().getToggleRowSelectedProps, {\n    instance: instance,\n    row: row\n  });\n}\n\nfunction getRowIsSelected(row, selectedRowIds) {\n  if (selectedRowIds[row.id]) {\n    return true;\n  }\n\n  if (row.subRows && row.subRows.length) {\n    var allChildrenSelected = true;\n    var someSelected = false;\n    row.subRows.forEach(function (subRow) {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return;\n      }\n\n      if (getRowIsSelected(subRow, selectedRowIds)) {\n        someSelected = true;\n      } else {\n        allChildrenSelected = false;\n      }\n    });\n    return allChildrenSelected ? true : someSelected ? null : false;\n  }\n\n  return false;\n}\n\nvar defaultInitialRowStateAccessor = function defaultInitialRowStateAccessor(originalRow) {\n  return {};\n};\n\nvar defaultInitialCellStateAccessor = function defaultInitialCellStateAccessor(originalRow) {\n  return {};\n}; // Actions\n\n\nactions.setRowState = 'setRowState';\nactions.setCellState = 'setCellState';\nactions.resetRowState = 'resetRowState';\n\nvar useRowState = function useRowState(hooks) {\n  hooks.stateReducers.push(reducer$9);\n  hooks.useInstance.push(useInstance$9);\n  hooks.prepareRow.push(prepareRow$4);\n};\n\nuseRowState.pluginName = 'useRowState';\n\nfunction reducer$9(state, action, previousState, instance) {\n  var _instance$initialRowS = instance.initialRowStateAccessor,\n      initialRowStateAccessor = _instance$initialRowS === void 0 ? defaultInitialRowStateAccessor : _instance$initialRowS,\n      _instance$initialCell = instance.initialCellStateAccessor,\n      initialCellStateAccessor = _instance$initialCell === void 0 ? defaultInitialCellStateAccessor : _instance$initialCell,\n      rowsById = instance.rowsById;\n\n  if (action.type === actions.init) {\n    return _extends({\n      rowState: {}\n    }, state);\n  }\n\n  if (action.type === actions.resetRowState) {\n    return _extends({}, state, {\n      rowState: instance.initialState.rowState || {}\n    });\n  }\n\n  if (action.type === actions.setRowState) {\n    var _extends2;\n\n    var rowId = action.rowId,\n        value = action.value;\n    var oldRowState = typeof state.rowState[rowId] !== 'undefined' ? state.rowState[rowId] : initialRowStateAccessor(rowsById[rowId].original);\n    return _extends({}, state, {\n      rowState: _extends({}, state.rowState, (_extends2 = {}, _extends2[rowId] = functionalUpdate(value, oldRowState), _extends2))\n    });\n  }\n\n  if (action.type === actions.setCellState) {\n    var _oldRowState$cellStat, _extends3, _extends4;\n\n    var _rowId = action.rowId,\n        columnId = action.columnId,\n        _value = action.value;\n\n    var _oldRowState = typeof state.rowState[_rowId] !== 'undefined' ? state.rowState[_rowId] : initialRowStateAccessor(rowsById[_rowId].original);\n\n    var oldCellState = typeof (_oldRowState == null ? void 0 : (_oldRowState$cellStat = _oldRowState.cellState) == null ? void 0 : _oldRowState$cellStat[columnId]) !== 'undefined' ? _oldRowState.cellState[columnId] : initialCellStateAccessor(rowsById[_rowId].original);\n    return _extends({}, state, {\n      rowState: _extends({}, state.rowState, (_extends4 = {}, _extends4[_rowId] = _extends({}, _oldRowState, {\n        cellState: _extends({}, _oldRowState.cellState || {}, (_extends3 = {}, _extends3[columnId] = functionalUpdate(_value, oldCellState), _extends3))\n      }), _extends4))\n    });\n  }\n}\n\nfunction useInstance$9(instance) {\n  var _instance$autoResetRo = instance.autoResetRowState,\n      autoResetRowState = _instance$autoResetRo === void 0 ? true : _instance$autoResetRo,\n      data = instance.data,\n      dispatch = instance.dispatch;\n  var setRowState = React.useCallback(function (rowId, value) {\n    return dispatch({\n      type: actions.setRowState,\n      rowId: rowId,\n      value: value\n    });\n  }, [dispatch]);\n  var setCellState = React.useCallback(function (rowId, columnId, value) {\n    return dispatch({\n      type: actions.setCellState,\n      rowId: rowId,\n      columnId: columnId,\n      value: value\n    });\n  }, [dispatch]);\n  var getAutoResetRowState = useGetLatest(autoResetRowState);\n  useMountedLayoutEffect(function () {\n    if (getAutoResetRowState()) {\n      dispatch({\n        type: actions.resetRowState\n      });\n    }\n  }, [data]);\n  Object.assign(instance, {\n    setRowState: setRowState,\n    setCellState: setCellState\n  });\n}\n\nfunction prepareRow$4(row, _ref) {\n  var instance = _ref.instance;\n  var _instance$initialRowS2 = instance.initialRowStateAccessor,\n      initialRowStateAccessor = _instance$initialRowS2 === void 0 ? defaultInitialRowStateAccessor : _instance$initialRowS2,\n      _instance$initialCell2 = instance.initialCellStateAccessor,\n      initialCellStateAccessor = _instance$initialCell2 === void 0 ? defaultInitialCellStateAccessor : _instance$initialCell2,\n      rowState = instance.state.rowState;\n\n  if (row.original) {\n    row.state = typeof rowState[row.id] !== 'undefined' ? rowState[row.id] : initialRowStateAccessor(row.original);\n\n    row.setState = function (updater) {\n      return instance.setRowState(row.id, updater);\n    };\n\n    row.cells.forEach(function (cell) {\n      if (!row.state.cellState) {\n        row.state.cellState = {};\n      }\n\n      cell.state = typeof row.state.cellState[cell.column.id] !== 'undefined' ? row.state.cellState[cell.column.id] : initialCellStateAccessor(row.original);\n\n      cell.setState = function (updater) {\n        return instance.setCellState(row.id, cell.column.id, updater);\n      };\n    });\n  }\n}\n\nactions.resetColumnOrder = 'resetColumnOrder';\nactions.setColumnOrder = 'setColumnOrder';\n\nvar useColumnOrder = function useColumnOrder(hooks) {\n  hooks.stateReducers.push(reducer$a);\n  hooks.visibleColumnsDeps.push(function (deps, _ref) {\n    var instance = _ref.instance;\n    return [].concat(deps, [instance.state.columnOrder]);\n  });\n  hooks.visibleColumns.push(visibleColumns$2);\n  hooks.useInstance.push(useInstance$a);\n};\n\nuseColumnOrder.pluginName = 'useColumnOrder';\n\nfunction reducer$a(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return _extends({\n      columnOrder: []\n    }, state);\n  }\n\n  if (action.type === actions.resetColumnOrder) {\n    return _extends({}, state, {\n      columnOrder: instance.initialState.columnOrder || []\n    });\n  }\n\n  if (action.type === actions.setColumnOrder) {\n    return _extends({}, state, {\n      columnOrder: functionalUpdate(action.columnOrder, state.columnOrder)\n    });\n  }\n}\n\nfunction visibleColumns$2(columns, _ref2) {\n  var columnOrder = _ref2.instance.state.columnOrder; // If there is no order, return the normal columns\n\n  if (!columnOrder || !columnOrder.length) {\n    return columns;\n  }\n\n  var columnOrderCopy = [].concat(columnOrder); // If there is an order, make a copy of the columns\n\n  var columnsCopy = [].concat(columns); // And make a new ordered array of the columns\n\n  var columnsInOrder = []; // Loop over the columns and place them in order into the new array\n\n  var _loop = function _loop() {\n    var targetColumnId = columnOrderCopy.shift();\n    var foundIndex = columnsCopy.findIndex(function (d) {\n      return d.id === targetColumnId;\n    });\n\n    if (foundIndex > -1) {\n      columnsInOrder.push(columnsCopy.splice(foundIndex, 1)[0]);\n    }\n  };\n\n  while (columnsCopy.length && columnOrderCopy.length) {\n    _loop();\n  } // If there are any columns left, add them to the end\n\n\n  return [].concat(columnsInOrder, columnsCopy);\n}\n\nfunction useInstance$a(instance) {\n  var dispatch = instance.dispatch;\n  instance.setColumnOrder = React.useCallback(function (columnOrder) {\n    return dispatch({\n      type: actions.setColumnOrder,\n      columnOrder: columnOrder\n    });\n  }, [dispatch]);\n}\n\ndefaultColumn.canResize = true; // Actions\n\nactions.columnStartResizing = 'columnStartResizing';\nactions.columnResizing = 'columnResizing';\nactions.columnDoneResizing = 'columnDoneResizing';\n\nvar useResizeColumns = function useResizeColumns(hooks) {\n  hooks.getResizerProps = [defaultGetResizerProps];\n  hooks.getHeaderProps.push({\n    style: {\n      position: 'relative'\n    }\n  });\n  hooks.stateReducers.push(reducer$b);\n  hooks.useInstance.push(useInstance$b);\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions$1);\n};\n\nvar defaultGetResizerProps = function defaultGetResizerProps(props, _ref) {\n  var instance = _ref.instance,\n      header = _ref.header;\n  var dispatch = instance.dispatch;\n\n  var onResizeStart = function onResizeStart(e, header) {\n    var isTouchEvent = false;\n\n    if (e.type === 'touchstart') {\n      // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n      if (e.touches && e.touches.length > 1) {\n        return;\n      }\n\n      isTouchEvent = true;\n    }\n\n    var headersToResize = getLeafHeaders(header);\n    var headerIdWidths = headersToResize.map(function (d) {\n      return [d.id, d.totalWidth];\n    });\n    var clientX = isTouchEvent ? Math.round(e.touches[0].clientX) : e.clientX;\n\n    var dispatchMove = function dispatchMove(clientXPos) {\n      dispatch({\n        type: actions.columnResizing,\n        clientX: clientXPos\n      });\n    };\n\n    var dispatchEnd = function dispatchEnd() {\n      return dispatch({\n        type: actions.columnDoneResizing\n      });\n    };\n\n    var handlersAndEvents = {\n      mouse: {\n        moveEvent: 'mousemove',\n        moveHandler: function moveHandler(e) {\n          return dispatchMove(e.clientX);\n        },\n        upEvent: 'mouseup',\n        upHandler: function upHandler(e) {\n          document.removeEventListener('mousemove', handlersAndEvents.mouse.moveHandler);\n          document.removeEventListener('mouseup', handlersAndEvents.mouse.upHandler);\n          dispatchEnd();\n        }\n      },\n      touch: {\n        moveEvent: 'touchmove',\n        moveHandler: function moveHandler(e) {\n          if (e.cancelable) {\n            e.preventDefault();\n            e.stopPropagation();\n          }\n\n          dispatchMove(e.touches[0].clientX);\n          return false;\n        },\n        upEvent: 'touchend',\n        upHandler: function upHandler(e) {\n          document.removeEventListener(handlersAndEvents.touch.moveEvent, handlersAndEvents.touch.moveHandler);\n          document.removeEventListener(handlersAndEvents.touch.upEvent, handlersAndEvents.touch.moveHandler);\n          dispatchEnd();\n        }\n      }\n    };\n    var events = isTouchEvent ? handlersAndEvents.touch : handlersAndEvents.mouse;\n    document.addEventListener(events.moveEvent, events.moveHandler, {\n      passive: false\n    });\n    document.addEventListener(events.upEvent, events.upHandler, {\n      passive: false\n    });\n    dispatch({\n      type: actions.columnStartResizing,\n      columnId: header.id,\n      columnWidth: header.totalWidth,\n      headerIdWidths: headerIdWidths,\n      clientX: clientX\n    });\n  };\n\n  return [props, {\n    onMouseDown: function onMouseDown(e) {\n      return e.persist() || onResizeStart(e, header);\n    },\n    onTouchStart: function onTouchStart(e) {\n      return e.persist() || onResizeStart(e, header);\n    },\n    style: {\n      cursor: 'ew-resize'\n    },\n    draggable: false,\n    role: 'separator'\n  }];\n};\n\nuseResizeColumns.pluginName = 'useResizeColumns';\n\nfunction reducer$b(state, action) {\n  if (action.type === actions.init) {\n    return _extends({\n      columnResizing: {\n        columnWidths: {}\n      }\n    }, state);\n  }\n\n  if (action.type === actions.columnStartResizing) {\n    var clientX = action.clientX,\n        columnId = action.columnId,\n        columnWidth = action.columnWidth,\n        headerIdWidths = action.headerIdWidths;\n    return _extends({}, state, {\n      columnResizing: _extends({}, state.columnResizing, {\n        startX: clientX,\n        headerIdWidths: headerIdWidths,\n        columnWidth: columnWidth,\n        isResizingColumn: columnId\n      })\n    });\n  }\n\n  if (action.type === actions.columnResizing) {\n    var _clientX = action.clientX;\n    var _state$columnResizing = state.columnResizing,\n        startX = _state$columnResizing.startX,\n        _columnWidth = _state$columnResizing.columnWidth,\n        _headerIdWidths = _state$columnResizing.headerIdWidths;\n    var deltaX = _clientX - startX;\n    var percentageDeltaX = deltaX / _columnWidth;\n    var newColumnWidths = {};\n\n    _headerIdWidths.forEach(function (_ref2) {\n      var headerId = _ref2[0],\n          headerWidth = _ref2[1];\n      newColumnWidths[headerId] = Math.max(headerWidth + headerWidth * percentageDeltaX, 0);\n    });\n\n    return _extends({}, state, {\n      columnResizing: _extends({}, state.columnResizing, {\n        columnWidths: _extends({}, state.columnResizing.columnWidths, {}, newColumnWidths)\n      })\n    });\n  }\n\n  if (action.type === actions.columnDoneResizing) {\n    return _extends({}, state, {\n      columnResizing: _extends({}, state.columnResizing, {\n        startX: null,\n        isResizingColumn: null\n      })\n    });\n  }\n}\n\nvar useInstanceBeforeDimensions$1 = function useInstanceBeforeDimensions(instance) {\n  var flatHeaders = instance.flatHeaders,\n      disableResizing = instance.disableResizing,\n      getHooks = instance.getHooks,\n      columnResizing = instance.state.columnResizing;\n  var getInstance = useGetLatest(instance);\n  flatHeaders.forEach(function (header) {\n    var canResize = getFirstDefined(header.disableResizing === true ? false : undefined, disableResizing === true ? false : undefined, true);\n    header.canResize = canResize;\n    header.width = columnResizing.columnWidths[header.id] || header.width;\n    header.isResizing = columnResizing.isResizingColumn === header.id;\n\n    if (canResize) {\n      header.getResizerProps = makePropGetter(getHooks().getResizerProps, {\n        instance: getInstance(),\n        header: header\n      });\n    }\n  });\n};\n\nfunction useInstance$b(_ref3) {\n  var plugins = _ref3.plugins;\n  ensurePluginOrder(plugins, ['useAbsoluteLayout'], 'useResizeColumns');\n}\n\nfunction getLeafHeaders(header) {\n  var leafHeaders = [];\n\n  var recurseHeader = function recurseHeader(header) {\n    if (header.columns && header.columns.length) {\n      header.columns.map(recurseHeader);\n    }\n\n    leafHeaders.push(header);\n  };\n\n  recurseHeader(header);\n  return leafHeaders;\n}\n\nvar cellStyles = {\n  position: 'absolute',\n  top: 0\n};\n\nvar useAbsoluteLayout = function useAbsoluteLayout(hooks) {\n  hooks.getTableBodyProps.push(getRowStyles);\n  hooks.getRowProps.push(getRowStyles);\n  hooks.getHeaderGroupProps.push(getRowStyles);\n  hooks.getHeaderProps.push(function (props, _ref) {\n    var column = _ref.column;\n    return [props, {\n      style: _extends({}, cellStyles, {\n        left: column.totalLeft + \"px\",\n        width: column.totalWidth + \"px\"\n      })\n    }];\n  });\n  hooks.getCellProps.push(function (props, _ref2) {\n    var cell = _ref2.cell;\n    return [props, {\n      style: _extends({}, cellStyles, {\n        left: cell.column.totalLeft + \"px\",\n        width: cell.column.totalWidth + \"px\"\n      })\n    }];\n  });\n};\n\nuseAbsoluteLayout.pluginName = 'useAbsoluteLayout';\n\nvar getRowStyles = function getRowStyles(props, _ref3) {\n  var instance = _ref3.instance;\n  return [props, {\n    style: {\n      position: 'relative',\n      width: instance.totalColumnsWidth + \"px\"\n    }\n  }];\n};\n\nvar cellStyles$1 = {\n  display: 'inline-block',\n  boxSizing: 'border-box'\n};\n\nvar getRowStyles$1 = function getRowStyles(props, _ref) {\n  var instance = _ref.instance;\n  return [props, {\n    style: {\n      display: 'flex',\n      width: instance.totalColumnsWidth + \"px\"\n    }\n  }];\n};\n\nvar useBlockLayout = function useBlockLayout(hooks) {\n  hooks.getRowProps.push(getRowStyles$1);\n  hooks.getHeaderGroupProps.push(getRowStyles$1);\n  hooks.getHeaderProps.push(function (props, _ref2) {\n    var column = _ref2.column;\n    return [props, {\n      style: _extends({}, cellStyles$1, {\n        width: column.totalWidth + \"px\"\n      })\n    }];\n  });\n  hooks.getCellProps.push(function (props, _ref3) {\n    var cell = _ref3.cell;\n    return [props, {\n      style: _extends({}, cellStyles$1, {\n        width: cell.column.totalWidth + \"px\"\n      })\n    }];\n  });\n};\n\nuseBlockLayout.pluginName = 'useBlockLayout';\n\nfunction useFlexLayout(hooks) {\n  hooks.getTableBodyProps.push(getTableBodyProps);\n  hooks.getRowProps.push(getRowStyles$2);\n  hooks.getHeaderGroupProps.push(getRowStyles$2);\n  hooks.getHeaderProps.push(getHeaderProps);\n  hooks.getCellProps.push(getCellProps);\n}\n\nuseFlexLayout.pluginName = 'useFlexLayout';\n\nvar getTableBodyProps = function getTableBodyProps(props, _ref) {\n  var instance = _ref.instance;\n  return [props, {\n    style: {\n      minWidth: instance.totalColumnsWidth + \"px\"\n    }\n  }];\n};\n\nvar getRowStyles$2 = function getRowStyles(props, _ref2) {\n  var instance = _ref2.instance;\n  return [props, {\n    style: {\n      display: 'flex',\n      flex: '1 0 auto',\n      minWidth: instance.totalColumnsMinWidth + \"px\"\n    }\n  }];\n};\n\nvar getHeaderProps = function getHeaderProps(props, _ref3) {\n  var column = _ref3.column;\n  return [props, {\n    style: {\n      boxSizing: 'border-box',\n      flex: column.totalFlexWidth ? column.totalFlexWidth + \" 0 auto\" : undefined,\n      minWidth: column.totalMinWidth + \"px\",\n      width: column.totalWidth + \"px\"\n    }\n  }];\n};\n\nvar getCellProps = function getCellProps(props, _ref4) {\n  var cell = _ref4.cell;\n  return [props, {\n    style: {\n      boxSizing: 'border-box',\n      flex: cell.column.totalFlexWidth + \" 0 auto\",\n      minWidth: cell.column.totalMinWidth + \"px\",\n      width: cell.column.totalWidth + \"px\"\n    }\n  }];\n};\n\nexport { _UNSTABLE_usePivotColumns, actions, defaultColumn, defaultGroupByFn, defaultOrderByFn, ensurePluginOrder, flexRender, functionalUpdate, loopHooks, makePropGetter, makeRenderer, reduceHooks, safeUseLayoutEffect, useAbsoluteLayout, useAsyncDebounce, useBlockLayout, useColumnOrder, useExpanded, useFilters, useFlexLayout, useGetLatest, useGlobalFilter, useGroupBy, useMountedLayoutEffect, usePagination, useResizeColumns, useRowSelect, useRowState, useSortBy, useTable };","map":{"version":3,"sources":["../src/publicUtils.js","../src/utils.js","../src/makeDefaultPluginHooks.js","../src/hooks/useColumnVisibility.js","../src/hooks/useTable.js","../src/plugin-hooks/useExpanded.js","../src/filterTypes.js","../src/plugin-hooks/useFilters.js","../src/plugin-hooks/useGlobalFilter.js","../src/aggregations.js","../src/plugin-hooks/useGroupBy.js","../src/sortTypes.js","../src/plugin-hooks/useSortBy.js","../src/plugin-hooks/usePagination.js","../src/plugin-hooks/_UNSTABLE_usePivotColumns.js","../src/plugin-hooks/useRowSelect.js","../src/plugin-hooks/useRowState.js","../src/plugin-hooks/useColumnOrder.js","../src/plugin-hooks/useResizeColumns.js","../src/plugin-hooks/useAbsoluteLayout.js","../src/plugin-hooks/useBlockLayout.js","../src/plugin-hooks/useFlexLayout.js"],"names":["renderErr","actions","init","defaultColumn","Cell","value","width","minWidth","maxWidth","Number","MAX_SAFE_INTEGER","i","funcs","sortFn","desc","dirs","sortInt","rowA","rowB","resKey","row","prev","Array","propList","style","className","rest","next","props","handlePropGetter","userProps","mergeProps","makePropGetter","meta","reduceHooks","nextValue","process","console","loopHooks","hook","pluginIndex","plugin","befores","beforeIndex","updater","ref","React","safeUseLayoutEffect","useEffect","mountedRef","fn","defaultWait","debounceRef","getDefaultFn","useGetLatest","getDefaultWait","args","clearTimeout","setTimeout","Comp","column","flexRender","isReactComponent","proto","Object","component","isClassComponent","isFunctionComponent","isExoticComponent","depth","parent","assignColumnAccessor","linkColumnStructure","flattenBy","id","accessor","Header","accessorPath","getBy","Footer","headerGroups","scanColumns","uid","getUID","headerGroup","headers","parentColumns","hasParents","d","latestParentColumn","newParent","originalId","decorateColumn","placeholderOf","pathObjCache","cacheKey","JSON","pathObj","makePathArray","val","cursor","flat","recurse","arr","manualExpandedKey","expanded","expandSubRows","expandedRows","handleRow","rows","isFunction","userFilterTypes","filterTypes","autoRemove","reOpenBracket","reCloseBracket","String","newArr","flattenDeep","defaultGetTableProps","role","defaultGetTableBodyProps","defaultGetHeaderProps","key","colSpan","defaultGetFooterProps","totalVisibleHeaderCount","defaultGetHeaderGroupProps","index","defaultGetFooterGroupProps","defaultGetRowProps","defaultGetCellProps","cell","useOptions","stateReducers","useControlledState","columns","columnsDeps","allColumns","allColumnsDeps","accessValue","materializedColumns","materializedColumnsDeps","useInstanceAfterData","visibleColumns","visibleColumnsDeps","headerGroupsDeps","useInstanceBeforeDimensions","useInstance","prepareRow","getTableProps","getTableBodyProps","getHeaderGroupProps","getFooterGroupProps","getHeaderProps","getFooterProps","getRowProps","getCellProps","useFinalInstance","useColumnVisibility","hooks","instance","defaultGetToggleHiddenProps","onChange","e","checked","title","defaultGetToggleHideAllColumnsProps","indeterminate","length","action","hiddenColumns","should","state","functionalUpdate","shouldAll","isMountedRef","handleColumn","parentVisible","flatHeaders","dispatch","getHooks","getInstance","allColumnsHidden","toggleHideColumn","type","columnId","setHiddenColumns","toggleHideAllColumns","getToggleHideAllColumnsProps","defaultInitialState","defaultColumnInstance","defaultReducer","defaultGetSubRows","defaultGetRowId","defaultUseControlledState","initialState","getSubRows","getRowId","stateReducer","useTable","plugins","applyDefaults","instanceRef","makeDefaultPluginHooks","data","userColumns","getStateReducer","reducer","handler","reducerState","flattenColumns","coreDataModel","flatRows","rowsById","allColumnsQueue","accessRowsForColumn","accessValueHooks","materializedColumnsQueue","dedupeBy","makeHeaderGroups","visibleColumnsDep","totalColumnsMinWidth","totalColumnsWidth","totalColumnsMaxWidth","calculateHeaderWidths","makeRenderer","left","sumTotalMinWidth","sumTotalWidth","sumTotalMaxWidth","sumTotalFlexWidth","subHeaders","header","totalMinWidth","totalWidth","totalMaxWidth","totalFlexWidth","Math","accessRow","original","cells","parentRows","subRows","useExpanded","defaultGetToggleAllRowsExpandedProps","onClick","defaultGetToggleRowExpandedProps","isAllRowsExpanded","expandAll","setExpanded","exists","shouldExist","_","paginateExpandedRows","autoResetExpanded","ensurePluginOrder","getAutoResetExpanded","Boolean","useMountedLayoutEffect","resetExpanded","toggleRowExpanded","toggleAllRowsExpanded","expandRows","expandedDepth","findExpandedDepth","getToggleAllRowsExpandedProps","preExpandedRows","maxDepth","splitId","text","rowValue","exactText","exactTextCase","includes","filterValue","includesAll","exact","equals","between","min","max","temp","useFilters","filters","filterMethod","getFilterMethod","previousfilter","newFilter","shouldAutoRemoveFilter","filter","manualFilters","defaultCanFilter","disableFilters","autoResetFilters","setFilter","setAllFilters","columnDefaultCanFilter","columnDisableFilters","getFirstDefined","found","filteredRows","filteredFlatRows","filteredRowsById","filterRows","nonFilteredColumns","getAutoResetFilters","resetFilters","preFilteredRows","preFilteredFlatRows","preFilteredRowsById","useGlobalFilter","globalFilter","undefined","stateWithoutGlobalFilter","manualGlobalFilter","globalFilterValue","autoResetGlobalFilter","setGlobalFilter","globalFilteredRows","globalFilteredFlatRows","globalFilteredRowsById","getAutoResetGlobalFilter","resetGlobalFilter","preGlobalFilteredRows","preGlobalFilteredFlatRows","preGlobalFilteredRowsById","sum","values","emptyArray","emptyObject","useGroupBy","defaultGetGroupByToggleProps","groupBy","setGroupBy","resolvedGroupBy","groupByColumns","col","nonGroupByColumns","defaultUserAggregations","groupByFn","manualGroupBy","userAggregations","autoResetGroupBy","disableGroupBy","defaultCanGroupBy","defaultColumnGroupBy","columnDisableGroupBy","toggleGroupBy","groupedRows","groupedFlatRows","groupedRowsById","onlyGroupedFlatRows","onlyGroupedRowsById","nonGroupedFlatRows","nonGroupedRowsById","existingGroupBy","aggregateRowsToValues","groupedValues","leafValues","columnValue","aggregateValueFn","aggregations","aggregateFn","groupUpRecursively","rowGroupsMap","aggregatedGroupedRows","groupByVal","parentId","leafRows","isGrouped","groupByID","subRow","getAutoResetGroupBy","resetGroupBy","preGroupedRows","preGroupedFlatRow","preGroupedRowsById","reSplitAlphaNumeric","alphanumeric","a","getRowValueByColumnID","b","toString","aa","bb","an","parseInt","bn","combo","isNaN","compareBasic","useSortBy","defaultGetSortByToggleProps","isMultiSortEvent","sortBy","newSortBy","multi","disableMultiSort","disableSortRemove","disableMultiRemove","maxMultiSortColCount","sortDescFirst","existingSortBy","existingIndex","hasDescDefined","sortAction","orderByFn","userSortTypes","manualSortBy","defaultCanSort","disableSortBy","autoResetSortBy","toggleSortBy","defaultColumnCanSort","columnDisableSortBy","canSort","columnSort","sortedRows","sortedFlatRows","availableSortBy","sort","sortData","sortedData","sortType","sortMethod","sortTypes","getAutoResetSortBy","resetSortBy","preSortedRows","preSortedFlatRows","pluginName","usePagination","pageSize","pageIndex","pageCount","newPageIndex","topRowIndex","autoResetPage","userPageCount","manualPagination","getAutoResetPage","resetPage","pageOptions","page","pageStart","pageEnd","canPreviousPage","canNextPage","gotoPage","previousPage","old","nextPage","setPageSize","_UNSTABLE_usePivotColumns","defaultPivotColumns","defaultGetPivotToggleProps","pivotColumns","setPivot","resolvedPivot","sourceColumns","buildPivotColumns","pivotFilters","pivotColumn","canPivot","isPivoted","sourceColumn","uniqueValues","columnGroup","isPivotGroup","pivotValue","uniqueValue","newMaterialized","autoResetPivot","manaulPivot","disablePivot","defaultCanPivot","defaultColumnPivot","columnDisablePivot","togglePivot","getAutoResetPivot","resetPivot","useRowSelect","defaultGetToggleRowSelectedProps","manualRowSelectedKey","isSomeSelected","defaultGetToggleAllRowsSelectedProps","selectedRowIds","setSelected","isAllRowsSelected","selectAll","selectSubRows","isSelected","newSelectedRowIds","handleRowById","autoResetSelectedRows","selectedFlatRows","getRowIsSelected","getAutoResetSelectedRows","resetSelectedRows","toggleAllRowsSelected","toggleRowSelected","getToggleAllRowsSelectedProps","allChildrenSelected","someSelected","defaultInitialRowStateAccessor","defaultInitialCellStateAccessor","useRowState","initialRowStateAccessor","initialCellStateAccessor","rowState","rowId","oldRowState","oldCellState","cellState","autoResetRowState","setRowState","setCellState","getAutoResetRowState","resetRowState","useColumnOrder","columnOrder","columnOrderCopy","columnsCopy","columnsInOrder","targetColumnId","foundIndex","useResizeColumns","position","defaultGetResizerProps","onResizeStart","isTouchEvent","headersToResize","getLeafHeaders","headerIdWidths","clientX","dispatchMove","clientXPos","dispatchEnd","columnDoneResizing","handlersAndEvents","mouse","moveEvent","moveHandler","upEvent","upHandler","document","touch","events","passive","columnWidth","onMouseDown","onTouchStart","draggable","columnResizing","columnWidths","startX","isResizingColumn","deltaX","percentageDeltaX","newColumnWidths","headerId","headerWidth","disableResizing","canResize","leafHeaders","recurseHeader","cellStyles","top","useAbsoluteLayout","getRowStyles","display","boxSizing","useBlockLayout","useFlexLayout","flex"],"mappings":"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","sourcesContent":["import React from 'react'\n\nlet renderErr = 'Renderer Error ☝️'\n\nexport const actions = {\n  init: 'init',\n}\n\nexport const defaultColumn = {\n  Cell: ({ cell: { value = '' } }) => value,\n  width: 150,\n  minWidth: 0,\n  maxWidth: Number.MAX_SAFE_INTEGER,\n}\n\nexport function defaultOrderByFn(arr, funcs, dirs) {\n  return [...arr].sort((rowA, rowB) => {\n    for (let i = 0; i < funcs.length; i += 1) {\n      const sortFn = funcs[i]\n      const desc = dirs[i] === false || dirs[i] === 'desc'\n      const sortInt = sortFn(rowA, rowB)\n      if (sortInt !== 0) {\n        return desc ? -sortInt : sortInt\n      }\n    }\n    return dirs[0] ? rowA.index - rowB.index : rowB.index - rowA.index\n  })\n}\n\nexport function defaultGroupByFn(rows, columnId) {\n  return rows.reduce((prev, row, i) => {\n    // TODO: Might want to implement a key serializer here so\n    // irregular column values can still be grouped if needed?\n    const resKey = `${row.values[columnId]}`\n    prev[resKey] = Array.isArray(prev[resKey]) ? prev[resKey] : []\n    prev[resKey].push(row)\n    return prev\n  }, {})\n}\n\nfunction mergeProps(...propList) {\n  return propList.reduce((props, next) => {\n    const { style, className, ...rest } = next\n\n    props = {\n      ...props,\n      ...rest,\n    }\n\n    if (style) {\n      props.style = props.style\n        ? { ...(props.style || {}), ...(style || {}) }\n        : style\n    }\n\n    if (className) {\n      props.className = props.className\n        ? props.className + ' ' + className\n        : className\n    }\n\n    if (props.className === '') {\n      delete props.className\n    }\n\n    return props\n  }, {})\n}\n\nfunction handlePropGetter(prevProps, userProps, meta) {\n  // Handle a lambda, pass it the previous props\n  if (typeof userProps === 'function') {\n    return handlePropGetter({}, userProps(prevProps, meta))\n  }\n\n  // Handle an array, merge each item as separate props\n  if (Array.isArray(userProps)) {\n    return mergeProps(prevProps, ...userProps)\n  }\n\n  // Handle an object by default, merge the two objects\n  return mergeProps(prevProps, userProps)\n}\n\nexport const makePropGetter = (hooks, meta = {}) => {\n  return (userProps = {}) =>\n    [...hooks, userProps].reduce(\n      (prev, next) =>\n        handlePropGetter(prev, next, {\n          ...meta,\n          userProps,\n        }),\n      {}\n    )\n}\n\nexport const reduceHooks = (hooks, initial, meta = {}, allowUndefined) =>\n  hooks.reduce((prev, next) => {\n    const nextValue = next(prev, meta)\n    if (process.env.NODE_ENV !== 'production') {\n      if (!allowUndefined && typeof nextValue === 'undefined') {\n        console.info(next)\n        throw new Error(\n          'React Table: A reducer hook ☝️ just returned undefined! This is not allowed.'\n        )\n      }\n    }\n    return nextValue\n  }, initial)\n\nexport const loopHooks = (hooks, context, meta = {}) =>\n  hooks.forEach(hook => {\n    const nextValue = hook(context, meta)\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof nextValue !== 'undefined') {\n        console.info(hook, nextValue)\n        throw new Error(\n          'React Table: A loop-type hook ☝️ just returned a value! This is not allowed.'\n        )\n      }\n    }\n  })\n\nexport function ensurePluginOrder(plugins, befores, pluginName, afters) {\n  if (process.env.NODE_ENV !== 'production' && afters) {\n    throw new Error(\n      `Defining plugins in the \"after\" section of ensurePluginOrder is no longer supported (see plugin ${pluginName})`\n    )\n  }\n  const pluginIndex = plugins.findIndex(\n    plugin => plugin.pluginName === pluginName\n  )\n\n  if (pluginIndex === -1) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`The plugin \"${pluginName}\" was not found in the plugin list!\nThis usually means you need to need to name your plugin hook by setting the 'pluginName' property of the hook function, eg:\n\n  ${pluginName}.pluginName = '${pluginName}'\n`)\n    }\n  }\n\n  befores.forEach(before => {\n    const beforeIndex = plugins.findIndex(\n      plugin => plugin.pluginName === before\n    )\n    if (beforeIndex > -1 && beforeIndex > pluginIndex) {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error(\n          `React Table: The ${pluginName} plugin hook must be placed after the ${before} plugin hook!`\n        )\n      }\n    }\n  })\n}\n\nexport function functionalUpdate(updater, old) {\n  return typeof updater === 'function' ? updater(old) : updater\n}\n\nexport function useGetLatest(obj) {\n  const ref = React.useRef()\n  ref.current = obj\n\n  return React.useCallback(() => ref.current, [])\n}\n\n// SSR has issues with useLayoutEffect still, so use useEffect during SSR\nexport const safeUseLayoutEffect =\n  typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect\n\nexport function useMountedLayoutEffect(fn, deps) {\n  const mountedRef = React.useRef(false)\n\n  safeUseLayoutEffect(() => {\n    if (mountedRef.current) {\n      fn()\n    }\n    mountedRef.current = true\n    // eslint-disable-next-line\n  }, deps)\n}\n\nexport function useAsyncDebounce(defaultFn, defaultWait = 0) {\n  const debounceRef = React.useRef({})\n\n  const getDefaultFn = useGetLatest(defaultFn)\n  const getDefaultWait = useGetLatest(defaultWait)\n\n  return React.useCallback(\n    async (...args) => {\n      if (!debounceRef.current.promise) {\n        debounceRef.current.promise = new Promise((resolve, reject) => {\n          debounceRef.current.resolve = resolve\n          debounceRef.current.reject = reject\n        })\n      }\n\n      if (debounceRef.current.timeout) {\n        clearTimeout(debounceRef.current.timeout)\n      }\n\n      debounceRef.current.timeout = setTimeout(async () => {\n        delete debounceRef.current.timeout\n        try {\n          debounceRef.current.resolve(await getDefaultFn()(...args))\n        } catch (err) {\n          debounceRef.current.reject(err)\n        } finally {\n          delete debounceRef.current.promise\n        }\n      }, getDefaultWait())\n\n      return debounceRef.current.promise\n    },\n    [getDefaultFn, getDefaultWait]\n  )\n}\n\nexport function makeRenderer(instance, column, meta = {}) {\n  return (type, userProps = {}) => {\n    const Comp = typeof type === 'string' ? column[type] : type\n\n    if (typeof Comp === 'undefined') {\n      console.info(column)\n      throw new Error(renderErr)\n    }\n\n    return flexRender(Comp, { ...instance, column, ...meta, ...userProps })\n  }\n}\n\nexport function flexRender(Comp, props) {\n  return isReactComponent(Comp) ? <Comp {...props} /> : Comp\n}\n\nfunction isClassComponent(component) {\n  return (\n    typeof component === 'function' &&\n    !!(() => {\n      let proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isFunctionComponent(component) {\n  return typeof component === 'function'\n}\n\nfunction isExoticComponent(component) {\n  return (\n    typeof component === 'object' &&\n    typeof component.$$typeof === 'symbol' &&\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\n  )\n}\n\nfunction isReactComponent(component) {\n  return (\n    isClassComponent(component) ||\n    isFunctionComponent(component) ||\n    isExoticComponent(component)\n  )\n}\n","import React from 'react'\nimport { defaultColumn } from './publicUtils'\n\n// Find the depth of the columns\nexport function findMaxDepth(columns, depth = 0) {\n  return columns.reduce((prev, curr) => {\n    if (curr.columns) {\n      return Math.max(prev, findMaxDepth(curr.columns, depth + 1))\n    }\n    return depth\n  }, 0)\n}\n\n// Build the visible columns, headers and flat column list\nexport function linkColumnStructure(columns, parent, depth = 0) {\n  return columns.map(column => {\n    column = {\n      ...column,\n      parent,\n      depth,\n    }\n\n    assignColumnAccessor(column)\n\n    if (column.columns) {\n      column.columns = linkColumnStructure(column.columns, column, depth + 1)\n    }\n    return column\n  })\n}\n\nexport function flattenColumns(columns) {\n  return flattenBy(columns, 'columns')\n}\n\nexport function assignColumnAccessor(column) {\n  // First check for string accessor\n  let { id, accessor, Header } = column\n\n  if (typeof accessor === 'string') {\n    id = id || accessor\n    const accessorPath = accessor.split('.')\n    accessor = row => getBy(row, accessorPath)\n  }\n\n  if (!id && typeof Header === 'string' && Header) {\n    id = Header\n  }\n\n  if (!id && column.columns) {\n    console.error(column)\n    throw new Error('A column ID (or unique \"Header\" value) is required!')\n  }\n\n  if (!id) {\n    console.error(column)\n    throw new Error('A column ID (or string accessor) is required!')\n  }\n\n  Object.assign(column, {\n    id,\n    accessor,\n  })\n\n  return column\n}\n\n// Find the depth of the columns\nexport function dedupeBy(arr, fn) {\n  return [...arr]\n    .reverse()\n    .filter((d, i, all) => all.findIndex(dd => fn(dd) === fn(d)) === i)\n    .reverse()\n}\n\nexport function decorateColumn(column, userDefaultColumn) {\n  if (!userDefaultColumn) {\n    throw new Error()\n  }\n  Object.assign(column, {\n    // Make sure there is a fallback header, just in case\n    Header: () => <>&nbsp;</>,\n    Footer: () => <>&nbsp;</>,\n    ...defaultColumn,\n    ...userDefaultColumn,\n    ...column,\n  })\n  return column\n}\n\n// Build the header groups from the bottom up\nexport function makeHeaderGroups(allColumns, defaultColumn) {\n  const headerGroups = []\n\n  let scanColumns = allColumns\n\n  let uid = 0\n  const getUID = () => uid++\n\n  while (scanColumns.length) {\n    // The header group we are creating\n    const headerGroup = {\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const parentColumns = []\n\n    const hasParents = scanColumns.some(d => d.parent)\n\n    // Scan each column for parents\n    scanColumns.forEach(column => {\n      // What is the latest (last) parent column?\n      let latestParentColumn = [...parentColumns].reverse()[0]\n\n      let newParent\n\n      if (hasParents) {\n        // If the column has a parent, add it if necessary\n        if (column.parent) {\n          newParent = {\n            ...column.parent,\n            originalId: column.parent.id,\n            id: `${column.parent.id}_${getUID()}`,\n            headers: [column],\n          }\n        } else {\n          // If other columns have parents, we'll need to add a place holder if necessary\n          const originalId = `${column.id}_placeholder`\n          newParent = decorateColumn(\n            {\n              originalId,\n              id: `${column.id}_placeholder_${getUID()}`,\n              placeholderOf: column,\n              headers: [column],\n            },\n            defaultColumn\n          )\n        }\n\n        // If the resulting parent columns are the same, just add\n        // the column and increment the header span\n        if (\n          latestParentColumn &&\n          latestParentColumn.originalId === newParent.originalId\n        ) {\n          latestParentColumn.headers.push(column)\n        } else {\n          parentColumns.push(newParent)\n        }\n      }\n\n      headerGroup.headers.push(column)\n    })\n\n    headerGroups.push(headerGroup)\n\n    // Start scanning the parent columns\n    scanColumns = parentColumns\n  }\n\n  return headerGroups.reverse()\n}\n\nconst pathObjCache = new Map()\n\nexport function getBy(obj, path, def) {\n  if (!path) {\n    return obj\n  }\n  const cacheKey = typeof path === 'function' ? path : JSON.stringify(path)\n\n  const pathObj =\n    pathObjCache.get(cacheKey) ||\n    (() => {\n      const pathObj = makePathArray(path)\n      pathObjCache.set(cacheKey, pathObj)\n      return pathObj\n    })()\n\n  let val\n\n  try {\n    val = pathObj.reduce((cursor, pathPart) => cursor[pathPart], obj)\n  } catch (e) {\n    // continue regardless of error\n  }\n  return typeof val !== 'undefined' ? val : def\n}\n\nexport function getFirstDefined(...args) {\n  for (let i = 0; i < args.length; i += 1) {\n    if (typeof args[i] !== 'undefined') {\n      return args[i]\n    }\n  }\n}\n\nexport function getElementDimensions(element) {\n  const rect = element.getBoundingClientRect()\n  const style = window.getComputedStyle(element)\n  const margins = {\n    left: parseInt(style.marginLeft),\n    right: parseInt(style.marginRight),\n  }\n  const padding = {\n    left: parseInt(style.paddingLeft),\n    right: parseInt(style.paddingRight),\n  }\n  return {\n    left: Math.ceil(rect.left),\n    width: Math.ceil(rect.width),\n    outerWidth: Math.ceil(\n      rect.width + margins.left + margins.right + padding.left + padding.right\n    ),\n    marginLeft: margins.left,\n    marginRight: margins.right,\n    paddingLeft: padding.left,\n    paddingRight: padding.right,\n    scrollWidth: element.scrollWidth,\n  }\n}\n\nexport function isFunction(a) {\n  if (typeof a === 'function') {\n    return a\n  }\n}\n\nexport function flattenBy(arr, key) {\n  const flat = []\n\n  const recurse = arr => {\n    arr.forEach(d => {\n      if (!d[key]) {\n        flat.push(d)\n      } else {\n        recurse(d[key])\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function expandRows(\n  rows,\n  { manualExpandedKey, expanded, expandSubRows = true }\n) {\n  const expandedRows = []\n\n  const handleRow = row => {\n    row.isExpanded =\n      (row.original && row.original[manualExpandedKey]) || expanded[row.id]\n\n    row.canExpand = row.subRows && !!row.subRows.length\n\n    expandedRows.push(row)\n\n    if (expandSubRows && row.subRows && row.subRows.length && row.isExpanded) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rows.forEach(handleRow)\n\n  return expandedRows\n}\n\nexport function getFilterMethod(filter, userFilterTypes, filterTypes) {\n  return (\n    isFunction(filter) ||\n    userFilterTypes[filter] ||\n    filterTypes[filter] ||\n    filterTypes.text\n  )\n}\n\nexport function shouldAutoRemoveFilter(autoRemove, value, column) {\n  return autoRemove ? autoRemove(value, column) : typeof value === 'undefined'\n}\n\nexport function unpreparedAccessWarning() {\n  throw new Error(\n    'React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.'\n  )\n}\n\n//\n\nconst reOpenBracket = /\\[/g\nconst reCloseBracket = /\\]/g\n\nfunction makePathArray(obj) {\n  return (\n    flattenDeep(obj)\n      // remove all periods in parts\n      .map(d => String(d).replace('.', '_'))\n      // join parts using period\n      .join('.')\n      // replace brackets with periods\n      .replace(reOpenBracket, '.')\n      .replace(reCloseBracket, '')\n      // split it back out on periods\n      .split('.')\n  )\n}\n\nfunction flattenDeep(arr, newArr = []) {\n  if (!Array.isArray(arr)) {\n    newArr.push(arr)\n  } else {\n    for (let i = 0; i < arr.length; i += 1) {\n      flattenDeep(arr[i], newArr)\n    }\n  }\n  return newArr\n}\n","const defaultGetTableProps = props => ({\n  role: 'table',\n  ...props,\n})\n\nconst defaultGetTableBodyProps = props => ({\n  role: 'rowgroup',\n  ...props,\n})\n\nconst defaultGetHeaderProps = (props, { column }) => ({\n  key: `header_${column.id}`,\n  colSpan: column.totalVisibleHeaderCount,\n  role: 'columnheader',\n  ...props,\n})\n\nconst defaultGetFooterProps = (props, { column }) => ({\n  key: `footer_${column.id}`,\n  colSpan: column.totalVisibleHeaderCount,\n  ...props,\n})\n\nconst defaultGetHeaderGroupProps = (props, { index }) => ({\n  key: `headerGroup_${index}`,\n  role: 'row',\n  ...props,\n})\n\nconst defaultGetFooterGroupProps = (props, { index }) => ({\n  key: `footerGroup_${index}`,\n  ...props,\n})\n\nconst defaultGetRowProps = (props, { row }) => ({\n  key: `row_${row.id}`,\n  role: 'row',\n  ...props,\n})\n\nconst defaultGetCellProps = (props, { cell }) => ({\n  key: `cell_${cell.row.id}_${cell.column.id}`,\n  role: 'cell',\n  ...props,\n})\n\nexport default function makeDefaultPluginHooks() {\n  return {\n    useOptions: [],\n    stateReducers: [],\n    useControlledState: [],\n    columns: [],\n    columnsDeps: [],\n    allColumns: [],\n    allColumnsDeps: [],\n    accessValue: [],\n    materializedColumns: [],\n    materializedColumnsDeps: [],\n    useInstanceAfterData: [],\n    visibleColumns: [],\n    visibleColumnsDeps: [],\n    headerGroups: [],\n    headerGroupsDeps: [],\n    useInstanceBeforeDimensions: [],\n    useInstance: [],\n    prepareRow: [],\n    getTableProps: [defaultGetTableProps],\n    getTableBodyProps: [defaultGetTableBodyProps],\n    getHeaderGroupProps: [defaultGetHeaderGroupProps],\n    getFooterGroupProps: [defaultGetFooterGroupProps],\n    getHeaderProps: [defaultGetHeaderProps],\n    getFooterProps: [defaultGetFooterProps],\n    getRowProps: [defaultGetRowProps],\n    getCellProps: [defaultGetCellProps],\n    useFinalInstance: [],\n  }\n}\n","import React from 'react'\n\nimport {\n  actions,\n  functionalUpdate,\n  useGetLatest,\n  makePropGetter,\n} from '../publicUtils'\n\nactions.resetHiddenColumns = 'resetHiddenColumns'\nactions.toggleHideColumn = 'toggleHideColumn'\nactions.setHiddenColumns = 'setHiddenColumns'\nactions.toggleHideAllColumns = 'toggleHideAllColumns'\n\nexport const useColumnVisibility = hooks => {\n  hooks.getToggleHiddenProps = [defaultGetToggleHiddenProps]\n  hooks.getToggleHideAllColumnsProps = [defaultGetToggleHideAllColumnsProps]\n\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n  hooks.headerGroupsDeps.push((deps, { instance }) => [\n    ...deps,\n    instance.state.hiddenColumns,\n  ])\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnVisibility.pluginName = 'useColumnVisibility'\n\nconst defaultGetToggleHiddenProps = (props, { column }) => [\n  props,\n  {\n    onChange: e => {\n      column.toggleHidden(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: column.isVisible,\n    title: 'Toggle Column Visible',\n  },\n]\n\nconst defaultGetToggleHideAllColumnsProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleHideAllColumns(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: !instance.allColumnsHidden && !instance.state.hiddenColumns.length,\n    title: 'Toggle All Columns Hidden',\n    indeterminate:\n      !instance.allColumnsHidden && instance.state.hiddenColumns.length,\n  },\n]\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      hiddenColumns: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: instance.initialState.hiddenColumns || [],\n    }\n  }\n\n  if (action.type === actions.toggleHideColumn) {\n    const should =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.includes(action.columnId)\n\n    const hiddenColumns = should\n      ? [...state.hiddenColumns, action.columnId]\n      : state.hiddenColumns.filter(d => d !== action.columnId)\n\n    return {\n      ...state,\n      hiddenColumns,\n    }\n  }\n\n  if (action.type === actions.setHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: functionalUpdate(action.value, state.hiddenColumns),\n    }\n  }\n\n  if (action.type === actions.toggleHideAllColumns) {\n    const shouldAll =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.length\n\n    return {\n      ...state,\n      hiddenColumns: shouldAll ? instance.allColumns.map(d => d.id) : [],\n    }\n  }\n}\n\nfunction useInstanceBeforeDimensions(instance) {\n  const {\n    headers,\n    state: { hiddenColumns },\n  } = instance\n\n  const isMountedRef = React.useRef(false)\n\n  if (!isMountedRef.current) {\n  }\n\n  const handleColumn = (column, parentVisible) => {\n    column.isVisible = parentVisible && !hiddenColumns.includes(column.id)\n\n    let totalVisibleHeaderCount = 0\n\n    if (column.headers && column.headers.length) {\n      column.headers.forEach(\n        subColumn =>\n          (totalVisibleHeaderCount += handleColumn(subColumn, column.isVisible))\n      )\n    } else {\n      totalVisibleHeaderCount = column.isVisible ? 1 : 0\n    }\n\n    column.totalVisibleHeaderCount = totalVisibleHeaderCount\n\n    return totalVisibleHeaderCount\n  }\n\n  let totalVisibleHeaderCount = 0\n\n  headers.forEach(\n    subHeader => (totalVisibleHeaderCount += handleColumn(subHeader, true))\n  )\n}\n\nfunction useInstance(instance) {\n  const {\n    flatHeaders,\n    dispatch,\n    allColumns,\n    getHooks,\n    state: { hiddenColumns },\n  } = instance\n\n  const getInstance = useGetLatest(instance)\n\n  const allColumnsHidden = allColumns.length === hiddenColumns.length\n\n  const toggleHideColumn = React.useCallback(\n    (columnId, value) =>\n      dispatch({ type: actions.toggleHideColumn, columnId, value }),\n    [dispatch]\n  )\n\n  const setHiddenColumns = React.useCallback(\n    value => dispatch({ type: actions.setHiddenColumns, value }),\n    [dispatch]\n  )\n\n  const toggleHideAllColumns = React.useCallback(\n    value => dispatch({ type: actions.toggleHideAllColumns, value }),\n    [dispatch]\n  )\n\n  const getToggleHideAllColumnsProps = makePropGetter(\n    getHooks().getToggleHideAllColumnsProps,\n    { instance: getInstance() }\n  )\n\n  flatHeaders.forEach(column => {\n    column.toggleHidden = value => {\n      dispatch({\n        type: actions.toggleHideColumn,\n        columnId: column.id,\n        value,\n      })\n    }\n\n    column.getToggleHiddenProps = makePropGetter(\n      getHooks().getToggleHiddenProps,\n      {\n        instance: getInstance(),\n        column,\n      }\n    )\n  })\n\n  Object.assign(instance, {\n    allColumnsHidden,\n    toggleHideColumn,\n    setHiddenColumns,\n    toggleHideAllColumns,\n    getToggleHideAllColumnsProps,\n  })\n}\n","import React from 'react'\n\n//\n\nimport {\n  linkColumnStructure,\n  flattenColumns,\n  assignColumnAccessor,\n  unpreparedAccessWarning,\n  makeHeaderGroups,\n  decorateColumn,\n  dedupeBy,\n} from '../utils'\n\nimport {\n  useGetLatest,\n  reduceHooks,\n  actions,\n  loopHooks,\n  makePropGetter,\n  makeRenderer,\n} from '../publicUtils'\n\nimport makeDefaultPluginHooks from '../makeDefaultPluginHooks'\n\nimport { useColumnVisibility } from './useColumnVisibility'\n\nconst defaultInitialState = {}\nconst defaultColumnInstance = {}\nconst defaultReducer = (state, action, prevState) => state\nconst defaultGetSubRows = (row, index) => row.subRows || []\nconst defaultGetRowId = (row, index, parent) =>\n  `${parent ? [parent.id, index].join('.') : index}`\nconst defaultUseControlledState = d => d\n\nfunction applyDefaults(props) {\n  const {\n    initialState = defaultInitialState,\n    defaultColumn = defaultColumnInstance,\n    getSubRows = defaultGetSubRows,\n    getRowId = defaultGetRowId,\n    stateReducer = defaultReducer,\n    useControlledState = defaultUseControlledState,\n    ...rest\n  } = props\n\n  return {\n    ...rest,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  }\n}\n\nexport const useTable = (props, ...plugins) => {\n  // Apply default props\n  props = applyDefaults(props)\n\n  // Add core plugins\n  plugins = [useColumnVisibility, ...plugins]\n\n  // Create the table instance\n  let instanceRef = React.useRef({})\n\n  // Create a getter for the instance (helps avoid a lot of potential memory leaks)\n  const getInstance = useGetLatest(instanceRef.current)\n\n  // Assign the props, plugins and hooks to the instance\n  Object.assign(getInstance(), {\n    ...props,\n    plugins,\n    hooks: makeDefaultPluginHooks(),\n  })\n\n  // Allow plugins to register hooks as early as possible\n  plugins.filter(Boolean).forEach(plugin => {\n    plugin(getInstance().hooks)\n  })\n\n  // Consume all hooks and make a getter for them\n  const getHooks = useGetLatest(getInstance().hooks)\n  getInstance().getHooks = getHooks\n  delete getInstance().hooks\n\n  // Allow useOptions hooks to modify the options coming into the table\n  Object.assign(\n    getInstance(),\n    reduceHooks(getHooks().useOptions, applyDefaults(props))\n  )\n\n  const {\n    data,\n    columns: userColumns,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  } = getInstance()\n\n  // Setup user reducer ref\n  const getStateReducer = useGetLatest(stateReducer)\n\n  // Build the reducer\n  const reducer = React.useCallback(\n    (state, action) => {\n      // Detect invalid actions\n      if (!action.type) {\n        console.info({ action })\n        throw new Error('Unknown Action 👆')\n      }\n\n      // Reduce the state from all plugin reducers\n      return [\n        ...getHooks().stateReducers,\n        // Allow the user to add their own state reducer(s)\n        ...(Array.isArray(getStateReducer())\n          ? getStateReducer()\n          : [getStateReducer()]),\n      ].reduce(\n        (s, handler) => handler(s, action, state, getInstance()) || s,\n        state\n      )\n    },\n    [getHooks, getStateReducer, getInstance]\n  )\n\n  // Start the reducer\n  const [reducerState, dispatch] = React.useReducer(reducer, undefined, () =>\n    reducer(initialState, { type: actions.init })\n  )\n\n  // Allow the user to control the final state with hooks\n  const state = reduceHooks(\n    [...getHooks().useControlledState, useControlledState],\n    reducerState,\n    { instance: getInstance() }\n  )\n\n  Object.assign(getInstance(), {\n    state,\n    dispatch,\n  })\n\n  // Decorate All the columns\n  const columns = React.useMemo(\n    () =>\n      linkColumnStructure(\n        reduceHooks(getHooks().columns, userColumns, {\n          instance: getInstance(),\n        })\n      ),\n    [\n      getHooks,\n      getInstance,\n      userColumns,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().columnsDeps, [], { instance: getInstance() }),\n    ]\n  )\n  getInstance().columns = columns\n\n  // Get the flat list of all columns and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let allColumns = React.useMemo(\n    () =>\n      reduceHooks(getHooks().allColumns, flattenColumns(columns), {\n        instance: getInstance(),\n      }).map(assignColumnAccessor),\n    [\n      columns,\n      getHooks,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().allColumnsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n  getInstance().allColumns = allColumns\n\n  // Access the row model using initial columns\n  const coreDataModel = React.useMemo(() => {\n    let rows = []\n    let flatRows = []\n    const rowsById = {}\n\n    const allColumnsQueue = [...allColumns]\n\n    while (allColumnsQueue.length) {\n      const column = allColumnsQueue.shift()\n      accessRowsForColumn({\n        data,\n        rows,\n        flatRows,\n        rowsById,\n        column,\n        getRowId,\n        getSubRows,\n        accessValueHooks: getHooks().accessValue,\n        getInstance,\n      })\n    }\n\n    return { rows, flatRows, rowsById }\n  }, [allColumns, data, getRowId, getSubRows, getHooks, getInstance])\n\n  // Allow materialized columns to also access data\n  const [rows, flatRows, rowsById, materializedColumns] = React.useMemo(() => {\n    const { rows, flatRows, rowsById } = coreDataModel\n    const materializedColumns = reduceHooks(\n      getHooks().materializedColumns,\n      [],\n      {\n        instance: getInstance(),\n      }\n    )\n\n    materializedColumns.forEach(d => assignColumnAccessor(d))\n\n    const materializedColumnsQueue = [...materializedColumns]\n\n    while (materializedColumnsQueue.length) {\n      const column = materializedColumnsQueue.shift()\n      accessRowsForColumn({\n        data,\n        rows,\n        flatRows,\n        rowsById,\n        column,\n        getRowId,\n        getSubRows,\n        accessValueHooks: getHooks().accessValue,\n        getInstance,\n      })\n    }\n\n    return [rows, flatRows, rowsById, materializedColumns]\n  }, [\n    coreDataModel,\n    getHooks,\n    getInstance,\n    data,\n    getRowId,\n    getSubRows,\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    ...reduceHooks(getHooks().materializedColumnsDeps, [], {\n      instance: getInstance(),\n    }),\n  ])\n\n  Object.assign(getInstance(), {\n    rows,\n    flatRows,\n    rowsById,\n    materializedColumns,\n  })\n\n  loopHooks(getHooks().useInstanceAfterData, getInstance())\n\n  // Combine new materialized columns with all columns (dedupe prefers later columns)\n  allColumns = React.useMemo(\n    () => dedupeBy([...allColumns, ...materializedColumns], d => d.id),\n    [allColumns, materializedColumns]\n  )\n  getInstance().allColumns = allColumns\n\n  // Get the flat list of all columns AFTER the rows\n  // have been access, and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let visibleColumns = React.useMemo(\n    () =>\n      reduceHooks(getHooks().visibleColumns, allColumns, {\n        instance: getInstance(),\n      }).map(d => decorateColumn(d, defaultColumn)),\n    [\n      getHooks,\n      allColumns,\n      getInstance,\n      defaultColumn,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().visibleColumnsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n\n  // Combine new visible columns with all columns (dedupe prefers later columns)\n  allColumns = React.useMemo(\n    () => dedupeBy([...allColumns, ...visibleColumns], d => d.id),\n    [allColumns, visibleColumns]\n  )\n  getInstance().allColumns = allColumns\n\n  // Make the headerGroups\n  const headerGroups = React.useMemo(\n    () =>\n      reduceHooks(\n        getHooks().headerGroups,\n        makeHeaderGroups(visibleColumns, defaultColumn),\n        getInstance()\n      ),\n    [\n      getHooks,\n      visibleColumns,\n      defaultColumn,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().headerGroupsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n  getInstance().headerGroups = headerGroups\n\n  // Get the first level of headers\n  const headers = React.useMemo(\n    () => (headerGroups.length ? headerGroups[0].headers : []),\n    [headerGroups]\n  )\n  getInstance().headers = headers\n\n  // Provide a flat header list for utilities\n  getInstance().flatHeaders = headerGroups.reduce(\n    (all, headerGroup) => [...all, ...headerGroup.headers],\n    []\n  )\n\n  loopHooks(getHooks().useInstanceBeforeDimensions, getInstance())\n\n  // Filter columns down to visible ones\n  const visibleColumnsDep = visibleColumns\n    .filter(d => d.isVisible)\n    .map(d => d.id)\n    .sort()\n    .join('_')\n\n  visibleColumns = React.useMemo(\n    () => visibleColumns.filter(d => d.isVisible),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [visibleColumns, visibleColumnsDep]\n  )\n  getInstance().visibleColumns = visibleColumns\n\n  // Header Visibility is needed by this point\n  const [\n    totalColumnsMinWidth,\n    totalColumnsWidth,\n    totalColumnsMaxWidth,\n  ] = calculateHeaderWidths(headers)\n\n  getInstance().totalColumnsMinWidth = totalColumnsMinWidth\n  getInstance().totalColumnsWidth = totalColumnsWidth\n  getInstance().totalColumnsMaxWidth = totalColumnsMaxWidth\n\n  loopHooks(getHooks().useInstance, getInstance())\n\n  // Each materialized header needs to be assigned a render function and other\n  // prop getter properties here.\n  ;[...getInstance().flatHeaders, ...getInstance().allColumns].forEach(\n    column => {\n      // Give columns/headers rendering power\n      column.render = makeRenderer(getInstance(), column)\n\n      // Give columns/headers a default getHeaderProps\n      column.getHeaderProps = makePropGetter(getHooks().getHeaderProps, {\n        instance: getInstance(),\n        column,\n      })\n\n      // Give columns/headers a default getFooterProps\n      column.getFooterProps = makePropGetter(getHooks().getFooterProps, {\n        instance: getInstance(),\n        column,\n      })\n    }\n  )\n\n  getInstance().headerGroups = getInstance().headerGroups.filter(\n    (headerGroup, i) => {\n      // Filter out any headers and headerGroups that don't have visible columns\n      headerGroup.headers = headerGroup.headers.filter(column => {\n        const recurse = headers =>\n          headers.filter(column => {\n            if (column.headers) {\n              return recurse(column.headers)\n            }\n            return column.isVisible\n          }).length\n        if (column.headers) {\n          return recurse(column.headers)\n        }\n        return column.isVisible\n      })\n\n      // Give headerGroups getRowProps\n      if (headerGroup.headers.length) {\n        headerGroup.getHeaderGroupProps = makePropGetter(\n          getHooks().getHeaderGroupProps,\n          { instance: getInstance(), headerGroup, index: i }\n        )\n\n        headerGroup.getFooterGroupProps = makePropGetter(\n          getHooks().getFooterGroupProps,\n          { instance: getInstance(), headerGroup, index: i }\n        )\n\n        return true\n      }\n\n      return false\n    }\n  )\n\n  getInstance().footerGroups = [...getInstance().headerGroups].reverse()\n\n  // The prepareRow function is absolutely necessary and MUST be called on\n  // any rows the user wishes to be displayed.\n\n  getInstance().prepareRow = React.useCallback(\n    row => {\n      row.getRowProps = makePropGetter(getHooks().getRowProps, {\n        instance: getInstance(),\n        row,\n      })\n\n      // Build the visible cells for each row\n      row.allCells = allColumns.map(column => {\n        const cell = {\n          column,\n          row,\n          value: row.values[column.id],\n        }\n\n        // Give each cell a getCellProps base\n        cell.getCellProps = makePropGetter(getHooks().getCellProps, {\n          instance: getInstance(),\n          cell,\n        })\n\n        // Give each cell a renderer function (supports multiple renderers)\n        cell.render = makeRenderer(getInstance(), column, {\n          row,\n          cell,\n        })\n\n        return cell\n      })\n\n      row.cells = visibleColumns.map(column =>\n        row.allCells.find(cell => cell.column.id === column.id)\n      )\n\n      // need to apply any row specific hooks (useExpanded requires this)\n      loopHooks(getHooks().prepareRow, row, { instance: getInstance() })\n    },\n    [getHooks, getInstance, allColumns, visibleColumns]\n  )\n\n  getInstance().getTableProps = makePropGetter(getHooks().getTableProps, {\n    instance: getInstance(),\n  })\n\n  getInstance().getTableBodyProps = makePropGetter(\n    getHooks().getTableBodyProps,\n    {\n      instance: getInstance(),\n    }\n  )\n\n  loopHooks(getHooks().useFinalInstance, getInstance())\n\n  return getInstance()\n}\n\nfunction calculateHeaderWidths(headers, left = 0) {\n  let sumTotalMinWidth = 0\n  let sumTotalWidth = 0\n  let sumTotalMaxWidth = 0\n  let sumTotalFlexWidth = 0\n\n  headers.forEach(header => {\n    let { headers: subHeaders } = header\n\n    header.totalLeft = left\n\n    if (subHeaders && subHeaders.length) {\n      const [\n        totalMinWidth,\n        totalWidth,\n        totalMaxWidth,\n        totalFlexWidth,\n      ] = calculateHeaderWidths(subHeaders, left)\n      header.totalMinWidth = totalMinWidth\n      header.totalWidth = totalWidth\n      header.totalMaxWidth = totalMaxWidth\n      header.totalFlexWidth = totalFlexWidth\n    } else {\n      header.totalMinWidth = header.minWidth\n      header.totalWidth = Math.min(\n        Math.max(header.minWidth, header.width),\n        header.maxWidth\n      )\n      header.totalMaxWidth = header.maxWidth\n      header.totalFlexWidth = header.canResize ? header.totalWidth : 0\n    }\n    if (header.isVisible) {\n      left += header.totalWidth\n      sumTotalMinWidth += header.totalMinWidth\n      sumTotalWidth += header.totalWidth\n      sumTotalMaxWidth += header.totalMaxWidth\n      sumTotalFlexWidth += header.totalFlexWidth\n    }\n  })\n\n  return [sumTotalMinWidth, sumTotalWidth, sumTotalMaxWidth, sumTotalFlexWidth]\n}\n\nfunction accessRowsForColumn({\n  data,\n  rows,\n  flatRows,\n  rowsById,\n  column,\n  getRowId,\n  getSubRows,\n  accessValueHooks,\n  getInstance,\n}) {\n  // Access the row's data column-by-column\n  // We do it this way so we can incrementally add materialized\n  // columns after the first pass and avoid excessive looping\n  const accessRow = (originalRow, rowIndex, depth = 0, parent, parentRows) => {\n    // Keep the original reference around\n    const original = originalRow\n\n    const id = getRowId(originalRow, rowIndex, parent)\n\n    let row = rowsById[id]\n\n    // If the row hasn't been created, let's make it\n    if (!row) {\n      row = {\n        id,\n        original,\n        index: rowIndex,\n        depth,\n        cells: [{}], // This is a dummy cell\n      }\n\n      // Override common array functions (and the dummy cell's getCellProps function)\n      // to show an error if it is accessed without calling prepareRow\n      row.cells.map = unpreparedAccessWarning\n      row.cells.filter = unpreparedAccessWarning\n      row.cells.forEach = unpreparedAccessWarning\n      row.cells[0].getCellProps = unpreparedAccessWarning\n\n      // Create the cells and values\n      row.values = {}\n\n      // Push this row into the parentRows array\n      parentRows.push(row)\n      // Keep track of every row in a flat array\n      flatRows.push(row)\n      // Also keep track of every row by its ID\n      rowsById[id] = row\n\n      // Get the original subrows\n      row.originalSubRows = getSubRows(originalRow, rowIndex)\n\n      // Then recursively access them\n      if (row.originalSubRows) {\n        const subRows = []\n        row.originalSubRows.forEach((d, i) =>\n          accessRow(d, i, depth + 1, row, subRows)\n        )\n        // Keep the new subRows array on the row\n        row.subRows = subRows\n      }\n    } else if (row.subRows) {\n      // If the row exists, then it's already been accessed\n      // Keep recursing, but don't worry about passing the\n      // accumlator array (those rows already exist)\n      row.originalSubRows.forEach((d, i) => accessRow(d, i, depth + 1, row))\n    }\n\n    // If the column has an accessor, use it to get a value\n    if (column.accessor) {\n      row.values[column.id] = column.accessor(originalRow, rowIndex, row)\n    }\n\n    // Allow plugins to manipulate the column value\n    row.values[column.id] = reduceHooks(\n      accessValueHooks,\n      row.values[column.id],\n      {\n        row,\n        column,\n        instance: getInstance(),\n      },\n      true\n    )\n  }\n\n  data.forEach((originalRow, rowIndex) =>\n    accessRow(originalRow, rowIndex, 0, undefined, rows)\n  )\n}\n","import React from 'react'\n\nimport { expandRows } from '../utils'\n\nimport {\n  useGetLatest,\n  actions,\n  useMountedLayoutEffect,\n  makePropGetter,\n  ensurePluginOrder,\n} from '../publicUtils'\n\n// Actions\nactions.resetExpanded = 'resetExpanded'\nactions.toggleRowExpanded = 'toggleRowExpanded'\nactions.toggleAllRowsExpanded = 'toggleAllRowsExpanded'\n\nexport const useExpanded = hooks => {\n  hooks.getToggleAllRowsExpandedProps = [defaultGetToggleAllRowsExpandedProps]\n  hooks.getToggleRowExpandedProps = [defaultGetToggleRowExpandedProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseExpanded.pluginName = 'useExpanded'\n\nconst defaultGetToggleAllRowsExpandedProps = (props, { instance }) => [\n  props,\n  {\n    onClick: e => {\n      instance.toggleAllRowsExpanded()\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    title: 'Toggle All Rows Expanded',\n  },\n]\n\nconst defaultGetToggleRowExpandedProps = (props, { row }) => [\n  props,\n  {\n    onClick: () => {\n      row.toggleRowExpanded()\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    title: 'Toggle Row Expanded',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      expanded: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetExpanded) {\n    return {\n      ...state,\n      expanded: instance.initialState.expanded || {},\n    }\n  }\n\n  if (action.type === actions.toggleAllRowsExpanded) {\n    const { value } = action\n    const { isAllRowsExpanded, rowsById } = instance\n\n    const expandAll = typeof value !== 'undefined' ? value : !isAllRowsExpanded\n\n    if (expandAll) {\n      const expanded = {}\n\n      Object.keys(rowsById).forEach(rowId => {\n        expanded[rowId] = true\n      })\n\n      return {\n        ...state,\n        expanded,\n      }\n    }\n\n    return {\n      ...state,\n      expanded: {},\n    }\n  }\n\n  if (action.type === actions.toggleRowExpanded) {\n    const { id, value: setExpanded } = action\n    const exists = state.expanded[id]\n\n    const shouldExist =\n      typeof setExpanded !== 'undefined' ? setExpanded : !exists\n\n    if (!exists && shouldExist) {\n      return {\n        ...state,\n        expanded: {\n          ...state.expanded,\n          [id]: true,\n        },\n      }\n    } else if (exists && !shouldExist) {\n      const { [id]: _, ...rest } = state.expanded\n      return {\n        ...state,\n        expanded: rest,\n      }\n    } else {\n      return state\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    rowsById,\n    manualExpandedKey = 'expanded',\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    autoResetExpanded = true,\n    getHooks,\n    plugins,\n    state: { expanded },\n    dispatch,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useSortBy', 'useGroupBy', 'usePivotColumns', 'useGlobalFilter'],\n    'useExpanded'\n  )\n\n  const getAutoResetExpanded = useGetLatest(autoResetExpanded)\n\n  let isAllRowsExpanded = Boolean(\n    Object.keys(rowsById).length && Object.keys(expanded).length\n  )\n\n  if (isAllRowsExpanded) {\n    if (Object.keys(rowsById).some(id => !expanded[id])) {\n      isAllRowsExpanded = false\n    }\n  }\n\n  // Bypass any effects from firing when this changes\n  useMountedLayoutEffect(() => {\n    if (getAutoResetExpanded()) {\n      dispatch({ type: actions.resetExpanded })\n    }\n  }, [dispatch, data])\n\n  const toggleRowExpanded = React.useCallback(\n    (id, value) => {\n      dispatch({ type: actions.toggleRowExpanded, id, value })\n    },\n    [dispatch]\n  )\n\n  const toggleAllRowsExpanded = React.useCallback(\n    value => dispatch({ type: actions.toggleAllRowsExpanded, value }),\n    [dispatch]\n  )\n\n  const expandedRows = React.useMemo(() => {\n    if (paginateExpandedRows) {\n      return expandRows(rows, { manualExpandedKey, expanded, expandSubRows })\n    }\n\n    return rows\n  }, [paginateExpandedRows, rows, manualExpandedKey, expanded, expandSubRows])\n\n  const expandedDepth = React.useMemo(() => findExpandedDepth(expanded), [\n    expanded,\n  ])\n\n  const getInstance = useGetLatest(instance)\n\n  const getToggleAllRowsExpandedProps = makePropGetter(\n    getHooks().getToggleAllRowsExpandedProps,\n    { instance: getInstance() }\n  )\n\n  Object.assign(instance, {\n    preExpandedRows: rows,\n    expandedRows,\n    rows: expandedRows,\n    expandedDepth,\n    isAllRowsExpanded,\n    toggleRowExpanded,\n    toggleAllRowsExpanded,\n    getToggleAllRowsExpandedProps,\n  })\n}\n\nfunction prepareRow(row, { instance: { getHooks }, instance }) {\n  row.toggleRowExpanded = set => instance.toggleRowExpanded(row.id, set)\n\n  row.getToggleRowExpandedProps = makePropGetter(\n    getHooks().getToggleRowExpandedProps,\n    {\n      instance,\n      row,\n    }\n  )\n}\n\nfunction findExpandedDepth(expanded) {\n  let maxDepth = 0\n\n  Object.keys(expanded).forEach(id => {\n    const splitId = id.split('.')\n    maxDepth = Math.max(maxDepth, splitId.length)\n  })\n\n  return maxDepth\n}\n","export const text = (rows, ids, filterValue) => {\n  rows = rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return String(rowValue)\n        .toLowerCase()\n        .includes(String(filterValue).toLowerCase())\n    })\n  })\n  return rows\n}\n\ntext.autoRemove = val => !val\n\nexport const exactText = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue).toLowerCase() === String(filterValue).toLowerCase()\n        : true\n    })\n  })\n}\n\nexactText.autoRemove = val => !val\n\nexport const exactTextCase = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue) === String(filterValue)\n        : true\n    })\n  })\n}\n\nexactTextCase.autoRemove = val => !val\n\nexport const includes = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return filterValue.includes(rowValue)\n    })\n  })\n}\n\nincludes.autoRemove = val => !val || !val.length\n\nexport const includesAll = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return (\n        rowValue &&\n        rowValue.length &&\n        filterValue.every(val => rowValue.includes(val))\n      )\n    })\n  })\n}\n\nincludesAll.autoRemove = val => !val || !val.length\n\nexport const exact = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue === filterValue\n    })\n  })\n}\n\nexact.autoRemove = val => typeof val === 'undefined'\n\nexport const equals = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      // eslint-disable-next-line eqeqeq\n      return rowValue == filterValue\n    })\n  })\n}\n\nequals.autoRemove = val => val == null\n\nexport const between = (rows, ids, filterValue) => {\n  let [min, max] = filterValue || []\n\n  min = typeof min === 'number' ? min : -Infinity\n  max = typeof max === 'number' ? max : Infinity\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue >= min && rowValue <= max\n    })\n  })\n}\n\nbetween.autoRemove = val =>\n  !val || (typeof val[0] !== 'number' && typeof val[1] !== 'number')\n","import React from 'react'\n\nimport {\n  getFirstDefined,\n  getFilterMethod,\n  shouldAutoRemoveFilter,\n} from '../utils'\n\nimport {\n  actions,\n  useGetLatest,\n  functionalUpdate,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport * as filterTypes from '../filterTypes'\n\n// Actions\nactions.resetFilters = 'resetFilters'\nactions.setFilter = 'setFilter'\nactions.setAllFilters = 'setAllFilters'\n\nexport const useFilters = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseFilters.pluginName = 'useFilters'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      filters: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetFilters) {\n    return {\n      ...state,\n      filters: instance.initialState.filters || [],\n    }\n  }\n\n  if (action.type === actions.setFilter) {\n    const { columnId, filterValue } = action\n    const { allColumns, filterTypes: userFilterTypes } = instance\n\n    const column = allColumns.find(d => d.id === columnId)\n\n    if (!column) {\n      throw new Error(\n        `React-Table: Could not find a column with id: ${columnId}`\n      )\n    }\n\n    const filterMethod = getFilterMethod(\n      column.filter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    const previousfilter = state.filters.find(d => d.id === columnId)\n\n    const newFilter = functionalUpdate(\n      filterValue,\n      previousfilter && previousfilter.value\n    )\n\n    //\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter, column)) {\n      return {\n        ...state,\n        filters: state.filters.filter(d => d.id !== columnId),\n      }\n    }\n\n    if (previousfilter) {\n      return {\n        ...state,\n        filters: state.filters.map(d => {\n          if (d.id === columnId) {\n            return { id: columnId, value: newFilter }\n          }\n          return d\n        }),\n      }\n    }\n\n    return {\n      ...state,\n      filters: [...state.filters, { id: columnId, value: newFilter }],\n    }\n  }\n\n  if (action.type === actions.setAllFilters) {\n    const { filters } = action\n    const { allColumns, filterTypes: userFilterTypes } = instance\n\n    return {\n      ...state,\n      // Filter out undefined values\n      filters: functionalUpdate(filters, state.filters).filter(filter => {\n        const column = allColumns.find(d => d.id === filter.id)\n        const filterMethod = getFilterMethod(\n          column.filter,\n          userFilterTypes || {},\n          filterTypes\n        )\n\n        if (\n          shouldAutoRemoveFilter(filterMethod.autoRemove, filter.value, column)\n        ) {\n          return false\n        }\n        return true\n      }),\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    filterTypes: userFilterTypes,\n    manualFilters,\n    defaultCanFilter = false,\n    disableFilters,\n    state: { filters },\n    dispatch,\n    autoResetFilters = true,\n  } = instance\n\n  const setFilter = React.useCallback(\n    (columnId, filterValue) => {\n      dispatch({ type: actions.setFilter, columnId, filterValue })\n    },\n    [dispatch]\n  )\n\n  const setAllFilters = React.useCallback(\n    filters => {\n      dispatch({\n        type: actions.setAllFilters,\n        filters,\n      })\n    },\n    [dispatch]\n  )\n\n  allColumns.forEach(column => {\n    const {\n      id,\n      accessor,\n      defaultCanFilter: columnDefaultCanFilter,\n      disableFilters: columnDisableFilters,\n    } = column\n\n    // Determine if a column is filterable\n    column.canFilter = accessor\n      ? getFirstDefined(\n          columnDisableFilters === true ? false : undefined,\n          disableFilters === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(columnDefaultCanFilter, defaultCanFilter, false)\n\n    // Provide the column a way of updating the filter value\n    column.setFilter = val => setFilter(column.id, val)\n\n    // Provide the current filter value to the column for\n    // convenience\n    const found = filters.find(d => d.id === id)\n    column.filterValue = found && found.value\n  })\n\n  const [\n    filteredRows,\n    filteredFlatRows,\n    filteredRowsById,\n  ] = React.useMemo(() => {\n    if (manualFilters || !filters.length) {\n      return [rows, flatRows, rowsById]\n    }\n\n    const filteredFlatRows = []\n    const filteredRowsById = {}\n\n    // Filters top level and nested rows\n    const filterRows = (rows, depth = 0) => {\n      let filteredRows = rows\n\n      filteredRows = filters.reduce(\n        (filteredSoFar, { id: columnId, value: filterValue }) => {\n          // Find the filters column\n          const column = allColumns.find(d => d.id === columnId)\n\n          if (!column) {\n            return filteredSoFar\n          }\n\n          if (depth === 0) {\n            column.preFilteredRows = filteredSoFar\n          }\n\n          const filterMethod = getFilterMethod(\n            column.filter,\n            userFilterTypes || {},\n            filterTypes\n          )\n\n          if (!filterMethod) {\n            console.warn(\n              `Could not find a valid 'column.filter' for column with the ID: ${column.id}.`\n            )\n            return filteredSoFar\n          }\n\n          // Pass the rows, id, filterValue and column to the filterMethod\n          // to get the filtered rows back\n          column.filteredRows = filterMethod(\n            filteredSoFar,\n            [columnId],\n            filterValue\n          )\n\n          return column.filteredRows\n        },\n        rows\n      )\n\n      // Apply the filter to any subRows\n      // We technically could do this recursively in the above loop,\n      // but that would severely hinder the API for the user, since they\n      // would be required to do that recursion in some scenarios\n      filteredRows = filteredRows.map(row => {\n        filteredFlatRows.push(row)\n        filteredRowsById[row.id] = row\n        if (!row.subRows) {\n          return row\n        }\n        return {\n          ...row,\n          subRows:\n            row.subRows && row.subRows.length > 0\n              ? filterRows(row.subRows, depth + 1)\n              : row.subRows,\n        }\n      })\n\n      return filteredRows\n    }\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\n  }, [\n    manualFilters,\n    filters,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    userFilterTypes,\n  ])\n\n  React.useMemo(() => {\n    // Now that each filtered column has it's partially filtered rows,\n    // lets assign the final filtered rows to all of the other columns\n    const nonFilteredColumns = allColumns.filter(\n      column => !filters.find(d => d.id === column.id)\n    )\n\n    // This essentially enables faceted filter options to be built easily\n    // using every column's preFilteredRows value\n    nonFilteredColumns.forEach(column => {\n      column.preFilteredRows = filteredRows\n      column.filteredRows = filteredRows\n    })\n  }, [filteredRows, filters, allColumns])\n\n  const getAutoResetFilters = useGetLatest(autoResetFilters)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetFilters()) {\n      dispatch({ type: actions.resetFilters })\n    }\n  }, [dispatch, manualFilters ? null : data])\n\n  Object.assign(instance, {\n    preFilteredRows: rows,\n    preFilteredFlatRows: flatRows,\n    preFilteredRowsById: rowsById,\n    filteredRows,\n    filteredFlatRows,\n    filteredRowsById,\n    rows: filteredRows,\n    flatRows: filteredFlatRows,\n    rowsById: filteredRowsById,\n    setFilter,\n    setAllFilters,\n  })\n}\n","import React from 'react'\n\nimport { getFilterMethod, shouldAutoRemoveFilter } from '../utils'\n\nimport {\n  actions,\n  useMountedLayoutEffect,\n  functionalUpdate,\n  useGetLatest,\n} from '../publicUtils'\n\nimport * as filterTypes from '../filterTypes'\n\n// Actions\nactions.resetGlobalFilter = 'resetGlobalFilter'\nactions.setGlobalFilter = 'setGlobalFilter'\n\nexport const useGlobalFilter = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseGlobalFilter.pluginName = 'useGlobalFilter'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.resetGlobalFilter) {\n    return {\n      ...state,\n      globalFilter: instance.initialState.globalFilter || undefined,\n    }\n  }\n\n  if (action.type === actions.setGlobalFilter) {\n    const { filterValue } = action\n    const { userFilterTypes } = instance\n\n    const filterMethod = getFilterMethod(\n      instance.globalFilter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    const newFilter = functionalUpdate(filterValue, state.globalFilter)\n\n    //\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter)) {\n      const { globalFilter, ...stateWithoutGlobalFilter } = state\n      return stateWithoutGlobalFilter\n    }\n\n    return {\n      ...state,\n      globalFilter: newFilter,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    filterTypes: userFilterTypes,\n    globalFilter,\n    manualGlobalFilter,\n    state: { globalFilter: globalFilterValue },\n    dispatch,\n    autoResetGlobalFilter = true,\n  } = instance\n\n  const setGlobalFilter = React.useCallback(\n    filterValue => {\n      dispatch({ type: actions.setGlobalFilter, filterValue })\n    },\n    [dispatch]\n  )\n\n  // TODO: Create a filter cache for incremental high speed multi-filtering\n  // This gets pretty complicated pretty fast, since you have to maintain a\n  // cache for each row group (top-level rows, and each row's recursive subrows)\n  // This would make multi-filtering a lot faster though. Too far?\n\n  const [\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    globalFilteredRowsById,\n  ] = React.useMemo(() => {\n    if (manualGlobalFilter || typeof globalFilterValue === 'undefined') {\n      return [rows, flatRows, rowsById]\n    }\n\n    const filteredFlatRows = []\n    const filteredRowsById = {}\n\n    const filterMethod = getFilterMethod(\n      globalFilter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    if (!filterMethod) {\n      console.warn(`Could not find a valid 'globalFilter' option.`)\n      return rows\n    }\n\n    // Filters top level and nested rows\n    const filterRows = filteredRows => {\n      return filterMethod(\n        filteredRows,\n        allColumns.map(d => d.id),\n        globalFilterValue\n      ).map(row => {\n        filteredFlatRows.push(row)\n        filteredRowsById[row.id] = row\n\n        return {\n          ...row,\n          subRows:\n            row.subRows && row.subRows.length\n              ? filterRows(row.subRows)\n              : row.subRows,\n        }\n      })\n    }\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\n  }, [\n    manualGlobalFilter,\n    globalFilterValue,\n    globalFilter,\n    userFilterTypes,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n  ])\n\n  const getAutoResetGlobalFilter = useGetLatest(autoResetGlobalFilter)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetGlobalFilter()) {\n      dispatch({ type: actions.resetGlobalFilter })\n    }\n  }, [dispatch, manualGlobalFilter ? null : data])\n\n  Object.assign(instance, {\n    preGlobalFilteredRows: rows,\n    preGlobalFilteredFlatRows: flatRows,\n    preGlobalFilteredRowsById: rowsById,\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    globalFilteredRowsById,\n    rows: globalFilteredRows,\n    flatRows: globalFilteredFlatRows,\n    rowsById: globalFilteredRowsById,\n    setGlobalFilter,\n  })\n}\n","export function sum(values, aggregatedValues) {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return aggregatedValues.reduce(\n    (sum, next) => sum + (typeof next === 'number' ? next : 0),\n    0\n  )\n}\n\nexport function min(values) {\n  let min = 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n    }\n  })\n\n  return min\n}\n\nexport function max(values) {\n  let max = 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      max = Math.max(max, value)\n    }\n  })\n\n  return max\n}\n\nexport function minMax(values) {\n  let min = 0\n  let max = 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return `${min}..${max}`\n}\n\nexport function average(values) {\n  return sum(null, values) / values.length\n}\n\nexport function median(values) {\n  if (!values.length) {\n    return null\n  }\n\n  let min = 0\n  let max = 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return (min + max) / 2\n}\n\nexport function unique(values) {\n  return [...new Set(values).values()]\n}\n\nexport function uniqueCount(values) {\n  return new Set(values).size\n}\n\nexport function count(values) {\n  return values.length\n}\n","import React from 'react'\n\nimport * as aggregations from '../aggregations'\n\nimport { getFirstDefined, flattenBy } from '../utils'\n\nimport {\n  actions,\n  makePropGetter,\n  defaultGroupByFn,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nconst emptyArray = []\nconst emptyObject = {}\n\n// Actions\nactions.resetGroupBy = 'resetGroupBy'\nactions.toggleGroupBy = 'toggleGroupBy'\n\nexport const useGroupBy = hooks => {\n  hooks.getGroupByToggleProps = [defaultGetGroupByToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.visibleColumnsDeps.push((deps, { instance }) => [\n    ...deps,\n    instance.state.groupBy,\n  ])\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseGroupBy.pluginName = 'useGroupBy'\n\nconst defaultGetGroupByToggleProps = (props, { header }) => [\n  props,\n  {\n    onClick: header.canGroupBy\n      ? e => {\n          e.persist()\n          header.toggleGroupBy()\n        }\n      : undefined,\n    style: {\n      cursor: header.canGroupBy ? 'pointer' : undefined,\n    },\n    title: 'Toggle GroupBy',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      groupBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetGroupBy) {\n    return {\n      ...state,\n      groupBy: instance.initialState.groupBy || [],\n    }\n  }\n\n  if (action.type === actions.toggleGroupBy) {\n    const { columnId, value: setGroupBy } = action\n\n    const resolvedGroupBy =\n      typeof setGroupBy !== 'undefined'\n        ? setGroupBy\n        : !state.groupBy.includes(columnId)\n\n    if (resolvedGroupBy) {\n      return {\n        ...state,\n        groupBy: [...state.groupBy, columnId],\n      }\n    }\n\n    return {\n      ...state,\n      groupBy: state.groupBy.filter(d => d !== columnId),\n    }\n  }\n}\n\nfunction visibleColumns(\n  columns,\n  {\n    instance: {\n      state: { groupBy },\n    },\n  }\n) {\n  // Sort grouped columns to the start of the column list\n  // before the headers are built\n\n  const groupByColumns = groupBy\n    .map(g => columns.find(col => col.id === g))\n    .filter(Boolean)\n\n  const nonGroupByColumns = columns.filter(col => !groupBy.includes(col.id))\n\n  columns = [...groupByColumns, ...nonGroupByColumns]\n\n  columns.forEach(column => {\n    column.isGrouped = groupBy.includes(column.id)\n    column.groupedIndex = groupBy.indexOf(column.id)\n  })\n\n  return columns\n}\n\nconst defaultUserAggregations = {}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    flatHeaders,\n    groupByFn = defaultGroupByFn,\n    manualGroupBy,\n    aggregations: userAggregations = defaultUserAggregations,\n    plugins,\n    state: { groupBy },\n    dispatch,\n    autoResetGroupBy = true,\n    disableGroupBy,\n    defaultCanGroupBy,\n    getHooks,\n  } = instance\n\n  ensurePluginOrder(plugins, ['useFilters'], 'useGroupBy')\n\n  const getInstance = useGetLatest(instance)\n\n  allColumns.forEach(column => {\n    const {\n      accessor,\n      defaultGroupBy: defaultColumnGroupBy,\n      disableGroupBy: columnDisableGroupBy,\n    } = column\n\n    column.canGroupBy = accessor\n      ? getFirstDefined(\n          column.canGroupBy,\n          columnDisableGroupBy === true ? false : undefined,\n          disableGroupBy === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(\n          column.canGroupBy,\n          defaultColumnGroupBy,\n          defaultCanGroupBy,\n          false\n        )\n\n    if (column.canGroupBy) {\n      column.toggleGroupBy = () => instance.toggleGroupBy(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const toggleGroupBy = React.useCallback(\n    (columnId, value) => {\n      dispatch({ type: actions.toggleGroupBy, columnId, value })\n    },\n    [dispatch]\n  )\n\n  flatHeaders.forEach(header => {\n    header.getGroupByToggleProps = makePropGetter(\n      getHooks().getGroupByToggleProps,\n      { instance: getInstance(), header }\n    )\n  })\n\n  const [\n    groupedRows,\n    groupedFlatRows,\n    groupedRowsById,\n    onlyGroupedFlatRows,\n    onlyGroupedRowsById,\n    nonGroupedFlatRows,\n    nonGroupedRowsById,\n  ] = React.useMemo(() => {\n    if (manualGroupBy || !groupBy.length) {\n      return [\n        rows,\n        flatRows,\n        rowsById,\n        emptyArray,\n        emptyObject,\n        flatRows,\n        rowsById,\n      ]\n    }\n\n    // Ensure that the list of filtered columns exist\n    const existingGroupBy = groupBy.filter(g =>\n      allColumns.find(col => col.id === g)\n    )\n\n    // Find the columns that can or are aggregating\n    // Uses each column to aggregate rows into a single value\n    const aggregateRowsToValues = (leafRows, groupedRows, depth) => {\n      const values = {}\n\n      allColumns.forEach(column => {\n        // Don't aggregate columns that are in the groupBy\n        if (existingGroupBy.includes(column.id)) {\n          values[column.id] = groupedRows[0]\n            ? groupedRows[0].values[column.id]\n            : null\n          return\n        }\n\n        // Get the columnValues to aggregate\n        const groupedValues = groupedRows.map(row => row.values[column.id])\n\n        // Get the columnValues to aggregate\n        const leafValues = leafRows.map(row => {\n          let columnValue = row.values[column.id]\n\n          if (!depth && column.aggregatedValue) {\n            const aggregateValueFn =\n              typeof column.aggregateValue === 'function'\n                ? column.aggregateValue\n                : userAggregations[column.aggregateValue] ||\n                  aggregations[column.aggregateValue]\n\n            if (!aggregateValueFn) {\n              console.info({ column })\n              throw new Error(\n                `React Table: Invalid column.aggregateValue option for column listed above`\n              )\n            }\n\n            columnValue = aggregateValueFn(columnValue, row, column)\n          }\n          return columnValue\n        })\n\n        // Aggregate the values\n        let aggregateFn =\n          typeof column.aggregate === 'function'\n            ? column.aggregate\n            : userAggregations[column.aggregate] ||\n              aggregations[column.aggregate]\n\n        if (aggregateFn) {\n          values[column.id] = aggregateFn(leafValues, groupedValues)\n        } else if (column.aggregate) {\n          console.info({ column })\n          throw new Error(\n            `React Table: Invalid column.aggregate option for column listed above`\n          )\n        } else {\n          values[column.id] = null\n        }\n      })\n\n      return values\n    }\n\n    let groupedFlatRows = []\n    const groupedRowsById = {}\n    const onlyGroupedFlatRows = []\n    const onlyGroupedRowsById = {}\n    const nonGroupedFlatRows = []\n    const nonGroupedRowsById = {}\n\n    // Recursively group the data\n    const groupUpRecursively = (rows, depth = 0, parentId) => {\n      // This is the last level, just return the rows\n      if (depth === existingGroupBy.length) {\n        return rows\n      }\n\n      const columnId = existingGroupBy[depth]\n\n      // Group the rows together for this level\n      let rowGroupsMap = groupByFn(rows, columnId)\n\n      // Peform aggregations for each group\n      const aggregatedGroupedRows = Object.entries(rowGroupsMap).map(\n        ([groupByVal, groupedRows], index) => {\n          let id = `${columnId}:${groupByVal}`\n          id = parentId ? `${parentId}>${id}` : id\n\n          // First, Recurse to group sub rows before aggregation\n          const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n          // Flatten the leaf rows of the rows in this group\n          const leafRows = depth\n            ? flattenBy(groupedRows, 'leafRows')\n            : groupedRows\n\n          const values = aggregateRowsToValues(leafRows, groupedRows, depth)\n\n          const row = {\n            id,\n            isGrouped: true,\n            groupByID: columnId,\n            groupByVal,\n            values,\n            subRows,\n            leafRows,\n            depth,\n            index,\n          }\n\n          subRows.forEach(subRow => {\n            groupedFlatRows.push(subRow)\n            groupedRowsById[subRow.id] = subRow\n            if (subRow.isGrouped) {\n              onlyGroupedFlatRows.push(subRow)\n              onlyGroupedRowsById[subRow.id] = subRow\n            } else {\n              nonGroupedFlatRows.push(subRow)\n              nonGroupedRowsById[subRow.id] = subRow\n            }\n          })\n\n          return row\n        }\n      )\n\n      return aggregatedGroupedRows\n    }\n\n    const groupedRows = groupUpRecursively(rows)\n\n    groupedRows.forEach(subRow => {\n      groupedFlatRows.push(subRow)\n      groupedRowsById[subRow.id] = subRow\n      if (subRow.isGrouped) {\n        onlyGroupedFlatRows.push(subRow)\n        onlyGroupedRowsById[subRow.id] = subRow\n      } else {\n        nonGroupedFlatRows.push(subRow)\n        nonGroupedRowsById[subRow.id] = subRow\n      }\n    })\n\n    // Assign the new data\n    return [\n      groupedRows,\n      groupedFlatRows,\n      groupedRowsById,\n      onlyGroupedFlatRows,\n      onlyGroupedRowsById,\n      nonGroupedFlatRows,\n      nonGroupedRowsById,\n    ]\n  }, [\n    manualGroupBy,\n    groupBy,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    userAggregations,\n    groupByFn,\n  ])\n\n  const getAutoResetGroupBy = useGetLatest(autoResetGroupBy)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetGroupBy()) {\n      dispatch({ type: actions.resetGroupBy })\n    }\n  }, [dispatch, manualGroupBy ? null : data])\n\n  Object.assign(instance, {\n    preGroupedRows: rows,\n    preGroupedFlatRow: flatRows,\n    preGroupedRowsById: rowsById,\n    groupedRows,\n    groupedFlatRows,\n    groupedRowsById,\n    onlyGroupedFlatRows,\n    onlyGroupedRowsById,\n    nonGroupedFlatRows,\n    nonGroupedRowsById,\n    rows: groupedRows,\n    flatRows: groupedFlatRows,\n    rowsById: groupedRowsById,\n    toggleGroupBy,\n  })\n}\n\nfunction prepareRow(row) {\n  row.allCells.forEach(cell => {\n    // Grouped cells are in the groupBy and the pivot cell for the row\n    cell.isGrouped = cell.column.isGrouped && cell.column.id === row.groupByID\n    // Placeholder cells are any columns in the groupBy that are not grouped\n    cell.isPlaceholder = !cell.isGrouped && cell.column.isGrouped\n    // Aggregated cells are not grouped, not repeated, but still have subRows\n    cell.isAggregated = !cell.isGrouped && !cell.isPlaceholder && row.canExpand\n  })\n}\n","const reSplitAlphaNumeric = /([0-9]+)/gm\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nexport const alphanumeric = (rowA, rowB, columnId) => {\n  let a = getRowValueByColumnID(rowA, columnId)\n  let b = getRowValueByColumnID(rowB, columnId)\n  // Force to strings (or \"\" for unsupported types)\n  a = toString(a)\n  b = toString(b)\n\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  a = a.split(reSplitAlphaNumeric).filter(Boolean)\n  b = b.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    let aa = a.shift()\n    let bb = b.shift()\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\nexport function datetime(rowA, rowB, columnId) {\n  let a = getRowValueByColumnID(rowA, columnId)\n  let b = getRowValueByColumnID(rowB, columnId)\n\n  a = a.getTime()\n  b = b.getTime()\n\n  return compareBasic(a, b)\n}\n\nexport function basic(rowA, rowB, columnId) {\n  let a = getRowValueByColumnID(rowA, columnId)\n  let b = getRowValueByColumnID(rowB, columnId)\n\n  return compareBasic(a, b)\n}\n\n// Utils\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction getRowValueByColumnID(row, columnId) {\n  return row.values[columnId]\n}\n\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n","import React from 'react'\n\nimport {\n  actions,\n  ensurePluginOrder,\n  defaultColumn,\n  makePropGetter,\n  defaultOrderByFn,\n  useGetLatest,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport { getFirstDefined, isFunction } from '../utils'\n\nimport * as sortTypes from '../sortTypes'\n\n// Actions\nactions.resetSortBy = 'resetSortBy'\nactions.toggleSortBy = 'toggleSortBy'\nactions.clearSortBy = 'clearSortBy'\n\ndefaultColumn.sortType = 'alphanumeric'\ndefaultColumn.sortDescFirst = false\n\nexport const useSortBy = hooks => {\n  hooks.getSortByToggleProps = [defaultGetSortByToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseSortBy.pluginName = 'useSortBy'\n\nconst defaultGetSortByToggleProps = (props, { instance, column }) => {\n  const { isMultiSortEvent = e => e.shiftKey } = instance\n\n  return [\n    props,\n    {\n      onClick: column.canSort\n        ? e => {\n            e.persist()\n            column.toggleSortBy(\n              undefined,\n              !instance.disableMultiSort && isMultiSortEvent(e)\n            )\n          }\n        : undefined,\n      style: {\n        cursor: column.canSort ? 'pointer' : undefined,\n      },\n      title: column.canSort ? 'Toggle SortBy' : undefined,\n    },\n  ]\n}\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      sortBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSortBy) {\n    return {\n      ...state,\n      sortBy: instance.initialState.sortBy || [],\n    }\n  }\n\n  if (action.type === actions.clearSortBy) {\n    const { sortBy } = state\n    const newSortBy = sortBy.filter(d => d.id !== action.columnId)\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n\n  if (action.type === actions.toggleSortBy) {\n    const { columnId, desc, multi } = action\n\n    const {\n      allColumns,\n      disableMultiSort,\n      disableSortRemove,\n      disableMultiRemove,\n      maxMultiSortColCount = Number.MAX_SAFE_INTEGER,\n    } = instance\n\n    const { sortBy } = state\n\n    // Find the column for this columnId\n    const column = allColumns.find(d => d.id === columnId)\n    const { sortDescFirst } = column\n\n    // Find any existing sortBy for this column\n    const existingSortBy = sortBy.find(d => d.id === columnId)\n    const existingIndex = sortBy.findIndex(d => d.id === columnId)\n    const hasDescDefined = typeof desc !== 'undefined' && desc !== null\n\n    let newSortBy = []\n\n    // What should we do with this sort action?\n    let sortAction\n\n    if (!disableMultiSort && multi) {\n      if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'add'\n      }\n    } else {\n      // Normal mode\n      if (existingIndex !== sortBy.length - 1) {\n        sortAction = 'replace'\n      } else if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'replace'\n      }\n    }\n\n    // Handle toggle states that will remove the sortBy\n    if (\n      sortAction === 'toggle' && // Must be toggling\n      !disableSortRemove && // If disableSortRemove, disable in general\n      !hasDescDefined && // Must not be setting desc\n      (multi ? !disableMultiRemove : true) && // If multi, don't allow if disableMultiRemove\n      ((existingSortBy && // Finally, detect if it should indeed be removed\n        existingSortBy.desc &&\n        !sortDescFirst) ||\n        (!existingSortBy.desc && sortDescFirst))\n    ) {\n      sortAction = 'remove'\n    }\n\n    if (sortAction === 'replace') {\n      newSortBy = [\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n    } else if (sortAction === 'add') {\n      newSortBy = [\n        ...sortBy,\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n      // Take latest n columns\n      newSortBy.splice(0, newSortBy.length - maxMultiSortColCount)\n    } else if (sortAction === 'toggle') {\n      // This flips (or sets) the\n      newSortBy = sortBy.map(d => {\n        if (d.id === columnId) {\n          return {\n            ...d,\n            desc: hasDescDefined ? desc : !existingSortBy.desc,\n          }\n        }\n        return d\n      })\n    } else if (sortAction === 'remove') {\n      newSortBy = sortBy.filter(d => d.id !== columnId)\n    }\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    allColumns,\n    orderByFn = defaultOrderByFn,\n    sortTypes: userSortTypes,\n    manualSortBy,\n    defaultCanSort,\n    disableSortBy,\n    flatHeaders,\n    state: { sortBy },\n    dispatch,\n    plugins,\n    getHooks,\n    autoResetSortBy = true,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGlobalFilter', 'useGroupBy', 'usePivotColumns'],\n    'useSortBy'\n  )\n\n  // Updates sorting based on a columnId, desc flag and multi flag\n  const toggleSortBy = React.useCallback(\n    (columnId, desc, multi) => {\n      dispatch({ type: actions.toggleSortBy, columnId, desc, multi })\n    },\n    [dispatch]\n  )\n\n  // use reference to avoid memory leak in #1608\n  const getInstance = useGetLatest(instance)\n\n  // Add the getSortByToggleProps method to columns and headers\n  flatHeaders.forEach(column => {\n    const {\n      accessor,\n      canSort: defaultColumnCanSort,\n      disableSortBy: columnDisableSortBy,\n      id,\n    } = column\n\n    const canSort = accessor\n      ? getFirstDefined(\n          columnDisableSortBy === true ? false : undefined,\n          disableSortBy === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(defaultCanSort, defaultColumnCanSort, false)\n\n    column.canSort = canSort\n\n    if (column.canSort) {\n      column.toggleSortBy = (desc, multi) =>\n        toggleSortBy(column.id, desc, multi)\n\n      column.clearSortBy = () => {\n        dispatch({ type: actions.clearSortBy, columnId: column.id })\n      }\n    }\n\n    column.getSortByToggleProps = makePropGetter(\n      getHooks().getSortByToggleProps,\n      {\n        instance: getInstance(),\n        column,\n      }\n    )\n\n    const columnSort = sortBy.find(d => d.id === id)\n    column.isSorted = !!columnSort\n    column.sortedIndex = sortBy.findIndex(d => d.id === id)\n    column.isSortedDesc = column.isSorted ? columnSort.desc : undefined\n  })\n\n  const [sortedRows, sortedFlatRows] = React.useMemo(() => {\n    if (manualSortBy || !sortBy.length) {\n      return [rows, flatRows]\n    }\n\n    const sortedFlatRows = []\n\n    // Filter out sortBys that correspond to non existing columns\n    const availableSortBy = sortBy.filter(sort =>\n      allColumns.find(col => col.id === sort.id)\n    )\n\n    const sortData = rows => {\n      // Use the orderByFn to compose multiple sortBy's together.\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      const sortedData = orderByFn(\n        rows,\n        availableSortBy.map(sort => {\n          // Support custom sorting methods for each column\n          const column = allColumns.find(d => d.id === sort.id)\n\n          if (!column) {\n            throw new Error(\n              `React-Table: Could not find a column with id: ${sort.id} while sorting`\n            )\n          }\n\n          const { sortType } = column\n\n          // Look up sortBy functions in this order:\n          // column function\n          // column string lookup on user sortType\n          // column string lookup on built-in sortType\n          // default function\n          // default string lookup on user sortType\n          // default string lookup on built-in sortType\n          const sortMethod =\n            isFunction(sortType) ||\n            (userSortTypes || {})[sortType] ||\n            sortTypes[sortType]\n\n          if (!sortMethod) {\n            throw new Error(\n              `React-Table: Could not find a valid sortType of '${sortType}' for column '${sort.id}'.`\n            )\n          }\n\n          // Return the correct sortFn.\n          // This function should always return in ascending order\n          return (a, b) => sortMethod(a, b, sort.id, sort.desc)\n        }),\n        // Map the directions\n        availableSortBy.map(sort => {\n          // Detect and use the sortInverted option\n          const column = allColumns.find(d => d.id === sort.id)\n\n          if (column && column.sortInverted) {\n            return sort.desc\n          }\n\n          return !sort.desc\n        })\n      )\n\n      // If there are sub-rows, sort them\n      sortedData.forEach(row => {\n        sortedFlatRows.push(row)\n        if (!row.subRows || row.subRows.length <= 1) {\n          return\n        }\n        row.subRows = sortData(row.subRows)\n      })\n\n      return sortedData\n    }\n\n    return [sortData(rows), sortedFlatRows]\n  }, [\n    manualSortBy,\n    sortBy,\n    rows,\n    flatRows,\n    allColumns,\n    orderByFn,\n    userSortTypes,\n  ])\n\n  const getAutoResetSortBy = useGetLatest(autoResetSortBy)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSortBy()) {\n      dispatch({ type: actions.resetSortBy })\n    }\n  }, [manualSortBy ? null : data])\n\n  Object.assign(instance, {\n    preSortedRows: rows,\n    preSortedFlatRows: flatRows,\n    sortedRows,\n    sortedFlatRows,\n    rows: sortedRows,\n    flatRows: sortedFlatRows,\n    toggleSortBy,\n  })\n}\n","import React from 'react'\n\n//\n\nimport {\n  actions,\n  ensurePluginOrder,\n  functionalUpdate,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nimport { expandRows } from '../utils'\n\nconst pluginName = 'usePagination'\n\n// Actions\nactions.resetPage = 'resetPage'\nactions.gotoPage = 'gotoPage'\nactions.setPageSize = 'setPageSize'\n\nexport const usePagination = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nusePagination.pluginName = pluginName\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      pageSize: 10,\n      pageIndex: 0,\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetPage) {\n    return {\n      ...state,\n      pageIndex: instance.initialState.pageIndex || 0,\n    }\n  }\n\n  if (action.type === actions.gotoPage) {\n    const { pageCount } = instance\n    const newPageIndex = functionalUpdate(action.pageIndex, state.pageIndex)\n\n    if (newPageIndex < 0 || newPageIndex > pageCount - 1) {\n      return state\n    }\n    return {\n      ...state,\n      pageIndex: newPageIndex,\n    }\n  }\n\n  if (action.type === actions.setPageSize) {\n    const { pageSize } = action\n    const topRowIndex = state.pageSize * state.pageIndex\n    const pageIndex = Math.floor(topRowIndex / pageSize)\n\n    return {\n      ...state,\n      pageIndex,\n      pageSize,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    rows,\n    autoResetPage = true,\n    manualExpandedKey = 'expanded',\n    plugins,\n    pageCount: userPageCount,\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    state: {\n      pageSize,\n      pageIndex,\n      expanded,\n      globalFilter,\n      filters,\n      groupBy,\n      sortBy,\n    },\n    dispatch,\n    data,\n    manualPagination,\n    manualGlobalFilter,\n    manualFilters,\n    manualGroupBy,\n    manualSortBy,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useGlobalFilter', 'useFilters', 'useGroupBy', 'useSortBy', 'useExpanded'],\n    'usePagination'\n  )\n\n  const getAutoResetPage = useGetLatest(autoResetPage)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetPage()) {\n      dispatch({ type: actions.resetPage })\n    }\n  }, [\n    dispatch,\n    manualPagination ? null : data,\n    manualGlobalFilter ? null : globalFilter,\n    manualFilters ? null : filters,\n    manualGroupBy ? null : groupBy,\n    manualSortBy ? null : sortBy,\n  ])\n\n  const pageCount = manualPagination\n    ? userPageCount\n    : Math.ceil(rows.length / pageSize)\n\n  const pageOptions = React.useMemo(\n    () => (pageCount > 0 ? [...new Array(pageCount)].map((d, i) => i) : []),\n    [pageCount]\n  )\n\n  const page = React.useMemo(() => {\n    let page\n\n    if (manualPagination) {\n      page = rows\n    } else {\n      const pageStart = pageSize * pageIndex\n      const pageEnd = pageStart + pageSize\n\n      page = rows.slice(pageStart, pageEnd)\n    }\n\n    if (paginateExpandedRows) {\n      return page\n    }\n\n    return expandRows(page, { manualExpandedKey, expanded, expandSubRows })\n  }, [\n    expandSubRows,\n    expanded,\n    manualExpandedKey,\n    manualPagination,\n    pageIndex,\n    pageSize,\n    paginateExpandedRows,\n    rows,\n  ])\n\n  const canPreviousPage = pageIndex > 0\n  const canNextPage = pageCount === -1 || pageIndex < pageCount - 1\n\n  const gotoPage = React.useCallback(\n    pageIndex => {\n      dispatch({ type: actions.gotoPage, pageIndex })\n    },\n    [dispatch]\n  )\n\n  const previousPage = React.useCallback(() => {\n    return gotoPage(old => old - 1)\n  }, [gotoPage])\n\n  const nextPage = React.useCallback(() => {\n    return gotoPage(old => old + 1)\n  }, [gotoPage])\n\n  const setPageSize = React.useCallback(\n    pageSize => {\n      dispatch({ type: actions.setPageSize, pageSize })\n    },\n    [dispatch]\n  )\n\n  Object.assign(instance, {\n    pageOptions,\n    pageCount,\n    page,\n    canPreviousPage,\n    canNextPage,\n    gotoPage,\n    previousPage,\n    nextPage,\n    setPageSize,\n  })\n}\n","/* istanbul ignore file */\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nimport { flattenColumns, getFirstDefined } from '../utils'\n\n// Actions\nactions.resetPivot = 'resetPivot'\nactions.togglePivot = 'togglePivot'\n\nexport const _UNSTABLE_usePivotColumns = hooks => {\n  hooks.getPivotToggleProps = [defaultGetPivotToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceAfterData.push(useInstanceAfterData)\n  hooks.allColumns.push(allColumns)\n  hooks.accessValue.push(accessValue)\n  hooks.materializedColumns.push(materializedColumns)\n  hooks.materializedColumnsDeps.push(materializedColumnsDeps)\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.visibleColumnsDeps.push(visibleColumnsDeps)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\n_UNSTABLE_usePivotColumns.pluginName = 'usePivotColumns'\n\nconst defaultPivotColumns = []\n\nconst defaultGetPivotToggleProps = (props, { header }) => [\n  props,\n  {\n    onClick: header.canPivot\n      ? e => {\n          e.persist()\n          header.togglePivot()\n        }\n      : undefined,\n    style: {\n      cursor: header.canPivot ? 'pointer' : undefined,\n    },\n    title: 'Toggle Pivot',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      pivotColumns: defaultPivotColumns,\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetPivot) {\n    return {\n      ...state,\n      pivotColumns: instance.initialState.pivotColumns || defaultPivotColumns,\n    }\n  }\n\n  if (action.type === actions.togglePivot) {\n    const { columnId, value: setPivot } = action\n\n    const resolvedPivot =\n      typeof setPivot !== 'undefined'\n        ? setPivot\n        : !state.pivotColumns.includes(columnId)\n\n    if (resolvedPivot) {\n      return {\n        ...state,\n        pivotColumns: [...state.pivotColumns, columnId],\n      }\n    }\n\n    return {\n      ...state,\n      pivotColumns: state.pivotColumns.filter(d => d !== columnId),\n    }\n  }\n}\n\nfunction useInstanceAfterData(instance) {\n  instance.allColumns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\n  })\n}\n\nfunction allColumns(columns, { instance }) {\n  columns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\n    column.uniqueValues = new Set()\n  })\n  return columns\n}\n\nfunction accessValue(value, { column }) {\n  if (column.uniqueValues && typeof value !== 'undefined') {\n    column.uniqueValues.add(value)\n  }\n  return value\n}\n\nfunction materializedColumns(materialized, { instance }) {\n  const { allColumns, state } = instance\n\n  if (!state.pivotColumns.length || !state.groupBy || !state.groupBy.length) {\n    return materialized\n  }\n\n  const pivotColumns = state.pivotColumns\n    .map(id => allColumns.find(d => d.id === id))\n    .filter(Boolean)\n\n  const sourceColumns = allColumns.filter(\n    d =>\n      !d.isPivotSource &&\n      !state.groupBy.includes(d.id) &&\n      !state.pivotColumns.includes(d.id)\n  )\n\n  const buildPivotColumns = (depth = 0, parent, pivotFilters = []) => {\n    const pivotColumn = pivotColumns[depth]\n\n    if (!pivotColumn) {\n      return sourceColumns.map(sourceColumn => {\n        // TODO: We could offer support here for renesting pivoted\n        // columns inside copies of their header groups. For now,\n        // that seems like it would be (1) overkill on nesting, considering\n        // you already get nesting for every pivot level and (2)\n        // really hard. :)\n\n        return {\n          ...sourceColumn,\n          canPivot: false,\n          isPivoted: true,\n          parent,\n          depth: depth,\n          id: `${parent ? `${parent.id}.${sourceColumn.id}` : sourceColumn.id}`,\n          accessor: (originalRow, i, row) => {\n            if (pivotFilters.every(filter => filter(row))) {\n              return row.values[sourceColumn.id]\n            }\n          },\n        }\n      })\n    }\n\n    const uniqueValues = Array.from(pivotColumn.uniqueValues).sort()\n\n    return uniqueValues.map(uniqueValue => {\n      const columnGroup = {\n        ...pivotColumn,\n        Header:\n          pivotColumn.PivotHeader || typeof pivotColumn.header === 'string'\n            ? `${pivotColumn.Header}: ${uniqueValue}`\n            : uniqueValue,\n        isPivotGroup: true,\n        parent,\n        depth,\n        id: parent\n          ? `${parent.id}.${pivotColumn.id}.${uniqueValue}`\n          : `${pivotColumn.id}.${uniqueValue}`,\n        pivotValue: uniqueValue,\n      }\n\n      columnGroup.columns = buildPivotColumns(depth + 1, columnGroup, [\n        ...pivotFilters,\n        row => row.values[pivotColumn.id] === uniqueValue,\n      ])\n\n      return columnGroup\n    })\n  }\n\n  const newMaterialized = flattenColumns(buildPivotColumns())\n\n  return [...materialized, ...newMaterialized]\n}\n\nfunction materializedColumnsDeps(\n  deps,\n  {\n    instance: {\n      state: { pivotColumns, groupBy },\n    },\n  }\n) {\n  return [...deps, pivotColumns, groupBy]\n}\n\nfunction visibleColumns(visibleColumns, { instance: { state } }) {\n  visibleColumns = visibleColumns.filter(d => !d.isPivotSource)\n\n  if (state.pivotColumns.length && state.groupBy && state.groupBy.length) {\n    visibleColumns = visibleColumns.filter(\n      column => column.isGrouped || column.isPivoted\n    )\n  }\n\n  return visibleColumns\n}\n\nfunction visibleColumnsDeps(deps, { instance }) {\n  return [...deps, instance.state.pivotColumns, instance.state.groupBy]\n}\n\nfunction useInstance(instance) {\n  const {\n    columns,\n    allColumns,\n    flatHeaders,\n    // pivotFn = defaultPivotFn,\n    // manualPivot,\n    getHooks,\n    plugins,\n    dispatch,\n    autoResetPivot = true,\n    manaulPivot,\n    disablePivot,\n    defaultCanPivot,\n  } = instance\n\n  ensurePluginOrder(plugins, ['useGroupBy'], 'usePivotColumns')\n\n  const getInstance = useGetLatest(instance)\n\n  allColumns.forEach(column => {\n    const {\n      accessor,\n      defaultPivot: defaultColumnPivot,\n      disablePivot: columnDisablePivot,\n    } = column\n\n    column.canPivot = accessor\n      ? getFirstDefined(\n          column.canPivot,\n          columnDisablePivot === true ? false : undefined,\n          disablePivot === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(\n          column.canPivot,\n          defaultColumnPivot,\n          defaultCanPivot,\n          false\n        )\n\n    if (column.canPivot) {\n      column.togglePivot = () => instance.togglePivot(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const togglePivot = (columnId, value) => {\n    dispatch({ type: actions.togglePivot, columnId, value })\n  }\n\n  flatHeaders.forEach(header => {\n    header.getPivotToggleProps = makePropGetter(\n      getHooks().getPivotToggleProps,\n      {\n        instance: getInstance(),\n        header,\n      }\n    )\n  })\n\n  const getAutoResetPivot = useGetLatest(autoResetPivot)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetPivot()) {\n      dispatch({ type: actions.resetPivot })\n    }\n  }, [dispatch, manaulPivot ? null : columns])\n\n  Object.assign(instance, {\n    togglePivot,\n  })\n}\n\nfunction prepareRow(row) {\n  row.allCells.forEach(cell => {\n    // Grouped cells are in the pivotColumns and the pivot cell for the row\n    cell.isPivoted = cell.column.isPivoted\n  })\n}\n","import React from 'react'\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useGetLatest,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nconst pluginName = 'useRowSelect'\n\n// Actions\nactions.resetSelectedRows = 'resetSelectedRows'\nactions.toggleAllRowsSelected = 'toggleAllRowsSelected'\nactions.toggleRowSelected = 'toggleRowSelected'\n\nexport const useRowSelect = hooks => {\n  hooks.getToggleRowSelectedProps = [defaultGetToggleRowSelectedProps]\n  hooks.getToggleAllRowsSelectedProps = [defaultGetToggleAllRowsSelectedProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseRowSelect.pluginName = pluginName\n\nconst defaultGetToggleRowSelectedProps = (props, { instance, row }) => {\n  const { manualRowSelectedKey = 'isSelected' } = instance\n  let checked = false\n\n  if (row.original && row.original[manualRowSelectedKey]) {\n    checked = true\n  } else {\n    checked = row.isSelected\n  }\n\n  return [\n    props,\n    {\n      onChange: e => {\n        row.toggleRowSelected(e.target.checked)\n      },\n      style: {\n        cursor: 'pointer',\n      },\n      checked,\n      title: 'Toggle Row Selected',\n      indeterminate: row.isSomeSelected,\n    },\n  ]\n}\n\nconst defaultGetToggleAllRowsSelectedProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleAllRowsSelected(e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: instance.isAllRowsSelected,\n    title: 'Toggle All Rows Selected',\n    indeterminate: Boolean(\n      !instance.isAllRowsSelected &&\n        Object.keys(instance.state.selectedRowIds).length\n    ),\n  },\n]\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      selectedRowIds: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSelectedRows) {\n    return {\n      ...state,\n      selectedRowIds: instance.initialState.selectedRowIds || {},\n    }\n  }\n\n  if (action.type === actions.toggleAllRowsSelected) {\n    const { value: setSelected } = action\n    const {\n      isAllRowsSelected,\n      rowsById,\n      nonGroupedRowsById = rowsById,\n    } = instance\n\n    const selectAll =\n      typeof setSelected !== 'undefined' ? setSelected : !isAllRowsSelected\n\n    if (selectAll) {\n      const selectedRowIds = {}\n\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\n        selectedRowIds[rowId] = true\n      })\n\n      return {\n        ...state,\n        selectedRowIds,\n      }\n    }\n\n    return {\n      ...state,\n      selectedRowIds: {},\n    }\n  }\n\n  if (action.type === actions.toggleRowSelected) {\n    const { id, value: setSelected } = action\n    const { rowsById, selectSubRows = true } = instance\n\n    // Join the ids of deep rows\n    // to make a key, then manage all of the keys\n    // in a flat object\n    const row = rowsById[id]\n    const isSelected = row.isSelected\n    const shouldExist =\n      typeof setSelected !== 'undefined' ? setSelected : !isSelected\n\n    if (isSelected === shouldExist) {\n      return state\n    }\n\n    let newSelectedRowIds = { ...state.selectedRowIds }\n\n    const handleRowById = id => {\n      const row = rowsById[id]\n\n      if (!row.isGrouped) {\n        if (!isSelected && shouldExist) {\n          newSelectedRowIds[id] = true\n        } else if (isSelected && !shouldExist) {\n          delete newSelectedRowIds[id]\n        }\n      }\n\n      if (selectSubRows && row.subRows) {\n        return row.subRows.forEach(row => handleRowById(row.id))\n      }\n    }\n\n    handleRowById(id)\n\n    return {\n      ...state,\n      selectedRowIds: newSelectedRowIds,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    getHooks,\n    plugins,\n    rowsById,\n    nonGroupedRowsById = rowsById,\n    autoResetSelectedRows = true,\n    state: { selectedRowIds },\n    selectSubRows = true,\n    dispatch,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGroupBy', 'useSortBy'],\n    'useRowSelect'\n  )\n\n  const selectedFlatRows = React.useMemo(() => {\n    const selectedFlatRows = []\n\n    rows.forEach(row => {\n      const isSelected = selectSubRows\n        ? getRowIsSelected(row, selectedRowIds)\n        : !!selectedRowIds[row.id]\n      row.isSelected = !!isSelected\n      row.isSomeSelected = isSelected === null\n\n      if (isSelected) {\n        selectedFlatRows.push(row)\n      }\n    })\n\n    return selectedFlatRows\n  }, [rows, selectSubRows, selectedRowIds])\n\n  let isAllRowsSelected = Boolean(\n    Object.keys(nonGroupedRowsById).length && Object.keys(selectedRowIds).length\n  )\n\n  if (isAllRowsSelected) {\n    if (Object.keys(nonGroupedRowsById).some(id => !selectedRowIds[id])) {\n      isAllRowsSelected = false\n    }\n  }\n\n  const getAutoResetSelectedRows = useGetLatest(autoResetSelectedRows)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSelectedRows()) {\n      dispatch({ type: actions.resetSelectedRows })\n    }\n  }, [dispatch, data])\n\n  const toggleAllRowsSelected = React.useCallback(\n    value => dispatch({ type: actions.toggleAllRowsSelected, value }),\n    [dispatch]\n  )\n\n  const toggleRowSelected = React.useCallback(\n    (id, value) => dispatch({ type: actions.toggleRowSelected, id, value }),\n    [dispatch]\n  )\n\n  const getInstance = useGetLatest(instance)\n\n  const getToggleAllRowsSelectedProps = makePropGetter(\n    getHooks().getToggleAllRowsSelectedProps,\n    { instance: getInstance() }\n  )\n\n  Object.assign(instance, {\n    selectedFlatRows,\n    isAllRowsSelected,\n    toggleRowSelected,\n    toggleAllRowsSelected,\n    getToggleAllRowsSelectedProps,\n  })\n}\n\nfunction prepareRow(row, { instance }) {\n  row.toggleRowSelected = set => instance.toggleRowSelected(row.id, set)\n\n  row.getToggleRowSelectedProps = makePropGetter(\n    instance.getHooks().getToggleRowSelectedProps,\n    { instance: instance, row }\n  )\n}\n\nfunction getRowIsSelected(row, selectedRowIds) {\n  if (selectedRowIds[row.id]) {\n    return true\n  }\n\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (getRowIsSelected(subRow, selectedRowIds)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n    return allChildrenSelected ? true : someSelected ? null : false\n  }\n\n  return false\n}\n","import React from 'react'\n\nimport {\n  actions,\n  functionalUpdate,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nconst defaultInitialRowStateAccessor = originalRow => ({})\nconst defaultInitialCellStateAccessor = originalRow => ({})\n\n// Actions\nactions.setRowState = 'setRowState'\nactions.setCellState = 'setCellState'\nactions.resetRowState = 'resetRowState'\n\nexport const useRowState = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseRowState.pluginName = 'useRowState'\n\nfunction reducer(state, action, previousState, instance) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    rowsById,\n  } = instance\n\n  if (action.type === actions.init) {\n    return {\n      rowState: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetRowState) {\n    return {\n      ...state,\n      rowState: instance.initialState.rowState || {},\n    }\n  }\n\n  if (action.type === actions.setRowState) {\n    const { rowId, value } = action\n\n    const oldRowState =\n      typeof state.rowState[rowId] !== 'undefined'\n        ? state.rowState[rowId]\n        : initialRowStateAccessor(rowsById[rowId].original)\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [rowId]: functionalUpdate(value, oldRowState),\n      },\n    }\n  }\n\n  if (action.type === actions.setCellState) {\n    const { rowId, columnId, value } = action\n\n    const oldRowState =\n      typeof state.rowState[rowId] !== 'undefined'\n        ? state.rowState[rowId]\n        : initialRowStateAccessor(rowsById[rowId].original)\n\n    const oldCellState =\n      typeof oldRowState?.cellState?.[columnId] !== 'undefined'\n        ? oldRowState.cellState[columnId]\n        : initialCellStateAccessor(rowsById[rowId].original)\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [rowId]: {\n          ...oldRowState,\n          cellState: {\n            ...(oldRowState.cellState || {}),\n            [columnId]: functionalUpdate(value, oldCellState),\n          },\n        },\n      },\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const { autoResetRowState = true, data, dispatch } = instance\n\n  const setRowState = React.useCallback(\n    (rowId, value) =>\n      dispatch({\n        type: actions.setRowState,\n        rowId,\n        value,\n      }),\n    [dispatch]\n  )\n\n  const setCellState = React.useCallback(\n    (rowId, columnId, value) =>\n      dispatch({\n        type: actions.setCellState,\n        rowId,\n        columnId,\n        value,\n      }),\n    [dispatch]\n  )\n\n  const getAutoResetRowState = useGetLatest(autoResetRowState)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetRowState()) {\n      dispatch({ type: actions.resetRowState })\n    }\n  }, [data])\n\n  Object.assign(instance, {\n    setRowState,\n    setCellState,\n  })\n}\n\nfunction prepareRow(row, { instance }) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    state: { rowState },\n  } = instance\n\n  if (row.original) {\n    row.state =\n      typeof rowState[row.id] !== 'undefined'\n        ? rowState[row.id]\n        : initialRowStateAccessor(row.original)\n\n    row.setState = updater => {\n      return instance.setRowState(row.id, updater)\n    }\n\n    row.cells.forEach(cell => {\n      if (!row.state.cellState) {\n        row.state.cellState = {}\n      }\n\n      cell.state =\n        typeof row.state.cellState[cell.column.id] !== 'undefined'\n          ? row.state.cellState[cell.column.id]\n          : initialCellStateAccessor(row.original)\n\n      cell.setState = updater => {\n        return instance.setCellState(row.id, cell.column.id, updater)\n      }\n    })\n  }\n}\n","import React from 'react'\n\nimport { functionalUpdate, actions } from '../publicUtils'\n\n// Actions\nactions.resetColumnOrder = 'resetColumnOrder'\nactions.setColumnOrder = 'setColumnOrder'\n\nexport const useColumnOrder = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.visibleColumnsDeps.push((deps, { instance }) => {\n    return [...deps, instance.state.columnOrder]\n  })\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnOrder.pluginName = 'useColumnOrder'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetColumnOrder) {\n    return {\n      ...state,\n      columnOrder: instance.initialState.columnOrder || [],\n    }\n  }\n\n  if (action.type === actions.setColumnOrder) {\n    return {\n      ...state,\n      columnOrder: functionalUpdate(action.columnOrder, state.columnOrder),\n    }\n  }\n}\n\nfunction visibleColumns(\n  columns,\n  {\n    instance: {\n      state: { columnOrder },\n    },\n  }\n) {\n  // If there is no order, return the normal columns\n  if (!columnOrder || !columnOrder.length) {\n    return columns\n  }\n\n  const columnOrderCopy = [...columnOrder]\n\n  // If there is an order, make a copy of the columns\n  const columnsCopy = [...columns]\n\n  // And make a new ordered array of the columns\n  const columnsInOrder = []\n\n  // Loop over the columns and place them in order into the new array\n  while (columnsCopy.length && columnOrderCopy.length) {\n    const targetColumnId = columnOrderCopy.shift()\n    const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId)\n    if (foundIndex > -1) {\n      columnsInOrder.push(columnsCopy.splice(foundIndex, 1)[0])\n    }\n  }\n\n  // If there are any columns left, add them to the end\n  return [...columnsInOrder, ...columnsCopy]\n}\n\nfunction useInstance(instance) {\n  const { dispatch } = instance\n\n  instance.setColumnOrder = React.useCallback(\n    columnOrder => {\n      return dispatch({ type: actions.setColumnOrder, columnOrder })\n    },\n    [dispatch]\n  )\n}\n","import {\n  actions,\n  defaultColumn,\n  makePropGetter,\n  useGetLatest,\n  ensurePluginOrder,\n} from '../publicUtils'\n\nimport { getFirstDefined } from '../utils'\n\n// Default Column\ndefaultColumn.canResize = true\n\n// Actions\nactions.columnStartResizing = 'columnStartResizing'\nactions.columnResizing = 'columnResizing'\nactions.columnDoneResizing = 'columnDoneResizing'\n\nexport const useResizeColumns = hooks => {\n  hooks.getResizerProps = [defaultGetResizerProps]\n  hooks.getHeaderProps.push({\n    style: {\n      position: 'relative',\n    },\n  })\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n}\n\nconst defaultGetResizerProps = (props, { instance, header }) => {\n  const { dispatch } = instance\n\n  const onResizeStart = (e, header) => {\n    let isTouchEvent = false\n    if (e.type === 'touchstart') {\n      // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n      if (e.touches && e.touches.length > 1) {\n        return\n      }\n      isTouchEvent = true\n    }\n    const headersToResize = getLeafHeaders(header)\n    const headerIdWidths = headersToResize.map(d => [d.id, d.totalWidth])\n\n    const clientX = isTouchEvent ? Math.round(e.touches[0].clientX) : e.clientX\n\n    const dispatchMove = clientXPos => {\n      dispatch({ type: actions.columnResizing, clientX: clientXPos })\n    }\n    const dispatchEnd = () => dispatch({ type: actions.columnDoneResizing })\n\n    const handlersAndEvents = {\n      mouse: {\n        moveEvent: 'mousemove',\n        moveHandler: e => dispatchMove(e.clientX),\n        upEvent: 'mouseup',\n        upHandler: e => {\n          document.removeEventListener(\n            'mousemove',\n            handlersAndEvents.mouse.moveHandler\n          )\n          document.removeEventListener(\n            'mouseup',\n            handlersAndEvents.mouse.upHandler\n          )\n          dispatchEnd()\n        },\n      },\n      touch: {\n        moveEvent: 'touchmove',\n        moveHandler: e => {\n          if (e.cancelable) {\n            e.preventDefault()\n            e.stopPropagation()\n          }\n          dispatchMove(e.touches[0].clientX)\n          return false\n        },\n        upEvent: 'touchend',\n        upHandler: e => {\n          document.removeEventListener(\n            handlersAndEvents.touch.moveEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          document.removeEventListener(\n            handlersAndEvents.touch.upEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          dispatchEnd()\n        },\n      },\n    }\n\n    const events = isTouchEvent\n      ? handlersAndEvents.touch\n      : handlersAndEvents.mouse\n    document.addEventListener(events.moveEvent, events.moveHandler, {\n      passive: false,\n    })\n    document.addEventListener(events.upEvent, events.upHandler, {\n      passive: false,\n    })\n\n    dispatch({\n      type: actions.columnStartResizing,\n      columnId: header.id,\n      columnWidth: header.totalWidth,\n      headerIdWidths,\n      clientX,\n    })\n  }\n\n  return [\n    props,\n    {\n      onMouseDown: e => e.persist() || onResizeStart(e, header),\n      onTouchStart: e => e.persist() || onResizeStart(e, header),\n      style: {\n        cursor: 'ew-resize',\n      },\n      draggable: false,\n      role: 'separator',\n    },\n  ]\n}\n\nuseResizeColumns.pluginName = 'useResizeColumns'\n\nfunction reducer(state, action) {\n  if (action.type === actions.init) {\n    return {\n      columnResizing: {\n        columnWidths: {},\n      },\n      ...state,\n    }\n  }\n\n  if (action.type === actions.columnStartResizing) {\n    const { clientX, columnId, columnWidth, headerIdWidths } = action\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: clientX,\n        headerIdWidths,\n        columnWidth,\n        isResizingColumn: columnId,\n      },\n    }\n  }\n\n  if (action.type === actions.columnResizing) {\n    const { clientX } = action\n    const { startX, columnWidth, headerIdWidths } = state.columnResizing\n\n    const deltaX = clientX - startX\n    const percentageDeltaX = deltaX / columnWidth\n\n    const newColumnWidths = {}\n\n    headerIdWidths.forEach(([headerId, headerWidth]) => {\n      newColumnWidths[headerId] = Math.max(\n        headerWidth + headerWidth * percentageDeltaX,\n        0\n      )\n    })\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        columnWidths: {\n          ...state.columnResizing.columnWidths,\n          ...newColumnWidths,\n        },\n      },\n    }\n  }\n\n  if (action.type === actions.columnDoneResizing) {\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: null,\n        isResizingColumn: null,\n      },\n    }\n  }\n}\n\nconst useInstanceBeforeDimensions = instance => {\n  const {\n    flatHeaders,\n    disableResizing,\n    getHooks,\n    state: { columnResizing },\n  } = instance\n\n  const getInstance = useGetLatest(instance)\n\n  flatHeaders.forEach(header => {\n    const canResize = getFirstDefined(\n      header.disableResizing === true ? false : undefined,\n      disableResizing === true ? false : undefined,\n      true\n    )\n\n    header.canResize = canResize\n    header.width = columnResizing.columnWidths[header.id] || header.width\n    header.isResizing = columnResizing.isResizingColumn === header.id\n\n    if (canResize) {\n      header.getResizerProps = makePropGetter(getHooks().getResizerProps, {\n        instance: getInstance(),\n        header,\n      })\n    }\n  })\n}\n\nfunction useInstance({ plugins }) {\n  ensurePluginOrder(plugins, ['useAbsoluteLayout'], 'useResizeColumns')\n}\n\nfunction getLeafHeaders(header) {\n  const leafHeaders = []\n  const recurseHeader = header => {\n    if (header.columns && header.columns.length) {\n      header.columns.map(recurseHeader)\n    }\n    leafHeaders.push(header)\n  }\n  recurseHeader(header)\n  return leafHeaders\n}\n","const cellStyles = {\n  position: 'absolute',\n  top: 0,\n}\n\nexport const useAbsoluteLayout = hooks => {\n  hooks.getTableBodyProps.push(getRowStyles)\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n\n  hooks.getHeaderProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${column.totalLeft}px`,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getCellProps.push((props, { cell }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${cell.column.totalLeft}px`,\n        width: `${cell.column.totalWidth}px`,\n      },\n    },\n  ])\n}\n\nuseAbsoluteLayout.pluginName = 'useAbsoluteLayout'\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      position: 'relative',\n      width: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n","const cellStyles = {\n  display: 'inline-block',\n  boxSizing: 'border-box',\n}\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: 'flex',\n      width: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n\nexport const useBlockLayout = hooks => {\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n\n  hooks.getHeaderProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getCellProps.push((props, { cell }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${cell.column.totalWidth}px`,\n      },\n    },\n  ])\n}\n\nuseBlockLayout.pluginName = 'useBlockLayout'\n","export function useFlexLayout(hooks) {\n  hooks.getTableBodyProps.push(getTableBodyProps)\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getHeaderProps.push(getHeaderProps)\n  hooks.getCellProps.push(getCellProps)\n}\n\nuseFlexLayout.pluginName = 'useFlexLayout'\n\nconst getTableBodyProps = (props, { instance }) => [\n  props,\n  {\n    style: {\n      minWidth: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: 'flex',\n      flex: '1 0 auto',\n      minWidth: `${instance.totalColumnsMinWidth}px`,\n    },\n  },\n]\n\nconst getHeaderProps = (props, { column }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: column.totalFlexWidth ? `${column.totalFlexWidth} 0 auto` : undefined,\n      minWidth: `${column.totalMinWidth}px`,\n      width: `${column.totalWidth}px`,\n    },\n  },\n]\n\nconst getCellProps = (props, { cell }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: `${cell.column.totalFlexWidth} 0 auto`,\n      minWidth: `${cell.column.totalMinWidth}px`,\n      width: `${cell.column.totalWidth}px`,\n    },\n  },\n]\n"]},"metadata":{},"sourceType":"module"}